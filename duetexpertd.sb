(version 1)
(deny default)
(allow device-camera)
(allow darwin-notification-post)
(allow file*)
(allow file-clone
	(subpath-prefix "${FRONT_USER_HOME}/XcodeBuiltProducts")
	(require-all
		(extension-class "com.apple.app-sandbox.read-write")
		(require-any
			(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
			(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")))
			(require-all
				(extension-class "com.apple.app-sandbox.read-write")
				(require-any
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(require-any
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")))))
	(require-all
		(extension-class "com.apple.app-sandbox.read")
		(require-any
			(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
			(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")))
			(require-all
				(extension-class "com.apple.app-sandbox.read-write")
				(require-any
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(require-any
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")))))
	(require-all
		(extension-class "com.apple.mediaserverd.read-write")
		(require-any
			(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
			(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")))
			(require-all
				(extension-class "com.apple.app-sandbox.read-write")
				(require-any
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(require-any
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")))))
	(require-all
		(extension-class "com.apple.mediaserverd.read")
		(require-any
			(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
			(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")))
			(require-all
				(extension-class "com.apple.app-sandbox.read-write")
				(require-any
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(require-any
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")))))
	(require-all
		(extension-class "com.apple.aned.read-only")
		(require-any
			(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
			(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
			(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
			(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
			(extension "b'com.apple.sharing.airdrop.readonly'")
			(extension "b'com.apple.app-sandbox.read'")
			(extension "b'com.apple.app-sandbox.read-write'")
			(extension "b'com.apple.quicklook.readonly'")))
	(require-all
		(extension-class "com.apple.app-sandbox.read")
		(require-any
			(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
			(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
			(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
			(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
			(extension "b'com.apple.sharing.airdrop.readonly'")
			(extension "b'com.apple.app-sandbox.read'")
			(extension "b'com.apple.app-sandbox.read-write'")
			(extension "b'com.apple.quicklook.readonly'")))
	(require-all
		(extension-class "com.apple.mediaserverd.read")
		(require-any
			(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
			(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
			(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
			(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
			(extension "b'com.apple.sharing.airdrop.readonly'")
			(extension "b'com.apple.app-sandbox.read'")
			(extension "b'com.apple.app-sandbox.read-write'")
			(extension "b'com.apple.quicklook.readonly'")))
	(require-all
		(extension-class "com.apple.quicklook.readonly")
		(require-any
			(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
			(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
			(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
			(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
			(extension "b'com.apple.sharing.airdrop.readonly'")
			(extension "b'com.apple.app-sandbox.read'")
			(extension "b'com.apple.app-sandbox.read-write'")
			(extension "b'com.apple.quicklook.readonly'")))
	(require-all
		(extension-class "com.apple.sharing.airdrop.readonly")
		(require-any
			(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
			(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
			(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
			(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
			(extension "b'com.apple.sharing.airdrop.readonly'")
			(extension "b'com.apple.app-sandbox.read'")
			(extension "b'com.apple.app-sandbox.read-write'")
			(extension "b'com.apple.quicklook.readonly'")))
	(require-all
		(extension "b'com.apple.sandbox.executable'")
		(require-not (literal))
		(require-any
			(extension-class "com.apple.mediaserverd.read")
			(extension-class "com.apple.app-sandbox.read")))
	(require-all
		(require-all (require-not (literal "/System/Library/Caches/apticket.der"))
(require-not (subpath "/System/Library/Caches/com.apple.factorydata"))
(require-not (subpath "/System/Library/Caches/com.apple.kernelcaches")))
		(require-not (literal "/usr/standalone/firmware/apticket.der"))
		(require-any
			(entitlement-is-bool-true "b'com.apple.private.amfi.can-execute-cdhash'")
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(subpath "/System/Library")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(subpath "/Library/RegionFeatures")
					(subpath "/System/Library")))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(subpath "/Library/RegionFeatures")
					(subpath "/System/Library")))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(require-any
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")))
			(require-all
				(extension "b'com.apple.sandbox.application-group'")
				(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/.com.apple."))
				(literal "/private/var/")
				(require-any
					(require-all
						(subpath-prefix "${FRONT_USER_HOME}")
						(require-not (regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]"))
						(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+$"))
					(require-all
						(literal "/private/var/PersonaVolumes/")
						(regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+$")
						(require-any
							(extension-class "com.apple.mediaserverd.read")
							(extension-class "com.apple.app-sandbox.read")))))
			(require-all
				(entitlement-is-bool-true "b'com.apple.security.system-container'")
				(require-any
					(entitlement-is-bool-true "b'com.apple.private.amfi.can-execute-cdhash'")
					(require-all
						(extension "b'com.apple.sandbox.system-container'")
						(regex #"/private/var/containers/Data/System/[UNSUPPORTED]+/.com.apple.")
						(require-any
							(require-all
								(regex #"/private/var/containers/Data/System/[UNSUPPORTED]+/")
								(require-any
									(extension-class "com.apple.app-sandbox.read-write")
									(extension-class "com.apple.app-sandbox.read")
									(extension-class "com.apple.sharing.airdrop.readonly")
									(extension-class "com.apple.mediaserverd.read-write")
									(extension-class "com.apple.nsurlsessiond.readonly")
									(extension-class "com.apple.aned.read-only")
									(extension-class "com.apple.mediaserverd.read")))
							(require-all
								(literal "/private/var/containers/Data/System/")
								(require-any
									(require-all
										(extension-class "com.apple.app-sandbox.read")
										(regex #"^/private/var/containers/Data/System/[^/]+/" #"^/private/var/containers/Data/System/[^/]+$"))
									(require-all
										(extension-class "com.apple.mediaserverd.read")
										(regex #"^/private/var/containers/Data/System/[^/]+/" #"^/private/var/containers/Data/System/[^/]+$"))))))))
			(require-all
				(extension-class "com.apple.app-sandbox.read-write")
				(extension "b'com.apple.fileprovider.read-write'"))
			(require-all
				(extension "b'com.apple.sandbox.system-group'")
				(require-any
					(require-all
						(entitlement-is-present "b'com.apple.security.system-groups'")
						(regex #"/private/var/containers/Shared/SystemGroup/[UNSUPPORTED]+/.com.apple.")
						(require-any
							(require-all
								(regex #"/private/var/containers/Shared/SystemGroup/[UNSUPPORTED]+/")
								(require-any
									(extension-class "com.apple.nsurlsessiond.readonly")
									(extension-class "com.apple.aned.read-only")
									(extension-class "com.apple.mediaserverd.read")
									(extension-class "com.apple.app-sandbox.read-write")
									(extension-class "com.apple.app-sandbox.read")
									(extension-class "com.apple.sharing.airdrop.readonly")
									(extension-class "com.apple.mediaserverd.read-write")))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(literal "/private/var/containers/Shared/SystemGroup/")
								(regex #"^/private/var/containers/Shared/SystemGroup/[^/]+/" #"^/private/var/containers/Shared/SystemGroup/[^/]+$"))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(literal "/private/var/containers/Shared/SystemGroup/")
								(regex #"^/private/var/containers/Shared/SystemGroup/[^/]+/" #"^/private/var/containers/Shared/SystemGroup/[^/]+$"))))
					(require-all
						(entitlement-is-present "b'com.apple.security.system-group-containers'")
						(regex #"/private/var/containers/Shared/SystemGroup/[UNSUPPORTED]+/.com.apple.")
						(require-any
							(require-all
								(regex #"/private/var/containers/Shared/SystemGroup/[UNSUPPORTED]+/")
								(require-any
									(extension-class "com.apple.nsurlsessiond.readonly")
									(extension-class "com.apple.aned.read-only")
									(extension-class "com.apple.mediaserverd.read")
									(extension-class "com.apple.app-sandbox.read-write")
									(extension-class "com.apple.app-sandbox.read")
									(extension-class "com.apple.sharing.airdrop.readonly")
									(extension-class "com.apple.mediaserverd.read-write")))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(literal "/private/var/containers/Shared/SystemGroup/")
								(regex #"^/private/var/containers/Shared/SystemGroup/[^/]+/" #"^/private/var/containers/Shared/SystemGroup/[^/]+$"))
							(require-all
								(extension-class "com.apple.app-sandbox.read")
								(literal "/private/var/containers/Shared/SystemGroup/")
								(regex #"^/private/var/containers/Shared/SystemGroup/[^/]+/" #"^/private/var/containers/Shared/SystemGroup/[^/]+$"))))))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(extension "b'com.apple.fileprovider.read-write'")))))
(allow file-issue-extension)
(allow file-mount
	(subpath "/private/var/preferences/Logging")
	(require-any (literal "/private/var/db/DarwinDirectory/local/recordStore.data")
(literal-prefix "${FRONT_USER_HOME}/Library/DeviceRegistry/${ANY_UUID}/")
(subpath-prefix "${ENTITLEMENT:com.apple.security.exception.nano-paired-storage.subpath.read-only}")
(literal-prefix "NanoPreferencesSync/NanoDomains/${ENTITLEMENT:com.apple.security.exception.nano-preference.read-only}"))
	(subpath-prefix "${FRONT_USER_HOME}/Library/DeviceRegistry/${ANY_UUID}/${ENTITLEMENT:com.apple.security.exception.nano-paired-storage.subpath.read-write}")
	(literal "/private/var/Managed Preferences/mobile/.GlobalPreferences.plist")
	(extension "b'com.apple.sharing.airdrop.readonly'")
	(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
	(subpath-prefix "${FRONT_USER_HOME}/XcodeBuiltProducts")
	(literal-prefix "${FRONT_USER_HOME}/Library/DeviceRegistry/${ANY_UUID}/NanoPreferencesSync/NanoDomains/${ENTITLEMENT:com.apple.security.exception.nano-preference.read-write}")
	(literal-prefix "${FRONT_USER_HOME}/Library/Preferences/.GlobalPreferences.plist")
	(extension "b'com.apple.quicklook.readonly'")
	(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
	(extension "b'com.apple.app-sandbox.read'")
	(extension "b'com.apple.app-sandbox.read-write'")
	(extension "b'com.apple.sandbox.executable'")
	(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
	(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
	(require-all
		(require-all (require-not (literal "/System/Library/Caches/apticket.der"))
(require-not (subpath "/System/Library/Caches/com.apple.factorydata"))
(require-not (subpath "/System/Library/Caches/com.apple.kernelcaches")))
		(require-not (literal "/usr/standalone/firmware/apticket.der"))
		(require-any
			(require-any (literal "/private/var/db/MobileIdentityData/denylist.map")
(literal "/private/var/db/MobileIdentityData/Version.plist")
(literal "/private/var/db/MobileIdentityData/Indeterminates.plist")
(literal "/private/var/db/MobileIdentityData/AuthListReadyCdHashes.plist")
(subpath-prefix "${HOME}/Library/Spotlight")
(literal-prefix "${HOME}/Library/Mail/VIPs.plist"))
			(literal "/private/var/preferences/com.apple.networkd.plist")
			(require-any (subpath-prefix "${HOME}/Library/Biome/streams")
(subpath-prefix "${HOME}/Library/Logs/CallHistory")
(literal-prefix "${HOME}/Library/Logs/coreduetd.log")
(subpath-prefix "${HOME}/Library/Logs/com.apple.duetexpertd")
(literal-prefix "${HOME}/Library/SMS/com.apple.messages.abcache.duetexpertd.plist"))
			(literal-prefix "${FRONT_USER_HOME}/Library/Preferences/com.apple.carrier.plist")
			(subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/TransportLogs")
			(literal "/private/var/Managed Preferences/mobile/com.apple.networkd.plist")
			(literal-prefix "${FRONT_USER_HOME}/Library/UserConfigurationProfiles/EffectiveUserSettings.plist")
			(subpath-prefix "${HOME}/Library/CoreDuet")
			(subpath-prefix "${HOME}/Library/Caches/com.apple.Pasteboard")
			(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
			(subpath "/Developer/Applications")
			(subpath "/usr/lib")
			(subpath "/private/var/db/timezone")
			(subpath "/Library/RegionFeatures")
			(subpath "/Applications")
			(literal "/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.configurationprofiles/Library/ConfigurationProfiles/EffectiveUserSettings.plist")
			(subpath-prefix "${HOME}/Library/CallHistoryDB")
			(subpath "/usr/share")
			(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle/Application")
			(require-any (literal "/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.configurationprofiles/Library/ConfigurationProfiles/MDMAppManagement.plist")
(literal-prefix "${FRONT_USER_HOME}/Library/ConfigurationProfiles/MDMAppManagement.plist")
(literal-prefix "${FRONT_USER_HOME}/Library/UserConfigurationProfiles/MDMAppManagement.plist"))
			(subpath-prefix "${HOME}/Library/DuetExpertCenter")
			(require-any (literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db")
(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db-shm")
(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db-wal")
(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db-journal"))
			(subpath "/private/var/personalized_debug/Applications")
			(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync")
			(subpath "/private/var/tmp")
			(subpath "/private/var/containers/Bundle/Application")
			(literal-prefix "${HOME}/Library/Preferences/com.apple.mobilephone.speeddial.plist")
			(literal "/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.nsurlstoragedresources/Library/dafsaData.bin")
			(subpath "/System/Library")
			(literal-prefix "${HOME}/Library/Caches/DateFormats.plist")
			(literal-prefix "${FRONT_USER_HOME}/Library/ConfigurationProfiles/EffectiveUserSettings.plist")
			(subpath-prefix "${HOME}/Library/WebClips")
			(subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/DiagnosticLogs/CompanionSync/TransportLogs")
			(subpath-prefix "${PROCESS_TEMP_DIR}")
			(subpath-prefix "${FRONT_USER_HOME}/Library/Carrier Bundles/Overlay")
			(require-all
				(literal "/private/var/")
				(require-any
					(literal "/private/var/preferences/SystemConfiguration/com.apple.radios.plist")
					(require-all
						(subpath-prefix "${FRONT_USER_HOME}")
						(require-any
							(regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/com[.]apple[.]private[.]alloy[.]apppredictionsync" #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/nms[.]com[.]apple[.]private[.]alloy[.]apppredictionsync" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/(nms[.])?com[.]apple[.]private[.]alloy[.]apppredictionsync" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/(nms[.])?com[.]apple[.]private[.]alloy[.]apppredictionsync" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/(nms[.])?com[.]apple[.]private[.]alloy[.]apppredictionsync")
							(regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$")
							(regex #"^/private/var/mobile/Library/Carrier Bundles//carrier[.]plist$" #"^/private/var/mobile/Library/Carrier Bundles/.+/carrier[.]plist$" #"^/private/var/euser[0-9]+/Library/Carrier Bundles/.*/carrier[.]plist$" #"^/private/var/[-0-9A-F]+/Library/Carrier Bundles/.*/carrier[.]plist$" #"^/private/var/Users/[^/]+/Library/Carrier Bundles/.*/carrier[.]plist$")
							(regex #"^/private/var/mobile/Library/Carrier Bundles/[.]png$" #"^/private/var/mobile/Library/Carrier Bundles/.+[.]png$" #"^/private/var/euser[0-9]+/Library/Carrier Bundles/.*[.]png$" #"^/private/var/[-0-9A-F]+/Library/Carrier Bundles/.*[.]png$" #"^/private/var/Users/[^/]+/Library/Carrier Bundles/.*[.]png$")))))
			(require-all
				(require-not (literal-prefix "${ANY_USER_HOME}/Library/Caches/GeoServices/tguid.bin"))
				(require-any
					(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter")
					(subpath "/private/var/containers/Data/System/com.apple.geod")
					(subpath-prefix "${FRONT_USER_HOME}/Library/Caches/GeoServices")
					(entitlement-is-bool-true "b'com.apple.private.amfi.can-execute-cdhash'")
					(subpath-prefix "${HOME}/Library/Fonts")
					(literal "/dev/null")
					(literal "/dev/aes_0")
					(subpath "/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.icloud.findmydevice.managed/Library")
					(literal "/dev/urandom")
					(require-any (subpath "/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.configurationprofiles/Library/ConfigurationProfiles/PublicInfo")
(subpath-prefix "${FRONT_USER_HOME}/Library/ConfigurationProfiles/PublicInfo")
(subpath-prefix "${FRONT_USER_HOME}/Library/UserConfigurationProfiles/PublicInfo"))
					(subpath "/private/var/db/datadetectors/sys")
					(literal "/dev/dtracehelper")
					(literal "/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.mobilegestaltcache/Library/Caches/com.apple.MobileGestalt.plist")
					(literal "/dev/zero")
					(literal "/dev/random")
					(entitlement-is-bool-true "b'com.apple.private.amfi.can-execute-cdhash'")
					(require-all
						(literal "/private/var/")
						(require-any
							(require-all
								(regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/GeoServices$" #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/GeoServices/" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/GeoServices$" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/GeoServices/" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/GeoServices$" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/GeoServices/" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/GeoServices$" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/GeoServices/")
								(subpath-prefix "${FRONT_USER_HOME}"))
							(require-all
								(regex #"^/private/var/mobile/Library/Logs/CrashReporter/proactive_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/proactive_" #"^/private/var/mobile/Library/Logs/CrashReporter/[.]proactive_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/[.]proactive_" #"^/private/var/euser[0-9]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])proactive_" #"^/private/var/[-0-9A-F]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])proactive_" #"^/private/var/Users/[^/]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])proactive_")
								(subpath-prefix "${FRONT_USER_HOME}"))))
					(require-all
						(extension "b'com.apple.sandbox.application-group'")
						(require-any
							(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/.com.apple."))
							(require-all
								(literal "/private/var/")
								(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]")
								(require-not (subpath-prefix "${FRONT_USER_HOME}")))))
					(require-all
						(extension "b'com.apple.tcc.kTCCServiceAddressBook'")
						(entitlement-is-bool-true "b'com.apple.Contacts.database-allow'")
						(require-any
							(literal-prefix "${HOME}/Library/Preferences/com.apple.mobilephone.speeddial.plist")
							(subpath-prefix "${HOME}/Library/AddressBook/Delegates")
							(subpath-prefix "${HOME}/Library/AddressBook")))
					(require-all
						(literal "/private/var/")
						(extension "b'com.apple.sandbox.application-group'")
						(require-any
							(require-all
								(subpath-prefix "${FRONT_USER_HOME}")
								(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+$"))
							(require-all
								(literal "/private/var/PersonaVolumes/")
								(regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+$"))))
					(require-all
						(entitlement-is-bool-true "b'com.apple.coreduetd.people'")
						(require-any
							(require-any (literal-prefix "${HOME}/Library/CoreDuet/People")
(literal-prefix "${HOME}/Library/CoreDuet/People/interactionC.db")
(literal-prefix "${HOME}/Library/CoreDuet/People/interactionC.db-wal")
(literal-prefix "${HOME}/Library/CoreDuet/People/interactionC.db-journal"))
							(literal-prefix "${HOME}/Library/CoreDuet/People/interactionC.db-shm")))
					(require-all
						(uid 0)
						(literal "/private/etc/master.passwd"))
					(require-all
						(entitlement-is-bool-true "b'com.apple.security.system-container'")
						(extension "b'com.apple.sandbox.system-container'")
						(regex #"/private/var/containers/Data/System/[UNSUPPORTED]+/.com.apple.")
						(require-any
							(regex #"/private/var/containers/Data/System/[UNSUPPORTED]+/")
							(require-all
								(literal "/private/var/containers/Data/System/")
								(regex #"^/private/var/containers/Data/System/[^/]+/" #"^/private/var/containers/Data/System/[^/]+$"))))
					(require-all
						(regex #"/private/var/containers/Shared/SystemGroup/[UNSUPPORTED]+/.com.apple.")
						(extension "b'com.apple.sandbox.system-group'")
						(entitlement-is-present "b'com.apple.security.system-groups'")
						(entitlement-is-present "b'com.apple.security.system-group-containers'"))
					(require-all
						(extension "b'com.apple.sandbox.system-group'")
						(require-any
							(require-all
								(entitlement-is-present "b'com.apple.security.system-groups'")
								(require-any
									(regex #"/private/var/containers/Shared/SystemGroup/[UNSUPPORTED]+/")
									(require-all
										(literal "/private/var/containers/Shared/SystemGroup/")
										(regex #"^/private/var/containers/Shared/SystemGroup/[^/]+/" #"^/private/var/containers/Shared/SystemGroup/[^/]+$"))))
							(require-all
								(entitlement-is-present "b'com.apple.security.system-group-containers'")
								(require-any
									(regex #"/private/var/containers/Shared/SystemGroup/[UNSUPPORTED]+/")
									(require-all
										(literal "/private/var/containers/Shared/SystemGroup/")
										(regex #"^/private/var/containers/Shared/SystemGroup/[^/]+/" #"^/private/var/containers/Shared/SystemGroup/[^/]+$"))))))
					(require-all
						(entitlement-is-bool-true "b'com.apple.private.logging.diagnostic'")
						(extension "b'com.apple.logd.read-only'")
						(require-any
							(require-any (subpath "/private/var/userdata/diagnostics")
(subpath "/private/var/db/timesync"))
							(require-any (subpath "/private/var/db/diagnostics")
(subpath "/private/var/db/uuidtext"))))
					(require-all
						(vnode-type BLOCK-DEVICE)
						(vnode-type CHARACTER-DEVICE)
						(require-any
							(literal "/private")
							(subpath "/Developer")
							(literal "/private/preboot/cryptex1/current/RestoreVersion.plist")
							(subpath "/System/Library/PrivateFrameworks")
							(literal "/private/etc/passwd")
							(literal-prefix "${FRONT_USER_HOME}/Library/Application Support/com.apple.palette.green.plist")
							(literal "/private/etc/services")
							(require-any (literal "/private/etc/group")
(literal "/private/etc/protocols"))
							(subpath "/System/Library/Frameworks")
							(literal "/System")
							(subpath "/System/Cryptexes")
							(literal "/private/preboot/cryptex1/current/SystemVersion.plist")
							(literal "/private/etc/hosts")
							(subpath "/private/preboot/Cryptexes")
							(literal-prefix "${FRONT_USER_HOME}/Library/Application Support/com.apple.palette.green.bin")
							(literal "/")
							(literal "/private/etc/fstab")
							(literal "/private/preboot")
							(subpath "/System/Developer")
							(subpath "/private/var/MobileAsset/PreinstalledAssetsV2/InstallWithOs")
							(require-all
								(process-attribute is-apple-signed-executable)
								(require-any
									(literal "/private/var/preferences/SystemConfiguration/preferences.plist")
									(literal "/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.configurationprofiles/Library/ConfigurationProfiles/CloudConfigurationSetAsideDetails.plist")
									(subpath "/usr/libexec")
									(require-any (literal "/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.configurationprofiles/Library/ConfigurationProfiles/CloudConfigurationDetails.plist")
(literal-prefix "${FRONT_USER_HOME}/Library/ConfigurationProfiles/CloudConfigurationDetails.plist")
(literal-prefix "${FRONT_USER_HOME}/Library/ConfigurationProfiles/CloudConfigurationSetAsideDetails.plist")
(literal-prefix "${FRONT_USER_HOME}/Library/UserConfigurationProfiles/CloudConfigurationDetails.plist")
(literal-prefix "${FRONT_USER_HOME}/Library/UserConfigurationProfiles/CloudConfigurationSetAsideDetails.plist"))
									(require-all
										(subpath "/usr/local/libexec")
										(debug-mode))))
							(require-all
								(debug-mode)
								(require-any
									(subpath "/usr/local")
									(subpath "/AppleInternal")
									(subpath "/usr/appleinternal")))
							(require-all
								(debug-mode)
								(require-any
									(subpath "/AppleInternal")
									(subpath "/usr/local/lib")))
							(require-all
								(subpath-prefix "${FRONT_USER_HOME}/Library/NanoTimeKit/FaceSupport")
								(require-any
									(entitlement-is-bool-true "b'com.apple.private.security.storage.NanoTimeKit.FaceSupport'")
									(entitlement-is-bool-true "b'com.apple.private.security.storage.NanoTimeKit.Argon'")))
							(require-all
								(entitlement-is-present "b'com.apple.private.oop-jit.loader'")
								(subpath "/private/var/OOPJit")
								(extension "b'com.apple.sandbox.oopjit'")))))))))
(allow file-mount-update
	(require-all
		(literal)
		(require-not (extension "b'com.apple.sandbox.executable'"))))
(allow file-read*
	(vnode-type SYMLINK)
	(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/DiagnosticLogs")
	(subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter")
	(subpath-prefix "${FRONT_USER_HOME}/Library/Carrier Bundles")
	(literal-prefix "${HOME}/Library/PPTDevice")
	(literal-prefix "${HOME}")
	(literal-prefix "${HOME}/Library/Caches/powerlog.launchd")
	(literal-prefix "${HOME}/Library/Preferences")
	(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync")
	(literal "/private/var/run/syslog")
	(extension "b'com.apple.quicklook.readonly'")
	(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
	(extension "b'com.apple.app-sandbox.read'")
	(extension "b'com.apple.app-sandbox.read-write'")
	(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
	(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
	(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
	(extension "b'com.apple.sharing.airdrop.readonly'")
	(entitlement-is-bool-true "b'com.apple.private.amfi.can-execute-cdhash'")
	(vnode-type DIRECTORY)
	(require-all
		(vnode-type DIRECTORY)
		(require-any
			(process-attribute is-apple-signed-executable)
			(require-all
				(literal-prefix "${FRONT_USER_HOME}/Library/DeviceRegistry")
				(require-any
					(process-attribute is-apple-signed-executable)
					(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/DiagnosticLogs")
					(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/DiagnosticLogs/CompanionSync")
					(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync")
					(require-all
						(literal "/private/var/")
						(subpath-prefix "${FRONT_USER_HOME}"))))
			(require-all
				(literal "/private/var/")
				(subpath-prefix "${FRONT_USER_HOME}")
				(require-any
					(regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$")
					(require-all
						(regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+$" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+$" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+$" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+$")
						(literal "/private/var/")
						(subpath-prefix "${FRONT_USER_HOME}"))))))
	(require-all
		(literal-prefix "${FRONT_USER_HOME}/Library/DeviceRegistry")
		(require-any
			(process-attribute is-apple-signed-executable)
			(require-all
				(literal "/private/var/")
				(subpath-prefix "${FRONT_USER_HOME}"))))
	(require-all
		(literal "/private/var/")
		(subpath-prefix "${FRONT_USER_HOME}")
		(require-any
			(regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$")
			(require-all
				(regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+$" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+$" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+$" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+$")
				(require-any
					(process-attribute is-apple-signed-executable)
					(require-all
						(literal "/private/var/")
						(subpath-prefix "${FRONT_USER_HOME}"))))))
	(require-all
		(extension "b'com.apple.sandbox.system-container'")
		(entitlement-is-bool-true "b'com.apple.security.system-container'")
		(regex #"/private/var/containers/Data/System/[UNSUPPORTED]+/"))
	(require-all
		(extension "b'com.apple.sandbox.system-group'")
		(require-any
			(require-all
				(entitlement-is-present "b'com.apple.security.system-groups'")
				(regex #"/private/var/containers/Shared/SystemGroup/[UNSUPPORTED]+/"))
			(require-all
				(entitlement-is-present "b'com.apple.security.system-group-containers'")
				(regex #"/private/var/containers/Shared/SystemGroup/[UNSUPPORTED]+/"))))
	(require-all
		(process-attribute is-apple-signed-executable)
		(require-any
			(literal-prefix "${HOME}")
			(literal-prefix "${HOME}/Library/Preferences"))))
(allow file-read-data
	(subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter"))
(allow file-revoke)
(allow file-test-existence
	(require-any (subpath-prefix "${HOME}/Library/Biome/streams")
(subpath-prefix "${HOME}/Library/Logs/CallHistory")
(literal-prefix "${HOME}/Library/Logs/coreduetd.log")
(subpath-prefix "${HOME}/Library/Logs/com.apple.duetexpertd")
(literal-prefix "${HOME}/Library/SMS/com.apple.messages.abcache.duetexpertd.plist"))
	(subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/TransportLogs")
	(subpath-prefix "${HOME}/Library/CoreDuet")
	(subpath-prefix "${HOME}/Library/CallHistoryDB")
	(subpath-prefix "${FRONT_USER_HOME}/Library/DeviceRegistry/${ANY_UUID}/${ENTITLEMENT:com.apple.security.exception.nano-paired-storage.subpath.read-write}")
	(subpath-prefix "${HOME}/Library/DuetExpertCenter")
	(require-any (literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db")
(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db-shm")
(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db-wal")
(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db-journal"))
	(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
	(subpath-prefix "${PROCESS_TEMP_DIR}")
	(subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/DiagnosticLogs/CompanionSync/TransportLogs")
	(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
	(literal-prefix "${FRONT_USER_HOME}/Library/DeviceRegistry/${ANY_UUID}/NanoPreferencesSync/NanoDomains/${ENTITLEMENT:com.apple.security.exception.nano-preference.read-write}")
	(extension "b'com.apple.app-sandbox.read-write'")
	(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync")
	(require-all
		(literal "/private/var/")
		(require-any
			(subpath "/private/var/tmp")
			(require-all
				(regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/com[.]apple[.]private[.]alloy[.]apppredictionsync" #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/nms[.]com[.]apple[.]private[.]alloy[.]apppredictionsync" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/(nms[.])?com[.]apple[.]private[.]alloy[.]apppredictionsync" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/(nms[.])?com[.]apple[.]private[.]alloy[.]apppredictionsync" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/(nms[.])?com[.]apple[.]private[.]alloy[.]apppredictionsync")
				(subpath-prefix "${FRONT_USER_HOME}"))))
	(require-all
		(require-not (literal-prefix "${ANY_USER_HOME}/Library/Caches/GeoServices/tguid.bin"))
		(require-any
			(entitlement-is-bool-true "b'com.apple.private.amfi.can-execute-cdhash'")
			(require-all
				(literal "/private/var/")
				(subpath-prefix "${FRONT_USER_HOME}")
				(regex #"^/private/var/mobile/Library/Logs/CrashReporter/proactive_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/proactive_" #"^/private/var/mobile/Library/Logs/CrashReporter/[.]proactive_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/[.]proactive_" #"^/private/var/euser[0-9]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])proactive_" #"^/private/var/[-0-9A-F]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])proactive_" #"^/private/var/Users/[^/]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])proactive_"))
			(require-all
				(extension "b'com.apple.sandbox.application-group'")
				(require-any
					(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/.com.apple."))
					(require-all
						(literal "/private/var/")
						(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]")
						(require-not (subpath-prefix "${FRONT_USER_HOME}")))))
			(require-all
				(entitlement-is-bool-true "b'com.apple.Contacts.database-allow'")
				(extension "b'com.apple.tcc.kTCCServiceAddressBook'")
				(require-any
					(subpath-prefix "${HOME}/Library/AddressBook/Delegates")
					(require-all
						(vnode-type REGULAR-FILE)
						(literal-prefix "${HOME}/Library/AddressBook/"))))
			(require-all
				(entitlement-is-bool-true "b'com.apple.security.system-container'")
				(require-any
					(entitlement-is-bool-true "b'com.apple.private.amfi.can-execute-cdhash'")
					(require-all
						(extension "b'com.apple.sandbox.system-container'")
						(regex #"/private/var/containers/Data/System/[UNSUPPORTED]+/.com.apple.")
						(regex #"/private/var/containers/Data/System/[UNSUPPORTED]+/"))))
			(require-all
				(vnode-type BLOCK-DEVICE)
				(vnode-type CHARACTER-DEVICE))
			(require-all
				(extension "b'com.apple.sandbox.system-group'")
				(require-any
					(require-all
						(entitlement-is-present "b'com.apple.security.system-groups'")
						(regex #"/private/var/containers/Shared/SystemGroup/[UNSUPPORTED]+/.com.apple.")
						(regex #"/private/var/containers/Shared/SystemGroup/[UNSUPPORTED]+/"))
					(require-all
						(entitlement-is-present "b'com.apple.security.system-group-containers'")
						(regex #"/private/var/containers/Shared/SystemGroup/[UNSUPPORTED]+/.com.apple.")
						(regex #"/private/var/containers/Shared/SystemGroup/[UNSUPPORTED]+/")))))))
(allow file-write*
	(require-all
		(vnode-type DIRECTORY)
		(require-any
			(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/DiagnosticLogs")
			(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/DiagnosticLogs/CompanionSync")
			(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync")
			(require-all
				(literal-prefix "${FRONT_USER_HOME}/Library/DeviceRegistry")
				(process-attribute is-apple-signed-executable))
			(require-all
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+$" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+$" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+$" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+$")
				(subpath-prefix "${FRONT_USER_HOME}"))
			(require-all
				(literal "/private/var/")
				(subpath-prefix "${FRONT_USER_HOME}")
				(regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$")))))
(allow file-write-acl
	(literal "/dev/aes_0")
	(require-all
		(require-not (literal "/dev/urandom"))
		(require-not (literal "/dev/random"))
		(require-any
			(literal "/dev/null")
			(literal "/dev/dtracehelper")
			(literal "/dev/zero"))))
(allow file-write-finderinfo
	(require-all
		(literal "/private/var/")
		(subpath-prefix "${FRONT_USER_HOME}")
		(regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$")))
(allow file-write-setugid
	(entitlement-is-present "b'com.apple.private.oop-jit.loader'")
	(require-all
		(subpath "/private/var/OOPJit")
		(extension "b'com.apple.sandbox.oopjit'")))
(allow file-write-times
	(require-all
		(xattr "com.apple.metadata:com_apple_backup_excludeItem")
		(require-any
			(entitlement-is-bool-true "b'com.apple.private.amfi.can-execute-cdhash'")
			(require-all
				(entitlement-is-bool-true "b'com.apple.security.system-container'")
				(literal "/private/var/containers/Data/System/")
				(extension "b'com.apple.sandbox.system-container'")
				(regex #"^/private/var/containers/Data/System/[^/]+/" #"^/private/var/containers/Data/System/[^/]+$"))
			(require-all
				(literal "/private/var/containers/Shared/SystemGroup/")
				(require-any
					(require-all
						(extension "b'com.apple.sandbox.system-group'")
						(require-any
							(require-all
								(entitlement-is-present "b'com.apple.security.system-groups'")
								(regex #"^/private/var/containers/Shared/SystemGroup/[^/]+/" #"^/private/var/containers/Shared/SystemGroup/[^/]+$"))
							(require-all
								(entitlement-is-present "b'com.apple.security.system-group-containers'")
								(regex #"^/private/var/containers/Shared/SystemGroup/[^/]+/" #"^/private/var/containers/Shared/SystemGroup/[^/]+$"))))
					(require-all
						(subpath-prefix "${FRONT_USER_HOME}")
						(regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$")))))))
(allow file-write-unlink)
(allow file-write-xattr)
(allow fs-quota*)
(allow fs-quota-get)
(allow fs-quota-on)
(allow fs-quota-off)
(allow fs-quota-set*)
(allow fs-quota-set-limits)
(allow fs-quota-set-usage)
(allow fs-snapshot-create)
(allow hid-control)
(allow iokit-open*)
(allow ipc-posix-sem-unlink
	(ipc-posix-name "/sas_prediction_cache"))
(allow ipc-posix-sem-wait
	(ipc-posix-name "apple.cfprefs.")
	(ipc-posix-name)
	(require-all
		(ipc-posix-name "apple.shm.notification_center")
		(require-not (entitlement-is-bool-true "b'com.apple.security.on-demand-install-capable'"))))
(allow ipc-posix-shm-write*
	(ipc-posix-name))
(allow ipc-sysv-shm)
(allow lsopen)
(allow mach*)
(allow mach-bootstrap)
(allow mach-host-special-port-set)
(allow mach-issue-extension
	(require-all
		(require-not (xpc-service-name "com.apple.WebKit."))
		(require-any
			(global-name "com.apple.contactsd")
			(global-name "com.apple.spotlight.IndexAgent")
			(global-name "com.apple.identityservicesd.idquery.embedded.auth")
			(global-name "com.apple.spotlight.IndexDelegateAgent")
			(global-name "com.apple.accountsd.accountmanager")
			(global-name "com.apple.ABDatabaseDoctor")
			(global-name "com.apple.telephonyutilities.callservicesdaemon.callcapabilities")
			(global-name "com.apple.cmfsyncagent.embedded.auth")
			(xpc-service-name "com.apple.ImageIOXPCService")
			(global-name "com.apple.managedconfiguration.profiled.public")
			(global-name "com.apple.system.logger")
			(global-name "com.apple.mobilegestalt.xpc")
			(require-any (global-name "com.apple.cfprefsd.daemon")
(global-name "com.apple.cfprefsd.daemon.system"))
			(global-name "com.apple.cfprefsd.agent")
			(global-name "com.apple.containermanagerd")
			(global-name "com.apple.containermanagerd.system")
			(local-name "com.apple.cfprefsd.agent")
			(global-name "com.apple.diagnosticd")
			(require-any (global-name "com.apple.appsupport.cplogd")
(global-name "com.apple.lsd")
(global-name "com.apple.lsd.icons")
(global-name "com.apple.coreservices.lsuseractivitymanager.xpc"))
			(global-name "com.apple.logd")
			(global-name "com.apple.logd.events")
			(require-any (global-name "com.apple.gputools.service")
(global-name "com.apple.hangtracerd")
(global-name "com.apple.hangtracermonitor"))
			(global-name "com.apple.lsd.mapdb")
			(global-name "com.apple.lsd.open")
			(global-name "com.apple.CoreAuthentication.daemon")
			(global-name "com.apple.analyticsd")
			(global-name "com.apple.ctkd.token-client")
			(global-name "com.apple.distributed_notifications@1v3")
			(global-name "com.apple.aggregated")
			(global-name "com.apple.duetknowledged.activity")
			(global-name "com.apple.runningboard")
			(global-name "com.apple.system.libinfo.muser")
			(global-name "com.apple.lsd.openurl")
			(global-name "com.apple.tccd")
			(global-name "com.apple.lsd.advertisingidentifiers")
			(require-any (global-name "com.apple.coremedia.samplebufferaudiorenderer.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.audioprocessingtap.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.samplebufferrendersynchronizer.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.figcontentkeyboss.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.figcontentkeysession.xpc"))
			(global-name "com.apple.securityd")
			(require-any (global-name "com.apple.mdt")
(global-name "com.apple.wifid")
(global-name "com.apple.ModeEntityScorer")
(global-name "com.apple.atc.xpc.sessions")
(global-name "com.apple.duet.expertcenter")
(global-name "com.apple.suggestd.events")
(global-name "com.apple.suggestd.PersonalizationPortrait.StringDonation")
(global-name "com.apple.usernotifications.usernotificationsettingsservice")
(global-name "com.apple.posterboardservices.services")
(global-name "com.apple.proactive.SuggestionRequest.")
(global-name "com.apple.proactive.HomeScreenSuggestion.xpc")
(global-name "com.apple.proactive.ModeAnchorModelSuggestion.xpc")
(global-name "com.apple.proactive.UserEducationSuggestion.client-listener.xpc"))
			(require-any (global-name "com.apple.coremedia.audioprocessingtap.xpc")
(global-name "com.apple.coremedia.samplebufferrendersynchronizer.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.samplebufferaudiorenderer.xpc"))
			(global-name "com.apple.online-auth-agent.xpc")
			(global-name "com.apple.passd.library")
			(global-name "com.apple.mediaserverd")
			(global-name "com.apple.coreservices.lsbestappsuggestionmanager.xpc")
			(require-any (global-name "com.apple.timesync.manager")
(global-name "com.apple.timesync.expositor"))
			(global-name "com.apple.coremedia.mediaplaybackd.assetimagegenerator.xpc")
			(global-name "com.apple.coremedia.mediaplaybackd.cpeprotector.xpc")
			(require-any (global-name "com.apple.coremedia.figcpecryptor")
(global-name "com.apple.coremedia.mediaplaybackd.figcpecryptor.xpc"))
			(global-name "com.apple.powerlog.plxpclogger.xpc")
			(require-any (global-name "com.apple.coremedia.samplegenerator.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.samplegenerator.xpc"))
			(global-name "com.apple.networking.captivenetworksupport")
			(global-name "com.apple.coremedia.sandboxserver.xpc")
			(global-name "com.apple.usernotifications.remotenotificationservice")
			(global-name "com.apple.locationd.synchronous")
			(global-name "com.apple.coremedia.figcontentkeyboss.xpc")
			(global-name "com.apple.commcenter.xpc")
			(global-name "com.apple.misagent")
			(global-name "com.apple.pluginkit.pkd")
			(require-any (global-name "com.apple.proactive.AppPrediction.predictions")
(global-name "com.apple.proactive.ActionPrediction.predictions"))
			(global-name "com.apple.SystemConfiguration.configd")
			(global-name "com.apple.calaccessd")
			(global-name "com.apple.email.maild")
			(global-name "com.apple.routined.registration")
			(xpc-service-name "com.apple.extensionkitservice")
			(global-name "com.apple.geoanalyticsd")
			(global-name "com.apple.mediaremoted.xpc")
			(global-name "com.apple.coremedia.mediaplaybackd.player.xpc")
			(global-name "com.apple.FileCoordination")
			(global-name "com.apple.wifi.manager")
			(global-name "com.apple.CARenderServer")
			(global-name "com.apple.audio.AudioSession")
			(require-any (global-name "com.apple.coremedia.videotarget.xpc")
(global-name "com.apple.coremedia.assetcacheinspector")
(global-name "com.apple.coremedia.mediaplaybackd.videotarget.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.assetcacheinspector.xpc"))
			(global-name "com.apple.callkit.callcontrollerhost")
			(global-name "com.apple.coreduetd")
			(global-name "com.apple.itunescloudd.xpc")
			(global-name "com.apple.coremedia.routingcontext.xpc")
			(global-name "com.apple.coremedia.figcontentkeysession.xpc")
			(global-name "com.apple.nano.nanoregistry.paireddeviceregistry")
			(global-name "com.apple.NPKCompanionAgent.library")
			(global-name "com.apple.coremedia.mediaplaybackd.sandboxserver.xpc")
			(global-name "com.apple.coremedia.mediaparserd.formatreader.xpc")
			(global-name "com.apple.familycircle.agent")
			(require-any (global-name "com.apple.coremedia.capturesource")
(global-name "com.apple.coremedia.capturesession"))
			(global-name "com.apple.linkd.transcript")
			(global-name "com.apple.coremedia.mediaplaybackd.bytestream.xpc")
			(global-name "com.apple.parsecd")
			(global-name "com.apple.siri.VoiceShortcuts.xpc")
			(global-name "com.apple.springboard.backgroundappservices")
			(global-name "com.apple.notificationcenter.widgetcontrollerconnection")
			(global-name "com.apple.coremedia.formatreader.xpc")
			(require-any (global-name "com.apple.coremedia.routediscoverer.xpc")
(global-name "com.apple.coremedia.volumecontroller.xpc"))
			(global-name "com.apple.marco")
			(global-name "com.apple.coremedia.endpoint.xpc")
			(global-name "com.apple.locationd.spi")
			(global-name "com.apple.trustd")
			(global-name "com.apple.powerd.lowpowermode")
			(global-name "com.apple.coremedia.customurlloader.xpc")
			(global-name "com.apple.locationd.registration")
			(require-any (global-name "com.apple.coremedia.remaker")
(global-name "com.apple.coremedia.mediaplaybackd.remaker.xpc"))
			(global-name "com.apple.ClipServices.clipserviced")
			(global-name "com.apple.springboard.services")
			(global-name "com.apple.coremedia.sts")
			(global-name "com.apple.coremedia.player.xpc")
			(global-name "com.apple.airplay.apsynccontroller.xpc")
			(global-name "com.apple.coremedia.mediaplaybackd.videocompositor.xpc")
			(global-name "com.apple.donotdisturb.service.non-launching")
			(global-name "com.apple.remindd")
			(global-name "com.apple.itunesstored.xpc")
			(global-name "com.apple.usernotifications.usernotificationservice")
			(require-any (global-name "com.apple.coremedia.remotequeue")
(global-name "com.apple.coremedia.audiodeviceclock.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.audiodeviceclock.xpc"))
			(global-name "com.apple.coremedia.videocompositor")
			(global-name "com.apple.awdd")
			(global-name "com.apple.CallHistorySyncHelper")
			(global-name "com.apple.suggestd.contacts")
			(global-name "com.apple.donotdisturb.service")
			(global-name "com.apple.audioanalyticsd")
			(global-name "com.apple.carkit.dnd.service")
			(global-name "com.apple.coremedia.endpointremotecontrolsession.xpc")
			(global-name "com.apple.coremedia.externalstoragedevicemanager.xpc")
			(require-any (global-name "com.apple.geod")
(global-name "com.apple.nanomaps.xpc.GeoServices"))
			(global-name "com.apple.proactive.PersonalizationPortrait.Event")
			(require-any (global-name "com.apple.coremedia.cpeprotector.xpc")
(global-name "com.apple.coremedia.routingsessionmanager.xpc"))
			(global-name "com.apple.usernotifications.listener")
			(global-name "com.apple.pasteboard.pasted")
			(global-name "com.apple.coremedia.bytestream.xpc")
			(global-name "com.apple.coremedia.systemcontroller.xpc")
			(global-name "com.apple.chronoservices")
			(global-name "com.apple.coremedia.admin")
			(global-name "com.apple.coremedia.asset.xpc")
			(global-name "com.apple.linkd.registry")
			(global-name "com.apple.MobileTimer.alarmserver")
			(global-name "com.apple.iokit.powerdxpc")
			(global-name "com.apple.iohideventsystem")
			(global-name "com.apple.pairedsyncd.syncstate")
			(global-name "com.apple.PowerManagement.control")
			(global-name "com.apple.pegasus")
			(global-name "com.apple.bulletinboard.observerconnection")
			(global-name "com.apple.coremedia.mediaplaybackd.customurlloader.xpc")
			(global-name "com.apple.coremedia.visualcontext.xpc")
			(global-name "com.apple.identityservicesd.embedded.auth")
			(global-name "com.apple.privacyaccountingd")
			(global-name "com.apple.coremedia.mediaplaybackd.visualcontext.xpc")
			(global-name "com.apple.coreduetd.knowledge")
			(global-name "com.apple.coremedia.mediaplaybackd.formatreader.xpc")
			(global-name "com.apple.coreduetd.knowledgebase")
			(global-name "com.apple.navd")
			(global-name "com.apple.corerecents.recentsd")
			(global-name "com.apple.commcenter.coretelephony.xpc")
			(global-name "com.apple.imagent.embedded.auth")
			(global-name "com.apple.proactive.PersonalizationPortrait.NamedEntity.readOnly")
			(global-name "com.apple.coremedia.mediaplaybackd.asset.xpc")
			(global-name "com.apple.coremedia.sandboxserver")
			(global-name "com.apple.duetactivityscheduler")
			(global-name "com.apple.timesync.ptp.manager")
			(global-name "com.apple.coremedia.assetimagegenerator.xpc")
			(extension "b'com.apple.pluginkit.plugin-service'")
			(global-name "com.apple.ckdiscretionaryd.debug")
			(require-any (global-name "com.apple.cloudd.debug")
(global-name "com.apple.cloudkit.partlycloudd.debug"))
			(global-name "com.apple.cloudkit.partlycloudd")
			(global-name "com.apple.ckdiscretionaryd")
			(global-name "com.apple.cloudd")
			(require-all
				(global-name-regex #".+")
				(extension "b'com.apple.security.exception.mach-lookup.global-name'"))
			(require-all
				(local-name-regex #".+")
				(extension "b'com.apple.security.exception.mach-lookup.local-name'"))
			(require-all
				(global-name "com.apple.coreduetd.people")
				(entitlement-is-bool-true "b'com.apple.coreduetd.people'"))
			(require-all
				(xpc-service-name "com.apple.WebKit.")
				(xpc-service-name "com.apple.CoreGraphics.CGPDFService")
				(require-any
					(xpc-service-name-regex #".+")
					(require-all
						(process-attribute is-apple-signed-executable)
						(require-any
							(global-name "com.apple.SharedWebCredentials")
							(global-name "com.apple.datamigrator")
							(global-name "com.apple.Honeybee.event-notify")
							(global-name "com.apple.mobile.usermanagerd.xpc")))))
			(require-all
				(global-name "com.apple.system.notification_center")
				(entitlement-is-bool-true "b'com.apple.security.on-demand-install-capable'"))
			(require-all
				(global-name "com.apple.osanalytics.osanalyticshelper")
				(process-attribute is-apple-signed-executable)))))
(allow mach-task-name)
(allow mach-task-read)
(allow mach-task-special-port*)
(allow mach-task-special-port-get)
(allow network-bind)
(allow network-outbound)
(allow nvram*)
(allow nvram-delete)
(allow opendirectory-user-modify)
(allow process-exec-interpreter)
(allow process-fork)
(allow process-info*)
(allow process-info-codesignature)
(allow process-info-dirtycontrol)
(allow process-info-ledger)
(allow process-info-listpids)
(allow process-info-rusage)
(allow process-info-pidinfo)
(allow process-info-pidfdinfo)
(allow pseudo-tty)
(allow socket-ioctl)
(allow socket-option*)
(allow socket-option-set)
(allow syscall*)
(allow syscall-unix)
(allow system-automount)
(allow system-mac*)
(allow system-mac-label)
(allow system-mac-syscall)
(allow system-nfssvc)
(allow system-swap
	(preference-domain "com.apple.lockscreen.shared")
	(preference-domain "com.apple.locationd")
	(preference-domain "com.apple.sleepd")
	(preference-domain "com.apple.MobileSMS")
	(preference-domain "com.apple.UIKit")
	(preference-domain "com.apple.AppSupport")
	(preference-domain "com.apple.logging")
	(preference-domain "com.apple.DuetExpertCenter.")
	(preference-domain "com.apple.messages")
	(preference-domain "com.apple.coremedia")
	(preference-domain "com.apple.CloudKit")
	(preference-domain "com.apple.coreaudio")
	(preference-domain "com.apple.mobilenotes")
	(preference-domain "com.apple.GEO")
	(preference-domain "com.apple.mobileipod")
	(preference-domain "com.apple.SiriViewService")
	(preference-domain "kCFPreferencesAnyApplication")
	(preference-domain "com.apple.mediaremote")
	(preference-domain "com.apple.message")
	(preference-domain "com.apple.demo-settings")
	(preference-domain "com.apple.avfoundation")
	(preference-domain "com.apple.spotlightui")
	(preference-domain "com.apple.parsecd")
	(preference-domain "com.apple.duetexpertd")
	(preference-domain "com.apple.carrier")
	(preference-domain "com.apple.suggestions")
	(preference-domain "com.apple.NanoRegistry")
	(preference-domain "com.apple.imessage.bag")
	(preference-domain "com.apple.AppPredictionWidget.defaults")
	(preference-domain "com.apple.CrashReporter")
	(preference-domain "com.apple.Intents.UpcomingMediaManager")
	(preference-domain "com.apple.mobilecal")
	(preference-domain "com.apple.ids")
	(preference-domain "com.apple.facetime.bag")
	(preference-domain "com.apple.conference")
	(preference-domain "com.apple.pairedsync")
	(preference-domain "com.apple.TelephonyUtilities")
	(preference-domain "com.apple.companionsync")
	(preference-domain "com.apple.CoreDuet")
	(preference-domain "com.apple.DataMigration")
	(preference-domain "com.apple.icloud.findmydeviced.postwipe")
	(preference-domain "com.apple.AOSNotification.public.notbackedup")
	(preference-domain "com.apple.PeoplePicker")
	(preference-domain "com.apple.icloud.findmydeviced.public.notbackedup")
	(preference-domain "com.apple.marco")
	(preference-domain "com.apple.corevideo")
	(extension "b'com.apple.security.exception.shared-preference.read-write'")
	(extension "b'com.apple.security.exception.shared-preference.read-only'")
	(preference-domain "com.apple.iokit.IOMobileGraphicsFamily")
	(preference-domain "com.apple.Accessibility")
	(preference-domain "com.apple.hangtracer")
	(preference-domain "com.apple.da")
	(require-all
		(process-attribute is-apple-signed-executable)
		(require-any
			(preference-domain "com.apple.security")
			(require-all
				(preference-domain "com.apple.itunesstored")
				(entitlement-is-bool-true "b'com.apple.itunesstored.private'")))))
(allow user-preference*
	(preference-domain "kCFPreferencesAnyApplication")
	(extension "b'com.apple.security.exception.managed-preference.read-only'"))
(allow user-preference-read
	(preference-domain "com.apple.DuetExpertCenter.")
	(preference-domain "com.apple.mediaremote")
	(preference-domain "com.apple.spotlightui")
	(preference-domain "com.apple.duetexpertd")
	(preference-domain "com.apple.imessage.bag")
	(preference-domain "com.apple.facetime.bag"))
(allow user-preference-write)

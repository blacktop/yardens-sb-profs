(version 1)
(deny default)
(allow darwin-notification-post)
(allow dynamic-code-generation)
(allow file-clone)
(allow file-link)
(allow file-lock)
(allow file-read*
	(subpath "/private/var/preferences/Logging")
	(require-any (literal "/private/var/db/DarwinDirectory/local/recordStore.data")
(literal-prefix "${FRONT_USER_HOME}/Library/DeviceRegistry/${ANY_UUID}/")
(subpath-prefix "${ENTITLEMENT:com.apple.security.exception.nano-paired-storage.subpath.read-only}")
(literal-prefix "NanoPreferencesSync/NanoDomains/${ENTITLEMENT:com.apple.security.exception.nano-preference.read-only}"))
	(subpath-prefix "${FRONT_USER_HOME}/Library/DeviceRegistry/${ANY_UUID}/${ENTITLEMENT:com.apple.security.exception.nano-paired-storage.subpath.read-write}")
	(literal "/private/var/Managed Preferences/mobile/.GlobalPreferences.plist")
	(extension "b'com.apple.sharing.airdrop.readonly'")
	(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
	(subpath-prefix "${FRONT_USER_HOME}/XcodeBuiltProducts")
	(literal-prefix "${FRONT_USER_HOME}/Library/DeviceRegistry/${ANY_UUID}/NanoPreferencesSync/NanoDomains/${ENTITLEMENT:com.apple.security.exception.nano-preference.read-write}")
	(literal-prefix "${FRONT_USER_HOME}/Library/Preferences/.GlobalPreferences.plist")
	(extension "b'com.apple.quicklook.readonly'")
	(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
	(extension "b'com.apple.app-sandbox.read'")
	(extension "b'com.apple.app-sandbox.read-write'")
	(extension "b'com.apple.sandbox.executable'")
	(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
	(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
	(require-all
		(require-all (require-not (literal "/System/Library/Caches/apticket.der"))
(require-not (subpath "/System/Library/Caches/com.apple.factorydata"))
(require-not (subpath "/System/Library/Caches/com.apple.kernelcaches")))
		(require-not (literal "/usr/standalone/firmware/apticket.der"))
		(require-any
			(subpath "/System/Library")
			(subpath "/private/var/db/timezone")
			(subpath "/Library/RegionFeatures")
			(subpath "/usr/share")
			(entitlement-is-bool-true "b'com.apple.private.amfi.can-execute-cdhash'")
			(literal "/dev/null")
			(literal "/dev/aes_0")
			(subpath "/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.icloud.findmydevice.managed/Library")
			(literal "/dev/urandom")
			(require-any (subpath "/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.configurationprofiles/Library/ConfigurationProfiles/PublicInfo")
(subpath-prefix "${FRONT_USER_HOME}/Library/ConfigurationProfiles/PublicInfo")
(subpath-prefix "${FRONT_USER_HOME}/Library/UserConfigurationProfiles/PublicInfo"))
			(subpath "/private/var/db/datadetectors/sys")
			(literal "/dev/dtracehelper")
			(literal "/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.mobilegestaltcache/Library/Caches/com.apple.MobileGestalt.plist")
			(literal "/dev/zero")
			(literal "/dev/random")
			(entitlement-is-bool-true "b'com.apple.private.amfi.can-execute-cdhash'")
			(subpath "/usr/lib")
			(subpath-prefix "${HOME}/Library/Logs/CrashReporter/DiagnosticLogs/CloudServices")
			(require-all
				(entitlement-is-bool-true "b'com.apple.coreduetd.people'")
				(require-any
					(require-any (literal-prefix "${HOME}/Library/CoreDuet/People")
(literal-prefix "${HOME}/Library/CoreDuet/People/interactionC.db")
(literal-prefix "${HOME}/Library/CoreDuet/People/interactionC.db-wal")
(literal-prefix "${HOME}/Library/CoreDuet/People/interactionC.db-journal"))
					(literal-prefix "${HOME}/Library/CoreDuet/People/interactionC.db-shm")))
			(require-all
				(uid 0)
				(literal "/private/etc/master.passwd"))
			(require-all
				(entitlement-is-bool-true "b'com.apple.security.system-container'")
				(extension "b'com.apple.sandbox.system-container'")
				(regex #"/private/var/containers/Data/System/[UNSUPPORTED]+/.com.apple.")
				(require-any
					(regex #"/private/var/containers/Data/System/[UNSUPPORTED]+/")
					(require-all
						(literal "/private/var/containers/Data/System/")
						(regex #"^/private/var/containers/Data/System/[^/]+/" #"^/private/var/containers/Data/System/[^/]+$"))))
			(require-all
				(regex #"/private/var/containers/Shared/SystemGroup/[UNSUPPORTED]+/.com.apple.")
				(extension "b'com.apple.sandbox.system-group'")
				(entitlement-is-present "b'com.apple.security.system-groups'")
				(entitlement-is-present "b'com.apple.security.system-group-containers'"))
			(require-all
				(entitlement-is-bool-true "b'com.apple.private.logging.diagnostic'")
				(extension "b'com.apple.logd.read-only'")
				(require-any
					(require-any (subpath "/private/var/db/diagnostics")
(subpath "/private/var/db/uuidtext"))
					(require-any (subpath "/private/var/userdata/diagnostics")
(subpath "/private/var/db/timesync"))))
			(require-all
				(extension "b'com.apple.sandbox.system-group'")
				(require-any
					(require-all
						(entitlement-is-present "b'com.apple.security.system-groups'")
						(require-any
							(regex #"/private/var/containers/Shared/SystemGroup/[UNSUPPORTED]+/")
							(require-all
								(literal "/private/var/containers/Shared/SystemGroup/")
								(regex #"^/private/var/containers/Shared/SystemGroup/[^/]+/" #"^/private/var/containers/Shared/SystemGroup/[^/]+$"))))
					(require-all
						(entitlement-is-present "b'com.apple.security.system-group-containers'")
						(require-any
							(regex #"/private/var/containers/Shared/SystemGroup/[UNSUPPORTED]+/")
							(require-all
								(literal "/private/var/containers/Shared/SystemGroup/")
								(regex #"^/private/var/containers/Shared/SystemGroup/[^/]+/" #"^/private/var/containers/Shared/SystemGroup/[^/]+$"))))))
			(require-all
				(vnode-type BLOCK-DEVICE)
				(vnode-type CHARACTER-DEVICE)
				(require-any
					(subpath "/private/preboot/Cryptexes")
					(literal-prefix "${FRONT_USER_HOME}/Library/Application Support/com.apple.palette.green.bin")
					(literal "/")
					(literal "/private/etc/fstab")
					(literal "/private/preboot")
					(subpath "/System/Developer")
					(subpath "/private/var/MobileAsset/PreinstalledAssetsV2/InstallWithOs")
					(literal "/private")
					(subpath "/Developer")
					(literal "/private/preboot/cryptex1/current/RestoreVersion.plist")
					(subpath "/System/Library/PrivateFrameworks")
					(literal "/private/etc/passwd")
					(literal-prefix "${FRONT_USER_HOME}/Library/Application Support/com.apple.palette.green.plist")
					(literal "/private/etc/services")
					(require-any (literal "/private/etc/group")
(literal "/private/etc/protocols"))
					(subpath "/System/Library/Frameworks")
					(literal "/System")
					(subpath "/System/Cryptexes")
					(literal "/private/preboot/cryptex1/current/SystemVersion.plist")
					(literal "/private/etc/hosts")
					(require-all
						(process-attribute is-apple-signed-executable)
						(require-any
							(literal "/private/var/preferences/SystemConfiguration/preferences.plist")
							(literal "/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.configurationprofiles/Library/ConfigurationProfiles/CloudConfigurationSetAsideDetails.plist")
							(subpath "/usr/libexec")
							(require-any (literal "/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.configurationprofiles/Library/ConfigurationProfiles/CloudConfigurationDetails.plist")
(literal-prefix "${FRONT_USER_HOME}/Library/ConfigurationProfiles/CloudConfigurationDetails.plist")
(literal-prefix "${FRONT_USER_HOME}/Library/ConfigurationProfiles/CloudConfigurationSetAsideDetails.plist")
(literal-prefix "${FRONT_USER_HOME}/Library/UserConfigurationProfiles/CloudConfigurationDetails.plist")
(literal-prefix "${FRONT_USER_HOME}/Library/UserConfigurationProfiles/CloudConfigurationSetAsideDetails.plist"))
							(require-all
								(subpath "/usr/local/libexec")
								(debug-mode))))
					(require-all
						(debug-mode)
						(require-any
							(subpath "/usr/local")
							(subpath "/AppleInternal")
							(subpath "/usr/appleinternal")))
					(require-all
						(debug-mode)
						(require-any
							(subpath "/AppleInternal")
							(subpath "/usr/local/lib")))
					(require-all
						(subpath-prefix "${FRONT_USER_HOME}/Library/NanoTimeKit/FaceSupport")
						(require-any
							(entitlement-is-bool-true "b'com.apple.private.security.storage.NanoTimeKit.Argon'")
							(entitlement-is-bool-true "b'com.apple.private.security.storage.NanoTimeKit.FaceSupport'")))
					(require-all
						(entitlement-is-present "b'com.apple.private.oop-jit.loader'")
						(subpath "/private/var/OOPJit")
						(extension "b'com.apple.sandbox.oopjit'")))))))
(allow file-read-data
	(require-all
		(literal)
		(require-not (extension "b'com.apple.sandbox.executable'"))))
(allow file-read-metadata
	(vnode-type SYMLINK)
	(literal-prefix "${HOME}/Library/Logs/CrashReporter/DiagnosticLogs")
	(literal-prefix "${HOME}")
	(literal-prefix "${HOME}/Library/Caches/powerlog.launchd")
	(literal-prefix "${HOME}/Library/Preferences")
	(literal "/private/var/run/syslog")
	(extension "b'com.apple.quicklook.readonly'")
	(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
	(extension "b'com.apple.app-sandbox.read'")
	(extension "b'com.apple.app-sandbox.read-write'")
	(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
	(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
	(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
	(extension "b'com.apple.sharing.airdrop.readonly'")
	(entitlement-is-bool-true "b'com.apple.private.amfi.can-execute-cdhash'")
	(require-all
		(extension "b'com.apple.sandbox.system-container'")
		(entitlement-is-bool-true "b'com.apple.security.system-container'")
		(regex #"/private/var/containers/Data/System/[UNSUPPORTED]+/"))
	(require-all
		(extension "b'com.apple.sandbox.system-group'")
		(require-any
			(require-all
				(entitlement-is-present "b'com.apple.security.system-groups'")
				(regex #"/private/var/containers/Shared/SystemGroup/[UNSUPPORTED]+/"))
			(require-all
				(entitlement-is-present "b'com.apple.security.system-group-containers'")
				(regex #"/private/var/containers/Shared/SystemGroup/[UNSUPPORTED]+/"))))
	(require-all
		(vnode-type DIRECTORY)
		(process-attribute is-apple-signed-executable))
	(require-all
		(process-attribute is-apple-signed-executable)
		(require-any
			(literal-prefix "${HOME}")
			(literal-prefix "${HOME}/Library/Preferences"))))
(allow file-test-existence)
(allow file-write*
	(subpath-prefix "${HOME}/Library/Logs/CrashReporter/DiagnosticLogs/CloudServices"))
(allow file-write-create
	(require-all
		(vnode-type DIRECTORY)
		(literal-prefix "${HOME}/Library/Logs/CrashReporter/DiagnosticLogs")))
(allow file-write-data
	(literal "/dev/aes_0")
	(require-all
		(require-not (literal "/dev/urandom"))
		(require-not (literal "/dev/random"))
		(require-any
			(literal "/dev/dtracehelper")
			(literal "/dev/zero")
			(literal "/dev/null"))))
(allow file-write-unlink
	(entitlement-is-present "b'com.apple.private.oop-jit.loader'")
	(require-all
		(subpath "/private/var/OOPJit")
		(extension "b'com.apple.sandbox.oopjit'")))
(allow file-write-xattr
	(require-all
		(xattr "com.apple.metadata:com_apple_backup_excludeItem")
		(require-any
			(entitlement-is-bool-true "b'com.apple.private.amfi.can-execute-cdhash'")
			(require-all
				(extension "b'com.apple.sandbox.system-container'")
				(entitlement-is-bool-true "b'com.apple.security.system-container'")
				(literal "/private/var/containers/Data/System/")
				(regex #"^/private/var/containers/Data/System/[^/]+/" #"^/private/var/containers/Data/System/[^/]+$"))
			(require-all
				(extension "b'com.apple.sandbox.system-group'")
				(require-any
					(require-all
						(entitlement-is-present "b'com.apple.security.system-groups'")
						(literal "/private/var/containers/Shared/SystemGroup/")
						(regex #"^/private/var/containers/Shared/SystemGroup/[^/]+/" #"^/private/var/containers/Shared/SystemGroup/[^/]+$"))
					(require-all
						(entitlement-is-present "b'com.apple.security.system-group-containers'")
						(literal "/private/var/containers/Shared/SystemGroup/")
						(regex #"^/private/var/containers/Shared/SystemGroup/[^/]+/" #"^/private/var/containers/Shared/SystemGroup/[^/]+$")))))))
(allow fs-quota*)
(allow fs-quota-get)
(allow fs-quota-on)
(allow fs-quota-off)
(allow fs-quota-set*)
(allow fs-quota-set-limits)
(allow fs-quota-set-usage)
(allow fs-quota-stat)
(allow fs-quota-sync)
(allow fs-snapshot-mount)
(allow iokit-get-properties)
(allow iokit-open-service)
(allow lsopen)
(allow mach-bootstrap)
(allow mach-cross-domain-lookup)
(allow mach-derive-port)
(allow mach-kernel-endpoint)
(allow mach-lookup
	(global-name "com.apple.pluginkit.pkd")
	(global-name "com.apple.SBUserNotification")
	(xpc-service-name "com.apple.extensionkitservice")
	(extension "b'com.apple.pluginkit.plugin-service'")
	(global-name "com.apple.securityd")
	(global-name "com.apple.trustd")
	(global-name "com.apple.managedconfiguration.profiled.public")
	(global-name "com.apple.system.logger")
	(global-name "com.apple.mobilegestalt.xpc")
	(require-any (global-name "com.apple.cfprefsd.daemon")
(global-name "com.apple.cfprefsd.daemon.system"))
	(global-name "com.apple.cfprefsd.agent")
	(global-name "com.apple.containermanagerd")
	(global-name "com.apple.containermanagerd.system")
	(local-name "com.apple.cfprefsd.agent")
	(global-name "com.apple.diagnosticd")
	(require-any (global-name "com.apple.appsupport.cplogd")
(global-name "com.apple.lsd")
(global-name "com.apple.lsd.icons")
(global-name "com.apple.coreservices.lsuseractivitymanager.xpc"))
	(global-name "com.apple.logd")
	(global-name "com.apple.logd.events")
	(require-any (global-name "com.apple.gputools.service")
(global-name "com.apple.hangtracerd")
(global-name "com.apple.hangtracermonitor"))
	(global-name "com.apple.lsd.mapdb")
	(global-name "com.apple.lsd.open")
	(global-name "com.apple.CoreAuthentication.daemon")
	(global-name "com.apple.analyticsd")
	(global-name "com.apple.ctkd.token-client")
	(global-name "com.apple.distributed_notifications@1v3")
	(global-name "com.apple.aggregated")
	(global-name "com.apple.duetknowledged.activity")
	(global-name "com.apple.runningboard")
	(global-name "com.apple.system.libinfo.muser")
	(global-name "com.apple.lsd.openurl")
	(global-name "com.apple.tccd")
	(global-name "com.apple.lsd.advertisingidentifiers")
	(require-all
		(global-name-regex #".+")
		(extension "b'com.apple.security.exception.mach-lookup.global-name'"))
	(require-all
		(local-name-regex #".+")
		(extension "b'com.apple.security.exception.mach-lookup.local-name'"))
	(require-all
		(global-name "com.apple.coreduetd.people")
		(entitlement-is-bool-true "b'com.apple.coreduetd.people'"))
	(require-all
		(global-name "com.apple.system.notification_center")
		(entitlement-is-bool-true "b'com.apple.security.on-demand-install-capable'"))
	(require-all
		(xpc-service-name "com.apple.WebKit.")
		(xpc-service-name "com.apple.CoreGraphics.CGPDFService")
		(require-any
			(xpc-service-name-regex #".+")
			(require-all
				(process-attribute is-apple-signed-executable)
				(require-any
					(global-name "com.apple.SharedWebCredentials")
					(global-name "com.apple.datamigrator")
					(global-name "com.apple.Honeybee.event-notify")
					(global-name "com.apple.mobile.usermanagerd.xpc")))))
	(require-all
		(global-name "com.apple.osanalytics.osanalyticshelper")
		(process-attribute is-apple-signed-executable)))
(allow mach-task-special-port*)
(allow mach-task-special-port-get)
(allow mach-task-special-port-set)
(allow necp-client-open)
(allow nvram*)
(allow nvram-delete)
(allow nvram-get)
(allow nvram-set)
(allow process-codesigning)
(allow process-info*)
(allow process-info-codesignature)
(allow process-info-dirtycontrol)
(allow process-info-ledger)
(allow process-info-listpids)
(allow process-info-rusage)
(allow process-info-pidinfo)
(allow process-info-pidfdinfo)
(allow process-info-pidfileportinfo)
(allow process-info-setcontrol)
(allow socket-ioctl)
(allow socket-option-get)
(allow socket-option-set)
(allow syscall-unix)
(allow syscall-mach)
(allow syscall-mig)
(allow system-fcntl)
(allow system-mac-syscall)
(allow system-memorystatus-control)
(allow system-necp-client-action)
(allow system-privilege)
(allow default-message-filter)

(version 1)
(deny default)
(allow device-camera)
(allow darwin-notification-post)
(allow file*)
(allow file-chroot
	(literal "/dev/aes_0")
	(literal "/dev/dtracehelper")
	(require-all
		(literal)
		(require-any
			(signing-identifier "com.apple.wapic")
			(signing-identifier "com.apple.mDNSResponderHelper")))
	(require-all
		(literal "/dev/ttys")
		(signing-identifier "com.apple.privacyaccountingctl")
		(regex #"^/dev/ttys[0-9]" #"^/dev/ttys[0-9]+"))
	(require-all
		(signing-identifier "com.apple.gpsd")
		(literal "/dev/cu.gps"))
	(require-all
		(ioctl-command-regex [UNSUPPORTED](_IO "d" 25))
		(signing-identifier "com.apple.storagekitd"))
	(require-all
		(ioctl-command-regex [UNSUPPORTED](_IO "d" 24))
		(signing-identifier "com.apple.storagekitd"))
	(require-all
		(ioctl-command-regex [UNSUPPORTED](_IO "d" 65))
		(signing-identifier "com.apple.storagekitd"))
	(require-all
		(ioctl-command-regex [UNSUPPORTED](_IO "d" 22))
		(signing-identifier "com.apple.storagekitd"))
	(require-all
		(ioctl-command-regex [UNSUPPORTED](_IO "d" 31))
		(signing-identifier "com.apple.storagekitd")))
(allow file-clone
	(entitlement-is-bool-true "b'com.apple.security.ts.play-media'")
	(signing-identifier "com.apple.anomalydetectiond")
	(subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd")
	(extension-class "com.apple.mediaserverd.read-write")
	(extension-class "com.apple.mediaserverd.read")
	(extension-class "com.apple.app-sandbox.read-write")
	(extension-class "com.apple.app-sandbox.read")
	(require-any (subpath-prefix "${HOME}/Media/PhotoData/CPLAssets")
(subpath-prefix "${HOME}/Media/PhotoData/Sync")
(subpath-prefix "${HOME}/Media/PhotoData/Mutations"))
	(extension-class "com.apple.mediaserverd.read-write")
	(require-any (subpath-prefix "${HOME}/Media/PhotoData/OutboundSharingTmp")
(subpath-prefix "${HOME}/Media/PhotoData/Metadata/DCIM")
(subpath-prefix "${HOME}/Media/PhotoData/Metadata/PhotoData/CPLAssets")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
	(signing-identifier "com.apple.mediaplaybackd")
	(extension-class "com.apple.aned.read-only")
	(subpath-prefix "${HOME}/Media/DCIM")
	(extension-class "com.apple.app-sandbox.read")
	(subpath-prefix "${HOME}/Media/Deferred")
	(extension-class "com.apple.mediaserverd.read")
	(subpath-prefix "${HOME}/Media/PhotoData/PhotoCloudSharingData")
	(subpath-prefix "${HOME}/Media/Podcasts")
	(subpath-prefix "${HOME}/Media/PhotoStreamsData")
	(subpath-prefix "${HOME}")
	(require-all
		(extension-class "com.apple.app-sandbox.read-write")
		(require-any
			(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
			(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
			(require-all
				(extension-class "com.apple.aned.read-only")
				(require-any
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")))
			(require-all
				(extension-class "com.apple.app-sandbox.read-write")
				(require-any
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(require-any
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(extension "b'com.apple.quicklook.readonly'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
					(extension "b'com.apple.app-sandbox.read'")
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.sharing.airdrop.readonly'")))
			(require-all
				(extension-class "com.apple.aned.read-only")
				(require-any
					(extension "b'com.apple.quicklook.readonly'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
					(extension "b'com.apple.app-sandbox.read'")
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.sharing.airdrop.readonly'")))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(extension "b'com.apple.quicklook.readonly'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
					(extension "b'com.apple.app-sandbox.read'")
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.sharing.airdrop.readonly'")))))
	(require-all
		(extension-class "com.apple.app-sandbox.read")
		(require-any
			(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
			(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
			(require-all
				(extension-class "com.apple.aned.read-only")
				(require-any
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")))
			(require-all
				(extension-class "com.apple.app-sandbox.read-write")
				(require-any
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(require-any
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(extension "b'com.apple.quicklook.readonly'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
					(extension "b'com.apple.app-sandbox.read'")
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.sharing.airdrop.readonly'")))
			(require-all
				(extension-class "com.apple.aned.read-only")
				(require-any
					(extension "b'com.apple.quicklook.readonly'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
					(extension "b'com.apple.app-sandbox.read'")
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.sharing.airdrop.readonly'")))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(extension "b'com.apple.quicklook.readonly'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
					(extension "b'com.apple.app-sandbox.read'")
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.sharing.airdrop.readonly'")))))
	(require-all
		(extension-class "com.apple.mediaserverd.read-write")
		(require-any
			(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
			(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
			(require-all
				(extension-class "com.apple.aned.read-only")
				(require-any
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")))
			(require-all
				(extension-class "com.apple.app-sandbox.read-write")
				(require-any
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(require-any
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(extension "b'com.apple.quicklook.readonly'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
					(extension "b'com.apple.app-sandbox.read'")
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.sharing.airdrop.readonly'")))
			(require-all
				(extension-class "com.apple.aned.read-only")
				(require-any
					(extension "b'com.apple.quicklook.readonly'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
					(extension "b'com.apple.app-sandbox.read'")
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.sharing.airdrop.readonly'")))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(extension "b'com.apple.quicklook.readonly'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
					(extension "b'com.apple.app-sandbox.read'")
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.sharing.airdrop.readonly'")))))
	(require-all
		(extension-class "com.apple.aned.read-only")
		(require-any
			(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
			(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
			(require-all
				(extension-class "com.apple.aned.read-only")
				(require-any
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")))
			(require-all
				(extension-class "com.apple.app-sandbox.read-write")
				(require-any
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(require-any
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(extension "b'com.apple.quicklook.readonly'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
					(extension "b'com.apple.app-sandbox.read'")
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.sharing.airdrop.readonly'")))
			(require-all
				(extension-class "com.apple.aned.read-only")
				(require-any
					(extension "b'com.apple.quicklook.readonly'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
					(extension "b'com.apple.app-sandbox.read'")
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.sharing.airdrop.readonly'")))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(extension "b'com.apple.quicklook.readonly'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
					(extension "b'com.apple.app-sandbox.read'")
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.sharing.airdrop.readonly'")))))
	(require-all
		(extension-class "com.apple.mediaserverd.read")
		(require-any
			(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
			(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
			(require-all
				(extension-class "com.apple.aned.read-only")
				(require-any
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")))
			(require-all
				(extension-class "com.apple.app-sandbox.read-write")
				(require-any
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(require-any
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(extension "b'com.apple.quicklook.readonly'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
					(extension "b'com.apple.app-sandbox.read'")
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.sharing.airdrop.readonly'")))
			(require-all
				(extension-class "com.apple.aned.read-only")
				(require-any
					(extension "b'com.apple.quicklook.readonly'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
					(extension "b'com.apple.app-sandbox.read'")
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.sharing.airdrop.readonly'")))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(extension "b'com.apple.quicklook.readonly'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
					(extension "b'com.apple.app-sandbox.read'")
					(extension "b'com.apple.app-sandbox.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
					(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
					(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
					(extension "b'com.apple.sharing.airdrop.readonly'")))))
	(require-all
		(extension-class "com.apple.quicklook.readonly")
		(require-any
			(extension "b'com.apple.quicklook.readonly'")
			(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
			(extension "b'com.apple.app-sandbox.read'")
			(extension "b'com.apple.app-sandbox.read-write'")
			(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
			(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
			(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
			(extension "b'com.apple.sharing.airdrop.readonly'")))
	(require-all
		(extension-class "com.apple.sharing.airdrop.readonly")
		(require-any
			(extension "b'com.apple.quicklook.readonly'")
			(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
			(extension "b'com.apple.app-sandbox.read'")
			(extension "b'com.apple.app-sandbox.read-write'")
			(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
			(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
			(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
			(extension "b'com.apple.sharing.airdrop.readonly'")))
	(require-all
		(extension "b'com.apple.sandbox.executable'")
		(require-not (literal))
		(require-any
			(extension-class "com.apple.app-sandbox.read")
			(extension-class "com.apple.aned.read-only")
			(extension-class "com.apple.mediaserverd.read")))
	(require-all
		(require-all (require-not (literal "/System/Library/Caches/apticket.der"))
(require-not (subpath "/System/Library/Caches/com.apple.factorydata"))
(require-not (subpath "/System/Library/Caches/com.apple.kernelcaches")))
		(require-not (subpath "/private/var/hardware/FactoryData"))
		(require-not (literal "/usr/standalone/firmware/apticket.der"))
		(require-any
			(entitlement-is-bool-true "b'com.apple.private.amfi.can-execute-cdhash'")
			(require-all
				(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'")
				(require-any
					(require-all
						(entitlement-is-bool-true "b'com.apple.private.librarian.container-proxy'")
						(require-any
							(require-all
								(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents/?")
								(require-any
									(extension-class "com.apple.quicklook.readonly")
									(extension-class "com.apple.app-sandbox.read-write")
									(extension-class "com.apple.app-sandbox.read")
									(extension-class "com.apple.sharing.airdrop.readonly")
									(extension-class "com.apple.mediaserverd.read-write")
									(extension-class "com.apple.aned.read-only")
									(extension-class "com.apple.mediaserverd.read")))
							(require-all
								(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/File Provider Storage/?")
								(require-any
									(extension-class "com.apple.quicklook.readonly")
									(extension-class "com.apple.app-sandbox.read-write")
									(extension-class "com.apple.app-sandbox.read")
									(extension-class "com.apple.sharing.airdrop.readonly")
									(extension-class "com.apple.mediaserverd.read-write")
									(extension-class "com.apple.aned.read-only")
									(extension-class "com.apple.mediaserverd.read")))
							(require-all
								(subpath-prefix "${HOME}/Library/Mobile Documents")
								(require-any
									(extension-class "com.apple.quicklook.readonly")
									(extension-class "com.apple.app-sandbox.read-write")
									(extension-class "com.apple.app-sandbox.read")
									(extension-class "com.apple.sharing.airdrop.readonly")
									(extension-class "com.apple.mediaserverd.read-write")
									(extension-class "com.apple.aned.read-only")
									(extension-class "com.apple.mediaserverd.read")))
							(require-all
								(literal "/private/var/")
								(subpath-prefix "${FRONT_USER_HOME}")
								(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$"))))
					(require-all
						(extension "b'com.apple.librarian.ubiquity-container'")
						(require-any
							(require-all
								(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents/?")
								(require-any
									(extension-class "com.apple.quicklook.readonly")
									(extension-class "com.apple.app-sandbox.read-write")
									(extension-class "com.apple.app-sandbox.read")
									(extension-class "com.apple.sharing.airdrop.readonly")
									(extension-class "com.apple.mediaserverd.read-write")
									(extension-class "com.apple.aned.read-only")
									(extension-class "com.apple.mediaserverd.read")))
							(require-all
								(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/File Provider Storage/?")
								(require-any
									(extension-class "com.apple.quicklook.readonly")
									(extension-class "com.apple.app-sandbox.read-write")
									(extension-class "com.apple.app-sandbox.read")
									(extension-class "com.apple.sharing.airdrop.readonly")
									(extension-class "com.apple.mediaserverd.read-write")
									(extension-class "com.apple.aned.read-only")
									(extension-class "com.apple.mediaserverd.read")))
							(require-all
								(subpath-prefix "${HOME}/Library/Mobile Documents")
								(require-any
									(extension-class "com.apple.quicklook.readonly")
									(extension-class "com.apple.app-sandbox.read-write")
									(extension-class "com.apple.app-sandbox.read")
									(extension-class "com.apple.sharing.airdrop.readonly")
									(extension-class "com.apple.mediaserverd.read-write")
									(extension-class "com.apple.aned.read-only")
									(extension-class "com.apple.mediaserverd.read")))
							(require-all
								(literal "/private/var/")
								(subpath-prefix "${FRONT_USER_HOME}")
								(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$"))))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
							(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
							(extension "b'com.apple.app-sandbox.read-write'")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
							(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
							(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
							(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
							(extension "b'com.apple.app-sandbox.read-write'")))
					(require-all
						(extension-class "com.apple.quicklook.readonly")
						(require-any
							(extension-class "com.apple.mediaserverd.read-write")
							(extension-class "com.apple.mediaserverd.read")
							(require-all
								(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Application Support/iCloudDrive/[UNSUPPORTED]+/session/r/?")
								(extension "b'com.apple.clouddocs.version'"))
							(require-all
								(literal "/private/var/")
								(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Application Support/iCloudDrive/[^/]+/session/r/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Application Support/iCloudDrive/[^/]+/session/r$" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/Library/Application Support/iCloudDrive/[^/]+/session/r/" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/Library/Application Support/iCloudDrive/[^/]+/session/r$" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/Library/Application Support/iCloudDrive/[^/]+/session/r/" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/Library/Application Support/iCloudDrive/[^/]+/session/r$" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Application Support/iCloudDrive/[^/]+/session/r/" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Application Support/iCloudDrive/[^/]+/session/r$")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}")))
							(require-all
								(subpath-prefix "${HOME}/Library/Application Support/CloudDocs/session/r")
								(vnode-type REGULAR-FILE))
							(require-all
								(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Application Support/CloudDocs/session/r/?")
								(vnode-type REGULAR-FILE))))
					(require-all
						(extension-class "com.apple.app-sandbox.read-write")
						(extension "b'com.apple.app-sandbox.read-write'"))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(extension "b'com.apple.app-sandbox.read-write'"))
					(require-all
						(extension-class "com.apple.sharing.airdrop.readonly")
						(extension "b'com.apple.app-sandbox.read-write'"))))
			(require-all
				(extension-class "com.apple.app-sandbox.read-write")
				(require-any
					(require-all
						(entitlement-is-present "b'com.apple.security.ts.tmpdir'")
						(require-any (subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.tmpdir}")
(subpath-prefix "${PROCESS_TEMP_DIR}/${ENTITLEMENT:com.apple.security.ts.tmpdir}")))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(entitlement-is-bool-true "b'com.apple.security.ts.read-any-bundle'")
								(require-any
									(subpath "/private/var/containers/Bundle")
									(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
									(subpath "/Developer/Applications")
									(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
									(subpath "/Applications")))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
									(extension "b'com.apple.security.exception.files.absolute-path.read-only'")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(require-any
							(require-all
								(entitlement-is-bool-true "b'com.apple.security.ts.read-any-bundle'")
								(require-any
									(subpath "/private/var/containers/Bundle")
									(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
									(subpath "/Developer/Applications")
									(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
									(subpath "/Applications")))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
									(extension "b'com.apple.security.exception.files.absolute-path.read-only'")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(entitlement-is-bool-true "b'com.apple.security.ts.read-any-bundle'")
								(require-any
									(subpath "/private/var/containers/Bundle")
									(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
									(subpath "/Developer/Applications")
									(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
									(subpath "/Applications")))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
									(extension "b'com.apple.security.exception.files.absolute-path.read-only'")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
							(extension "b'com.apple.security.exception.files.absolute-path.read-write'")))))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(require-all
						(entitlement-is-present "b'com.apple.security.ts.tmpdir'")
						(require-any (subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.tmpdir}")
(subpath-prefix "${PROCESS_TEMP_DIR}/${ENTITLEMENT:com.apple.security.ts.tmpdir}")))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(entitlement-is-bool-true "b'com.apple.security.ts.read-any-bundle'")
								(require-any
									(subpath "/private/var/containers/Bundle")
									(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
									(subpath "/Developer/Applications")
									(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
									(subpath "/Applications")))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
									(extension "b'com.apple.security.exception.files.absolute-path.read-only'")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(require-any
							(require-all
								(entitlement-is-bool-true "b'com.apple.security.ts.read-any-bundle'")
								(require-any
									(subpath "/private/var/containers/Bundle")
									(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
									(subpath "/Developer/Applications")
									(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
									(subpath "/Applications")))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
									(extension "b'com.apple.security.exception.files.absolute-path.read-only'")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(entitlement-is-bool-true "b'com.apple.security.ts.read-any-bundle'")
								(require-any
									(subpath "/private/var/containers/Bundle")
									(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
									(subpath "/Developer/Applications")
									(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
									(subpath "/Applications")))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
									(extension "b'com.apple.security.exception.files.absolute-path.read-only'")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
							(extension "b'com.apple.security.exception.files.absolute-path.read-write'")))))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(require-any
					(require-all
						(entitlement-is-present "b'com.apple.security.ts.tmpdir'")
						(require-any (subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.tmpdir}")
(subpath-prefix "${PROCESS_TEMP_DIR}/${ENTITLEMENT:com.apple.security.ts.tmpdir}")))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(entitlement-is-bool-true "b'com.apple.security.ts.read-any-bundle'")
								(require-any
									(subpath "/private/var/containers/Bundle")
									(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
									(subpath "/Developer/Applications")
									(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
									(subpath "/Applications")))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
									(extension "b'com.apple.security.exception.files.absolute-path.read-only'")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(require-any
							(require-all
								(entitlement-is-bool-true "b'com.apple.security.ts.read-any-bundle'")
								(require-any
									(subpath "/private/var/containers/Bundle")
									(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
									(subpath "/Developer/Applications")
									(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
									(subpath "/Applications")))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
									(extension "b'com.apple.security.exception.files.absolute-path.read-only'")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(entitlement-is-bool-true "b'com.apple.security.ts.read-any-bundle'")
								(require-any
									(subpath "/private/var/containers/Bundle")
									(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
									(subpath "/Developer/Applications")
									(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
									(subpath "/Applications")))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
									(extension "b'com.apple.security.exception.files.absolute-path.read-only'")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
							(extension "b'com.apple.security.exception.files.absolute-path.read-write'")))))
			(require-all
				(entitlement-is-bool-true "b'com.apple.security.ts.daemon-container'")
				(extension "b'com.apple.sandbox.container'")
				(require-any
					(extension-class "com.apple.quicklook.readonly")
					(extension-class "com.apple.mediaserverd.read-write")
					(extension-class "com.apple.mediaserverd.read")))
			(require-all
				(extension-class "com.apple.nsurlsessiond.readonly")
				(extension "b'com.apple.sandbox.executable'")
				(entitlement-is-bool-true "b'com.apple.security.network.client'"))
			(require-all
				(extension-class "com.apple.aned.read-only")
				(require-any
					(require-all
						(entitlement-is-present "b'com.apple.security.ts.tmpdir'")
						(require-any (subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.tmpdir}")
(subpath-prefix "${PROCESS_TEMP_DIR}/${ENTITLEMENT:com.apple.security.ts.tmpdir}")))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(entitlement-is-bool-true "b'com.apple.security.ts.read-any-bundle'")
								(require-any
									(subpath "/private/var/containers/Bundle")
									(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
									(subpath "/Developer/Applications")
									(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
									(subpath "/Applications")))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
									(extension "b'com.apple.security.exception.files.absolute-path.read-only'")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(require-any
							(require-all
								(entitlement-is-bool-true "b'com.apple.security.ts.read-any-bundle'")
								(require-any
									(subpath "/private/var/containers/Bundle")
									(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
									(subpath "/Developer/Applications")
									(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
									(subpath "/Applications")))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
									(extension "b'com.apple.security.exception.files.absolute-path.read-only'")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(entitlement-is-bool-true "b'com.apple.security.ts.read-any-bundle'")
								(require-any
									(subpath "/private/var/containers/Bundle")
									(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
									(subpath "/Developer/Applications")
									(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
									(subpath "/Applications")))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
									(extension "b'com.apple.security.exception.files.absolute-path.read-only'")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
							(extension "b'com.apple.security.exception.files.absolute-path.read-write'")))))
			(require-all
				(extension-class "com.apple.app-sandbox.read-write")
				(require-any
					(require-all
						(entitlement-is-bool-true "b'com.apple.security.ts.daemon-container'")
						(extension "b'com.apple.sandbox.container'"))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(entitlement-is-bool-true "b'com.apple.security.ts.asset-access.with-media-playback'")
						(require-any
							(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
							(extension "b'com.apple.security.exception.files.absolute-path.read-write'")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(entitlement-is-bool-true "b'com.apple.security.ts.asset-access.with-media-playback'")
								(require-any
									(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
									(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
									(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
									(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
									(require-all
										(extension "b'com.apple.assets.read'")
										(require-any
											(subpath "/private/var/MobileAsset")
											(subpath-prefix "${HOME}/Library/Assets")))))
							(require-all
								(signing-identifier "com.apple.storagedatad")
								(require-any
									(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Safari/Downloads/Downloads[UNSUPPORTED]plist")
									(require-all
										(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist")
										(literal "/private/var/")
										(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}")))))))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(signing-identifier "com.apple.storagedatad")
						(require-any
							(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Safari/Downloads/Downloads[UNSUPPORTED]plist")
							(require-all
								(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist")
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(signing-identifier "com.apple.storagedatad")
						(require-any
							(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Safari/Downloads/Downloads[UNSUPPORTED]plist")
							(require-all
								(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist")
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}")))))))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(require-all
						(entitlement-is-bool-true "b'com.apple.security.ts.daemon-container'")
						(extension "b'com.apple.sandbox.container'"))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(entitlement-is-bool-true "b'com.apple.security.ts.asset-access.with-media-playback'")
						(require-any
							(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
							(extension "b'com.apple.security.exception.files.absolute-path.read-write'")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(entitlement-is-bool-true "b'com.apple.security.ts.asset-access.with-media-playback'")
								(require-any
									(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
									(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
									(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
									(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
									(require-all
										(extension "b'com.apple.assets.read'")
										(require-any
											(subpath "/private/var/MobileAsset")
											(subpath-prefix "${HOME}/Library/Assets")))))
							(require-all
								(signing-identifier "com.apple.storagedatad")
								(require-any
									(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Safari/Downloads/Downloads[UNSUPPORTED]plist")
									(require-all
										(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist")
										(literal "/private/var/")
										(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}")))))))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(signing-identifier "com.apple.storagedatad")
						(require-any
							(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Safari/Downloads/Downloads[UNSUPPORTED]plist")
							(require-all
								(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist")
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(signing-identifier "com.apple.storagedatad")
						(require-any
							(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Safari/Downloads/Downloads[UNSUPPORTED]plist")
							(require-all
								(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist")
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}")))))))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(require-all
						(entitlement-is-present "b'com.apple.security.ts.tmpdir'")
						(require-any (subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.tmpdir}")
(subpath-prefix "${PROCESS_TEMP_DIR}/${ENTITLEMENT:com.apple.security.ts.tmpdir}")))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(require-any
							(require-all
								(entitlement-is-bool-true "b'com.apple.security.ts.read-any-bundle'")
								(require-any
									(subpath "/private/var/containers/Bundle")
									(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
									(subpath "/Developer/Applications")
									(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
									(subpath "/Applications")))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
									(extension "b'com.apple.security.exception.files.absolute-path.read-only'")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(require-any
							(require-all
								(entitlement-is-bool-true "b'com.apple.security.ts.read-any-bundle'")
								(require-any
									(subpath "/private/var/containers/Bundle")
									(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
									(subpath "/Developer/Applications")
									(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
									(subpath "/Applications")))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
									(extension "b'com.apple.security.exception.files.absolute-path.read-only'")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(entitlement-is-bool-true "b'com.apple.security.ts.read-any-bundle'")
								(require-any
									(subpath "/private/var/containers/Bundle")
									(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
									(subpath "/Developer/Applications")
									(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
									(subpath "/Applications")))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(require-any
									(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
									(extension "b'com.apple.security.exception.files.absolute-path.read-only'")))))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(require-any
							(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
							(extension "b'com.apple.security.exception.files.absolute-path.read-write'")))))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(require-any
					(require-all
						(entitlement-is-bool-true "b'com.apple.security.ts.daemon-container'")
						(extension "b'com.apple.sandbox.container'"))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(entitlement-is-bool-true "b'com.apple.security.ts.asset-access.with-media-playback'")
						(require-any
							(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
							(extension "b'com.apple.security.exception.files.absolute-path.read-write'")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(entitlement-is-bool-true "b'com.apple.security.ts.asset-access.with-media-playback'")
								(require-any
									(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
									(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
									(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
									(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
									(require-all
										(extension "b'com.apple.assets.read'")
										(require-any
											(subpath "/private/var/MobileAsset")
											(subpath-prefix "${HOME}/Library/Assets")))))
							(require-all
								(signing-identifier "com.apple.storagedatad")
								(require-any
									(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Safari/Downloads/Downloads[UNSUPPORTED]plist")
									(require-all
										(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist")
										(literal "/private/var/")
										(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}")))))))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(signing-identifier "com.apple.storagedatad")
						(require-any
							(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Safari/Downloads/Downloads[UNSUPPORTED]plist")
							(require-all
								(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist")
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(signing-identifier "com.apple.storagedatad")
						(require-any
							(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Safari/Downloads/Downloads[UNSUPPORTED]plist")
							(require-all
								(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist")
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}")))))))
			(require-all
				(extension-class "com.apple.aned.read-only")
				(require-any
					(require-all
						(entitlement-is-bool-true "b'com.apple.security.ts.daemon-container'")
						(extension "b'com.apple.sandbox.container'"))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(entitlement-is-bool-true "b'com.apple.security.ts.asset-access.with-media-playback'")
						(require-any
							(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
							(extension "b'com.apple.security.exception.files.absolute-path.read-write'")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(entitlement-is-bool-true "b'com.apple.security.ts.asset-access.with-media-playback'")
								(require-any
									(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
									(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
									(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
									(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
									(require-all
										(extension "b'com.apple.assets.read'")
										(require-any
											(subpath "/private/var/MobileAsset")
											(subpath-prefix "${HOME}/Library/Assets")))))
							(require-all
								(signing-identifier "com.apple.storagedatad")
								(require-any
									(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Safari/Downloads/Downloads[UNSUPPORTED]plist")
									(require-all
										(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist")
										(literal "/private/var/")
										(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}")))))))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(signing-identifier "com.apple.storagedatad")
						(require-any
							(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Safari/Downloads/Downloads[UNSUPPORTED]plist")
							(require-all
								(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist")
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(signing-identifier "com.apple.storagedatad")
						(require-any
							(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Safari/Downloads/Downloads[UNSUPPORTED]plist")
							(require-all
								(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist")
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}")))))))
			(require-all
				(signing-identifier "com.apple.cloudpaird")
				(subpath-prefix "${PROCESS_TEMP_DIR}/com.apple.cloudpaird")
				(require-any
					(extension-class "com.apple.app-sandbox.read-write")
					(extension-class "com.apple.app-sandbox.read")
					(extension-class "com.apple.mediaserverd.read-write")
					(extension-class "com.apple.aned.read-only")
					(extension-class "com.apple.mediaserverd.read")))
			(require-all
				(extension "b'com.apple.sandbox.application-group'")
				(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/.com.apple."))
				(require-any
					(require-all
						(literal "/private/var/")
						(subpath-prefix "${FRONT_USER_HOME}")
						(require-not (regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]")))
					(require-all
						(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/")
						(require-any
							(extension-class "com.apple.quicklook.readonly")
							(extension-class "com.apple.app-sandbox.read-write")
							(extension-class "com.apple.app-sandbox.read")
							(extension-class "com.apple.sharing.airdrop.readonly")
							(extension-class "com.apple.mediaserverd.read-write")
							(extension-class "com.apple.nsurlsessiond.readonly")
							(extension-class "com.apple.wcd.readonly")
							(extension-class "com.apple.aned.read-only")
							(extension-class "com.apple.mediaserverd.read")
							(extension-class "com.apple.spotlight-indexable")))
					(require-all
						(literal "/private/var/")
						(subpath-prefix "${FRONT_USER_HOME}")
						(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/"))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(literal "/private/var/")
						(require-any
							(require-all
								(subpath-prefix "${FRONT_USER_HOME}")
								(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+$"))
							(require-all
								(literal "/private/var/PersonaVolumes/")
								(regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+$"))
							(require-all
								(subpath-prefix "${FRONT_USER_HOME}")
								(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+$"))
							(require-all
								(literal "/private/var/PersonaVolumes/")
								(regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+$"))))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(literal "/private/var/")
						(require-any
							(require-all
								(subpath-prefix "${FRONT_USER_HOME}")
								(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+$"))
							(require-all
								(literal "/private/var/PersonaVolumes/")
								(regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+$"))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(literal "/private/var/")
						(require-any
							(require-all
								(subpath-prefix "${FRONT_USER_HOME}")
								(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+$"))
							(require-all
								(literal "/private/var/PersonaVolumes/")
								(regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+$"))))))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(require-all
						(entitlement-is-bool-true "b'com.apple.security.ts.daemon-container'")
						(extension "b'com.apple.sandbox.container'"))
					(require-all
						(extension-class "com.apple.mediaserverd.read-write")
						(entitlement-is-bool-true "b'com.apple.security.ts.asset-access.with-media-playback'")
						(require-any
							(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
							(extension "b'com.apple.security.exception.files.absolute-path.read-write'")))
					(require-all
						(extension-class "com.apple.mediaserverd.read")
						(require-any
							(require-all
								(entitlement-is-bool-true "b'com.apple.security.ts.asset-access.with-media-playback'")
								(require-any
									(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
									(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
									(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
									(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
									(require-all
										(extension "b'com.apple.assets.read'")
										(require-any
											(subpath "/private/var/MobileAsset")
											(subpath-prefix "${HOME}/Library/Assets")))))
							(require-all
								(signing-identifier "com.apple.storagedatad")
								(require-any
									(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Safari/Downloads/Downloads[UNSUPPORTED]plist")
									(require-all
										(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist")
										(literal "/private/var/")
										(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}")))))))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(signing-identifier "com.apple.storagedatad")
						(require-any
							(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Safari/Downloads/Downloads[UNSUPPORTED]plist")
							(require-all
								(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist")
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}")))))
					(require-all
						(extension-class "com.apple.aned.read-only")
						(signing-identifier "com.apple.storagedatad")
						(require-any
							(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Safari/Downloads/Downloads[UNSUPPORTED]plist")
							(require-all
								(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist")
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}")))))))
			(require-all
				(extension-class "com.apple.identityservices.send")
				(require-any
					(require-all
						(subpath "/private/var/tmp")
						(require-any
							(signing-identifier "com.apple.announced")
							(signing-identifier "com.apple.FTLivePhotoService")))
					(require-all
						(subpath-prefix "${PROCESS_TEMP_DIR}")
						(require-any
							(signing-identifier "com.apple.announced")
							(signing-identifier "com.apple.FTLivePhotoService")))
					(require-all
						(extension "b'com.apple.app-sandbox.read'")
						(require-any
							(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/tmp/com[UNSUPPORTED]apple[UNSUPPORTED]FTLivePhotoService/")
							(require-all
								(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/")
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}")))))
					(require-all
						(extension "b'com.apple.app-sandbox.read-write'")
						(require-any
							(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/tmp/com[UNSUPPORTED]apple[UNSUPPORTED]FTLivePhotoService/")
							(require-all
								(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/")
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}")))))))
			(require-all
				(extension-class "com.apple.sandbox.container-proxy")
				(extension "b'com.apple.sandbox.container'")
				(require-any
					(require-all
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+")
						(literal "/private/var/")
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}")))
					(require-all
						(literal "/private/var/PersonaVolumes/")
						(regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+")
						(signing-identifier "com.apple.CoreDevice.dtfilesandboxd"))))
			(require-all
				(extension-class "com.apple.app-sandbox.read-write")
				(require-any
					(require-all
						(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Caches/com[UNSUPPORTED]apple[UNSUPPORTED]metalassetupgrader/recompiled/?")
						(signing-identifier "com.apple.MTLAssetUpgraderD"))
					(require-all
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/recompiled/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/recompiled$" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/recompiled/" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/recompiled$" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/recompiled/" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/recompiled$" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/recompiled/" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/recompiled$")
						(literal "/private/var/")
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}")))))
			(require-all
				(extension-class "com.apple.StreamingUnzipService")
				(require-any
					(require-all
						(signing-identifier "com.apple.managedappdistributiond")
						(require-any
							(regex #"/private/var/containers/Data/System/[UNSUPPORTED]+/Library/Caches/Scratch")
							(subpath "/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.installcoordinationd/Library/InstallCoordination/PromiseStaging")))
					(require-all
						(subpath-prefix "${HOME}/Library/VoiceTrigger")
						(signing-identifier "com.apple.corespeechd"))
					(require-all
						(signing-identifier "com.apple.assistantd")
						(subpath-prefix "${HOME}/Library/Caches/VoiceTrigger"))))
			(require-all
				(extension-class "com.apple.nsurlsessiond.readonly")
				(require-any
					(require-any (subpath "/private/var/tmp/com.apple.anomalydetectiond")
(subpath-prefix "${PROCESS_TEMP_DIR}/com.apple.anomalydetectiond"))
					(require-all
						(signing-identifier "com.apple.diagnosticextensionsd")
						(subpath-prefix "${HOME}/Library/Logs/com.apple.diagnosticextensionsd"))))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(signing-identifier "com.apple.SurfBoard")
				(literal "/private/var/")
				(subpath-prefix "${HOME}")
				(regex #"^/private/var/mobile/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/mobile/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/euser[0-9]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/euser[0-9]+/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/[-0-9A-F]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/[-0-9A-F]+/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/Users/[^/]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/Users/[^/]+/Library/UserNotifications/[^/]+/Attachments$"))
			(require-all
				(extension-class "com.apple.StreamingUnzipService")
				(signing-identifier "com.apple.assistantd")
				(subpath-prefix "${HOME}/Library/Caches/VoiceTrigger"))
			(require-all
				(extension-class "com.apple.StreamingUnzipService")
				(require-any
					(require-all
						(subpath-prefix "${HOME}/Library/VoiceTrigger")
						(signing-identifier "com.apple.corespeechd"))
					(require-all
						(signing-identifier "com.apple.assistantd")
						(subpath-prefix "${HOME}/Library/Caches/VoiceTrigger"))))
			(require-all
				(extension-class "com.apple.identityservices.send")
				(require-any
					(require-all
						(subpath "/private/var/tmp")
						(signing-identifier "com.apple.FTLivePhotoService"))
					(require-all
						(subpath-prefix "${PROCESS_TEMP_DIR}")
						(signing-identifier "com.apple.FTLivePhotoService"))
					(require-all
						(extension "b'com.apple.app-sandbox.read'")
						(require-any
							(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/tmp/com[UNSUPPORTED]apple[UNSUPPORTED]FTLivePhotoService/")
							(require-all
								(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/")
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}")))))
					(require-all
						(extension "b'com.apple.app-sandbox.read-write'")
						(require-any
							(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/tmp/com[UNSUPPORTED]apple[UNSUPPORTED]FTLivePhotoService/")
							(require-all
								(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/")
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}")))))))
			(require-all
				(extension-class "com.apple.identityservices.send")
				(require-any
					(require-all
						(subpath "/private/var/tmp")
						(signing-identifier "com.apple.Carousel"))
					(require-all
						(subpath-prefix "${HOME}/Library/Logs/Brook")
						(signing-identifier "com.apple.Carousel"))
					(require-all
						(extension "b'com.apple.app-sandbox.read'")
						(require-any
							(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/tmp/com[UNSUPPORTED]apple[UNSUPPORTED]FTLivePhotoService/")
							(require-all
								(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/")
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}")))))
					(require-all
						(subpath-prefix "${PROCESS_TEMP_DIR}")
						(signing-identifier "com.apple.Carousel"))
					(require-all
						(extension "b'com.apple.app-sandbox.read-write'")
						(require-any
							(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/tmp/com[UNSUPPORTED]apple[UNSUPPORTED]FTLivePhotoService/")
							(require-all
								(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/tmp/com.apple.FTLivePhotoService/")
								(literal "/private/var/")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}")))))
					(require-all
						(literal "/private/var/")
						(subpath-prefix "${FRONT_USER_HOME}")
						(regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/BulletinDistributor" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/BulletinDistributor" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/BulletinDistributor" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/BulletinDistributor"))))
			(require-all
				(extension-class "com.apple.quicklook.readonly")
				(signing-identifier "com.apple.SurfBoard")
				(literal "/private/var/")
				(subpath-prefix "${HOME}")
				(regex #"^/private/var/mobile/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/mobile/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/euser[0-9]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/euser[0-9]+/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/[-0-9A-F]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/[-0-9A-F]+/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/Users/[^/]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/Users/[^/]+/Library/UserNotifications/[^/]+/Attachments$"))
			(require-all
				(extension-class "com.apple.usernotifications.attachments.read-only")
				(signing-identifier "com.apple.SurfBoard")
				(literal "/private/var/")
				(subpath-prefix "${HOME}")
				(regex #"^/private/var/mobile/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/mobile/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/euser[0-9]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/euser[0-9]+/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/[-0-9A-F]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/[-0-9A-F]+/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/Users/[^/]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/Users/[^/]+/Library/UserNotifications/[^/]+/Attachments$"))
			(require-all
				(extension-class "com.apple.nsurlsessiond.readonly")
				(require-any
					(require-all
						(subpath-prefix "${HOME}/Library/com.apple.momentsd")
						(signing-identifier "com.apple.momentsd"))
					(require-all
						(signing-identifier "com.apple.geoanalyticsd")
						(subpath-prefix "${HOME}/Library/Caches/com.apple.geoanalyticsd"))))
			(require-all
				(extension-class "com.apple.quicklook.readonly")
				(require-any
					(require-all
						(literal "/private/var/")
						(regex #"^/private/var/mobile/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/mobile/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/euser[0-9]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/euser[0-9]+/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/[-0-9A-F]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/[-0-9A-F]+/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/Users/[^/]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/Users/[^/]+/Library/UserNotifications/[^/]+/Attachments$")
						(subpath-prefix "${HOME}"))
					(require-all
						(subpath-prefix "${HOME}/Library/BulletinDistributor/Attachments")
						(signing-identifier "com.apple.Carousel"))))
			(require-all
				(extension-class "com.apple.app-sandbox.read-write")
				(require-any
					(extension-class "com.apple.app-sandbox.read-write")
					(extension-class "com.apple.app-sandbox.read")
					(extension-class "com.apple.mediaserverd.read-write")
					(extension-class "com.apple.aned.read-only")
					(extension-class "com.apple.mediaserverd.read")
					(require-all
						(signing-identifier "com.apple.momentsd")
						(require-any
							(subpath-prefix "${HOME}/Library/com.apple.momentsd")
							(extension-class "com.apple.mediaserverd.read")
							(extension-class "com.apple.mediaserverd.read-write")))))
			(require-all
				(entitlement-is-bool-true "b'com.apple.security.system-container'")
				(require-any
					(entitlement-is-bool-true "b'com.apple.private.amfi.can-execute-cdhash'")
					(require-all
						(extension "b'com.apple.sandbox.system-container'")
						(regex #"/private/var/containers/Data/System/[UNSUPPORTED]+/.com.apple.")
						(require-any
							(require-all
								(regex #"/private/var/containers/Data/System/[UNSUPPORTED]+/")
								(require-any
									(extension-class "com.apple.app-sandbox.read-write")
									(extension-class "com.apple.app-sandbox.read")
									(extension-class "com.apple.sharing.airdrop.readonly")
									(extension-class "com.apple.mediaserverd.read-write")
									(extension-class "com.apple.nsurlsessiond.readonly")
									(extension-class "com.apple.aned.read-only")
									(extension-class "com.apple.mediaserverd.read")))
							(require-all
								(literal "/private/var/containers/Data/System/")
								(require-any
									(require-all
										(extension-class "com.apple.app-sandbox.read")
										(regex #"^/private/var/containers/Data/System/[^/]+/" #"^/private/var/containers/Data/System/[^/]+$"))
									(require-all
										(extension-class "com.apple.aned.read-only")
										(regex #"^/private/var/containers/Data/System/[^/]+/" #"^/private/var/containers/Data/System/[^/]+$"))
									(require-all
										(extension-class "com.apple.mediaserverd.read")
										(regex #"^/private/var/containers/Data/System/[^/]+/" #"^/private/var/containers/Data/System/[^/]+$"))))))))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(require-all
						(literal "/private/var/")
						(regex #"^/private/var/mobile/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/mobile/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/euser[0-9]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/euser[0-9]+/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/[-0-9A-F]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/[-0-9A-F]+/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/Users/[^/]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/Users/[^/]+/Library/UserNotifications/[^/]+/Attachments$")
						(subpath-prefix "${HOME}"))
					(require-all
						(subpath-prefix "${HOME}/Library/BulletinDistributor/Attachments")
						(signing-identifier "com.apple.Carousel"))))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(extension-class "com.apple.app-sandbox.read-write")
					(extension-class "com.apple.app-sandbox.read")
					(extension-class "com.apple.mediaserverd.read-write")
					(extension-class "com.apple.aned.read-only")
					(extension-class "com.apple.mediaserverd.read")
					(require-all
						(signing-identifier "com.apple.momentsd")
						(require-any
							(subpath-prefix "${HOME}/Library/com.apple.momentsd")
							(extension-class "com.apple.mediaserverd.read")
							(extension-class "com.apple.mediaserverd.read-write")))))
			(require-all
				(extension "b'com.apple.fileprovider.read-write'")
				(require-any
					(extension-class "com.apple.app-sandbox.read-write")
					(extension-class "com.apple.app-sandbox.read")))
			(require-all
				(extension-class "com.apple.usernotifications.attachments.read-only")
				(require-any
					(require-all
						(literal "/private/var/")
						(regex #"^/private/var/mobile/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/mobile/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/euser[0-9]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/euser[0-9]+/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/[-0-9A-F]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/[-0-9A-F]+/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/Users/[^/]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/Users/[^/]+/Library/UserNotifications/[^/]+/Attachments$")
						(subpath-prefix "${HOME}"))
					(require-all
						(subpath-prefix "${HOME}/Library/BulletinDistributor/Attachments")
						(signing-identifier "com.apple.Carousel"))))
			(require-all
				(debug-mode)
				(subpath-prefix "${FRONT_USER_HOME}/XcodeBuiltProducts"))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(require-any
					(extension-class "com.apple.app-sandbox.read-write")
					(extension-class "com.apple.app-sandbox.read")
					(extension-class "com.apple.mediaserverd.read-write")
					(extension-class "com.apple.aned.read-only")
					(extension-class "com.apple.mediaserverd.read")
					(require-all
						(signing-identifier "com.apple.momentsd")
						(require-any
							(subpath-prefix "${HOME}/Library/com.apple.momentsd")
							(extension-class "com.apple.mediaserverd.read")
							(extension-class "com.apple.mediaserverd.read-write")))))
			(require-all
				(extension "b'com.apple.sandbox.system-group'")
				(require-any
					(require-all
						(entitlement-is-present "b'com.apple.security.system-groups'")
						(regex #"/private/var/containers/Shared/SystemGroup/[UNSUPPORTED]+/.com.apple.")
						(require-any
							(require-all
								(regex #"/private/var/containers/Shared/SystemGroup/[UNSUPPORTED]+/")
								(require-any
									(extension-class "com.apple.app-sandbox.read-write")
									(extension-class "com.apple.app-sandbox.read")
									(extension-class "com.apple.sharing.airdrop.readonly")
									(extension-class "com.apple.mediaserverd.read-write")
									(extension-class "com.apple.nsurlsessiond.readonly")
									(extension-class "com.apple.aned.read-only")
									(extension-class "com.apple.mediaserverd.read")))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(literal "/private/var/containers/Shared/SystemGroup/")
								(regex #"^/private/var/containers/Shared/SystemGroup/[^/]+/" #"^/private/var/containers/Shared/SystemGroup/[^/]+$"))
							(require-all
								(literal "/private/var/containers/Shared/SystemGroup/")
								(require-any
									(require-all
										(extension-class "com.apple.app-sandbox.read")
										(regex #"^/private/var/containers/Shared/SystemGroup/[^/]+/" #"^/private/var/containers/Shared/SystemGroup/[^/]+$"))
									(require-all
										(extension-class "com.apple.aned.read-only")
										(regex #"^/private/var/containers/Shared/SystemGroup/[^/]+/" #"^/private/var/containers/Shared/SystemGroup/[^/]+$"))))))
					(require-all
						(entitlement-is-present "b'com.apple.security.system-group-containers'")
						(regex #"/private/var/containers/Shared/SystemGroup/[UNSUPPORTED]+/.com.apple.")
						(require-any
							(require-all
								(regex #"/private/var/containers/Shared/SystemGroup/[UNSUPPORTED]+/")
								(require-any
									(extension-class "com.apple.app-sandbox.read-write")
									(extension-class "com.apple.app-sandbox.read")
									(extension-class "com.apple.sharing.airdrop.readonly")
									(extension-class "com.apple.mediaserverd.read-write")
									(extension-class "com.apple.nsurlsessiond.readonly")
									(extension-class "com.apple.aned.read-only")
									(extension-class "com.apple.mediaserverd.read")))
							(require-all
								(extension-class "com.apple.mediaserverd.read")
								(literal "/private/var/containers/Shared/SystemGroup/")
								(regex #"^/private/var/containers/Shared/SystemGroup/[^/]+/" #"^/private/var/containers/Shared/SystemGroup/[^/]+$"))
							(require-all
								(literal "/private/var/containers/Shared/SystemGroup/")
								(require-any
									(require-all
										(extension-class "com.apple.app-sandbox.read")
										(regex #"^/private/var/containers/Shared/SystemGroup/[^/]+/" #"^/private/var/containers/Shared/SystemGroup/[^/]+$"))
									(require-all
										(extension-class "com.apple.aned.read-only")
										(regex #"^/private/var/containers/Shared/SystemGroup/[^/]+/" #"^/private/var/containers/Shared/SystemGroup/[^/]+$"))))))))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(subpath "/System/Library")
					(subpath "/Library/RegionFeatures")
					(subpath "/System/Library")))
			(require-all
				(extension-class "com.apple.nsurlsessiond.readonly")
				(require-any (subpath "/private/var/tmp/com.apple.anomalydetectiond")
(subpath-prefix "${PROCESS_TEMP_DIR}/com.apple.anomalydetectiond")))
			(require-all
				(subpath-prefix "${HOME}/Library/Caches/com.apple.anomalydetectiond")
				(require-any
					(extension-class "com.apple.app-sandbox.read-write")
					(extension-class "com.apple.app-sandbox.read")
					(extension-class "com.apple.mediaserverd.read-write")
					(extension-class "com.apple.aned.read-only")
					(extension-class "com.apple.mediaserverd.read")))
			(require-all
				(extension-class "com.apple.aned.read-only")
				(require-any
					(extension-class "com.apple.app-sandbox.read-write")
					(extension-class "com.apple.app-sandbox.read")
					(extension-class "com.apple.mediaserverd.read-write")
					(extension-class "com.apple.aned.read-only")
					(extension-class "com.apple.mediaserverd.read")
					(require-all
						(signing-identifier "com.apple.momentsd")
						(require-any
							(subpath-prefix "${HOME}/Library/com.apple.momentsd")
							(extension-class "com.apple.mediaserverd.read")
							(extension-class "com.apple.mediaserverd.read-write")))))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(require-any
					(subpath "/Library/RegionFeatures")
					(subpath "/System/Library")))
			(require-all
				(signing-identifier "com.apple.anomalydetectiond")
				(subpath-prefix "${HOME}/Library/Caches/com.apple.anomalydetectiond")
				(require-any
					(extension-class "com.apple.mediaserverd.read-write")
					(extension-class "com.apple.mediaserverd.read")))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(require-any
					(extension-class "com.apple.app-sandbox.read-write")
					(extension-class "com.apple.app-sandbox.read")
					(extension-class "com.apple.mediaserverd.read-write")
					(extension-class "com.apple.aned.read-only")
					(extension-class "com.apple.mediaserverd.read")
					(require-all
						(signing-identifier "com.apple.momentsd")
						(require-any
							(subpath-prefix "${HOME}/Library/com.apple.momentsd")
							(extension-class "com.apple.mediaserverd.read")
							(extension-class "com.apple.mediaserverd.read-write")))))
			(require-all
				(extension-class "com.apple.aned.read-only")
				(require-any
					(subpath "/Library/RegionFeatures")
					(subpath "/System/Library")))
			(require-all
				(extension-class "com.apple.corespotlightservice.read-write")
				(signing-identifier "com.apple.health.records")
				(subpath-prefix "${HOME}/Library/Caches/com.apple.health.records/com.apple.corespotlightservice"))
			(require-all
				(extension-class "com.apple.nsurlsessiond.readonly")
				(signing-identifier "com.apple.geoanalyticsd")
				(subpath-prefix "${HOME}/Library/Caches/com.apple.geoanalyticsd"))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(subpath-prefix "${HOME}/Library/Caches/com.apple.geoanalyticsd")
				(signing-identifier "com.apple.geoanalyticsd"))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(subpath-prefix "${HOME}/Library/Caches/com.apple.geoanalyticsd")
				(signing-identifier "com.apple.geoanalyticsd"))
			(require-all
				(extension-class "com.apple.aned.read-only")
				(subpath-prefix "${HOME}/Library/Caches/com.apple.geoanalyticsd")
				(signing-identifier "com.apple.geoanalyticsd"))
			(require-all
				(extension-class "com.apple.identityservices.send")
				(signing-identifier "com.apple.facetimemessagestored")
				(require-any
					(subpath "/private/var/tmp")
					(subpath-prefix "${PROCESS_TEMP_DIR}")
					(subpath-prefix "${HOME}/Library/Application Support/com.apple.FaceTime/VideoMessaging/Outbox")))
			(require-all
				(extension-class "com.apple.app-sandbox.read-write")
				(subpath-prefix "${HOME}/Library/Caches/com.apple.geoanalyticsd")
				(signing-identifier "com.apple.geoanalyticsd"))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(signing-identifier "com.apple.avconferenced")
				(require-any (subpath "/private/var/tmp/com.apple.avconferenced")
(subpath-prefix "${PROCESS_TEMP_DIR}/com.apple.avconferenced")))
			(require-all
				(extension-class "com.apple.app-sandbox.read")
				(subpath-prefix "${HOME}/Library/Caches/com.apple.geoanalyticsd")
				(signing-identifier "com.apple.geoanalyticsd"))
			(require-all
				(extension-class "com.apple.mediaserverd.read-write")
				(subpath-prefix "${HOME}/Library/Caches/com.apple.geoanalyticsd")
				(signing-identifier "com.apple.geoanalyticsd"))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(subpath-prefix "${HOME}/Library/Caches/com.apple.geoanalyticsd")
				(signing-identifier "com.apple.geoanalyticsd"))
			(require-all
				(extension-class "com.apple.mediaserverd.read")
				(signing-identifier "com.apple.avconferenced")
				(require-any (subpath "/private/var/tmp/com.apple.avconferenced")
(subpath-prefix "${PROCESS_TEMP_DIR}/com.apple.avconferenced")))
			(require-all
				(signing-identifier "com.apple.ClarityBoard")
				(literal "/private/var/")
				(subpath-prefix "${HOME}")
				(require-any
					(require-all
						(extension-class "com.apple.quicklook.readonly")
						(regex #"^/private/var/mobile/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/mobile/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/euser[0-9]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/euser[0-9]+/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/[-0-9A-F]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/[-0-9A-F]+/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/Users/[^/]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/Users/[^/]+/Library/UserNotifications/[^/]+/Attachments$"))
					(require-all
						(extension-class "com.apple.app-sandbox.read")
						(regex #"^/private/var/mobile/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/mobile/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/euser[0-9]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/euser[0-9]+/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/[-0-9A-F]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/[-0-9A-F]+/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/Users/[^/]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/Users/[^/]+/Library/UserNotifications/[^/]+/Attachments$"))
					(require-all
						(extension-class "com.apple.usernotifications.attachments.read-only")
						(regex #"^/private/var/mobile/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/mobile/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/euser[0-9]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/euser[0-9]+/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/[-0-9A-F]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/[-0-9A-F]+/Library/UserNotifications/[^/]+/Attachments$" #"^/private/var/Users/[^/]+/Library/UserNotifications/[^/]+/Attachments/" #"^/private/var/Users/[^/]+/Library/UserNotifications/[^/]+/Attachments$"))))))
	(require-all
		(signing-identifier "com.apple.momentsd")
		(subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd"))
	(require-all
		(signing-identifier "com.apple.mediaplaybackd")
		(extension "b'com.apple.mediaserverd.read-write'"))
	(require-all
		(extension-class "com.apple.mediaserverd.read")
		(signing-identifier "com.apple.mediaplaybackd")
		(extension "b'com.apple.mediaserverd.read'"))
	(require-all
		(signing-identifier "com.apple.linkd")
		(require-any
			(subpath "/private/var/containers/Bundle")
			(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
			(subpath "/Developer/Applications")
			(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
			(subpath "/Applications")))
	(require-all
		(literal "/private/var/")
		(require-any
			(regex #"^/private/var/mobile/Media/CloudAssets/" #"^/private/var/mobile/Media/CloudAssets$" #"^/private/var/mobile/Media/[^/]+/CloudAssets/" #"^/private/var/mobile/Media/[^/]+/CloudAssets$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?CloudAssets/" #"^/private/var/euser[0-9]+/Media/([^/]+/)?CloudAssets$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?CloudAssets/" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?CloudAssets$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?CloudAssets/" #"^/private/var/Users/[^/]+/Media/([^/]+/)?CloudAssets$")
			(regex #"^/private/var/mobile/Media/Music/Cache_LoFi/" #"^/private/var/mobile/Media/Music/Cache_LoFi$" #"^/private/var/mobile/Media/[^/]+/Music/Cache_LoFi/" #"^/private/var/mobile/Media/[^/]+/Music/Cache_LoFi$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?Music/Cache_LoFi/" #"^/private/var/euser[0-9]+/Media/([^/]+/)?Music/Cache_LoFi$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?Music/Cache_LoFi/" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?Music/Cache_LoFi$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?Music/Cache_LoFi/" #"^/private/var/Users/[^/]+/Media/([^/]+/)?Music/Cache_LoFi$")
			(regex #"^/private/var/mobile/Media/Music/iTunes/" #"^/private/var/mobile/Media/Music/iTunes$" #"^/private/var/mobile/Media/[^/]+/Music/iTunes/" #"^/private/var/mobile/Media/[^/]+/Music/iTunes$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?Music/iTunes/" #"^/private/var/euser[0-9]+/Media/([^/]+/)?Music/iTunes$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?Music/iTunes/" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?Music/iTunes$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?Music/iTunes/" #"^/private/var/Users/[^/]+/Media/([^/]+/)?Music/iTunes$")
			(regex #"^/private/var/mobile/Media/iTunes_Control/Ringtones/" #"^/private/var/mobile/Media/iTunes_Control/Ringtones$" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/Ringtones/" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/Ringtones$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/Ringtones/" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/Ringtones$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/Ringtones/" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/Ringtones$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/Ringtones/" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/Ringtones$")
			(regex #"^/private/var/mobile/Media/Purchases/" #"^/private/var/mobile/Media/Purchases$" #"^/private/var/mobile/Media/[^/]+/Purchases/" #"^/private/var/mobile/Media/[^/]+/Purchases$" #"^/private/var/mobile/Media/ManagedPurchases/" #"^/private/var/mobile/Media/ManagedPurchases$" #"^/private/var/mobile/Media/[^/]+/ManagedPurchases/" #"^/private/var/mobile/Media/[^/]+/ManagedPurchases$" #"^/private/var/euser[0-9]+/Media/((([^/]+/)?|Managed)|[^/]+/Managed)Purchases/" #"^/private/var/euser[0-9]+/Media/((([^/]+/)?|Managed)|[^/]+/Managed)Purchases$" #"^/private/var/[-0-9A-F]+/Media/((([^/]+/)?|Managed)|[^/]+/Managed)Purchases/" #"^/private/var/[-0-9A-F]+/Media/((([^/]+/)?|Managed)|[^/]+/Managed)Purchases$" #"^/private/var/Users/[^/]+/Media/((([^/]+/)?|Managed)|[^/]+/Managed)Purchases/" #"^/private/var/Users/[^/]+/Media/((([^/]+/)?|Managed)|[^/]+/Managed)Purchases$")
			(regex #"^/private/var/mobile/Media/LoFiCloudAssets/" #"^/private/var/mobile/Media/LoFiCloudAssets$" #"^/private/var/mobile/Media/[^/]+/LoFiCloudAssets/" #"^/private/var/mobile/Media/[^/]+/LoFiCloudAssets$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?LoFiCloudAssets/" #"^/private/var/euser[0-9]+/Media/([^/]+/)?LoFiCloudAssets$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?LoFiCloudAssets/" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?LoFiCloudAssets$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?LoFiCloudAssets/" #"^/private/var/Users/[^/]+/Media/([^/]+/)?LoFiCloudAssets$")
			(regex #"^/private/var/mobile/Media/Music/Cache/" #"^/private/var/mobile/Media/Music/Cache$" #"^/private/var/mobile/Media/[^/]+/Music/Cache/" #"^/private/var/mobile/Media/[^/]+/Music/Cache$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?Music/Cache/" #"^/private/var/euser[0-9]+/Media/([^/]+/)?Music/Cache$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?Music/Cache/" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?Music/Cache$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?Music/Cache/" #"^/private/var/Users/[^/]+/Media/([^/]+/)?Music/Cache$")
			(regex #"^/private/var/mobile/Media/Downloads/" #"^/private/var/mobile/Media/Downloads$" #"^/private/var/mobile/Media/[^/]+/Downloads/" #"^/private/var/mobile/Media/[^/]+/Downloads$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?Downloads/" #"^/private/var/euser[0-9]+/Media/([^/]+/)?Downloads$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?Downloads/" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?Downloads$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?Downloads/" #"^/private/var/Users/[^/]+/Media/([^/]+/)?Downloads$")
			(regex #"^/private/var/mobile/Media/Music/Downloads/" #"^/private/var/mobile/Media/Music/Downloads$" #"^/private/var/mobile/Media/[^/]+/Music/Downloads/" #"^/private/var/mobile/Media/[^/]+/Music/Downloads$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?Music/Downloads/" #"^/private/var/euser[0-9]+/Media/([^/]+/)?Music/Downloads$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?Music/Downloads/" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?Music/Downloads$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?Music/Downloads/" #"^/private/var/Users/[^/]+/Media/([^/]+/)?Music/Downloads$")
			(regex #"^/private/var/mobile/Media/iTunes_Control/Music/" #"^/private/var/mobile/Media/iTunes_Control/Music$" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/Music/" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/Music$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/Music/" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/Music$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/Music/" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/Music$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/Music/" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/Music$")
			(require-all
				(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")
				(subpath-prefix "${FRONT_USER_HOME}")))))
(allow file-ioctl
	(require-not (entitlement-is-bool-true "b'com.apple.security.ts.addressbook'")))
(allow file-issue-extension)
(allow file-link
	(subpath "/Developer")
	(subpath "/usr/lib")
	(subpath "/System/Cryptexes")
	(subpath "/private/preboot/Cryptexes")
	(subpath "/System/Library")
	(subpath "/System/Developer")
	(require-all
		(extension "b'com.apple.sandbox.executable'")
		(literal))
	(require-all
		(debug-mode)
		(require-any
			(subpath-prefix "${FRONT_USER_HOME}/XcodeBuiltProducts")
			(subpath "/AppleInternal")
			(subpath "/usr/local")
			(subpath "/usr/appleinternal")))
	(require-all
		(extension "b'com.apple.sandbox.application-group'")
		(require-any
			(require-all
				(entitlement-is-bool-true "b'get-task-allow'")
				(require-any
					(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/")
					(require-all
						(literal "/private/var/")
						(subpath-prefix "${FRONT_USER_HOME}")
						(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/"))))
			(require-all
				(entitlement-is-bool-true "b'com.apple.private.amfi.can-execute-cdhash'")
				(require-any
					(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/")
					(require-all
						(literal "/private/var/")
						(subpath-prefix "${FRONT_USER_HOME}")
						(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/"))))))
	(require-all
		(subpath "/Library/Audio/Plug-Ins")
		(signing-identifier "com.apple.audiomxd"))
	(require-all
		(debug-mode)
		(require-any
			(subpath "/AppleInternal")
			(subpath "/usr/local/lib")))
	(require-all
		(subpath-prefix "${FRONT_USER_HOME}/Library/NanoTimeKit/FaceSupport")
		(require-any
			(entitlement-is-bool-true "b'com.apple.private.security.storage.NanoTimeKit.Argon'")
			(entitlement-is-bool-true "b'com.apple.private.security.storage.NanoTimeKit.FaceSupport'")))
	(require-all
		(require-not (entitlement-is-present "b'com.apple.private.oop-jit.loader'"))
		(extension "b'com.apple.sandbox.oopjit'")
		(subpath "/private/var/OOPJit")))
(allow file-mount
	(require-any (literal-prefix "${FRONT_USER_HOME}/Library/DeviceRegistry/${ANY_UUID}/")
(subpath-prefix "${ENTITLEMENT:com.apple.security.exception.nano-paired-storage.subpath.read-only}")
(literal-prefix "NanoPreferencesSync/NanoDomains/${ENTITLEMENT:com.apple.security.exception.nano-preference.read-only}"))
	(subpath-prefix "${FRONT_USER_HOME}/Library/DeviceRegistry/${ANY_UUID}/${ENTITLEMENT:com.apple.security.exception.nano-paired-storage.subpath.read-write}")
	(literal "/private/var/Managed Preferences/mobile/.GlobalPreferences.plist")
	(extension "b'com.apple.sharing.airdrop.readonly'")
	(literal-prefix "${FRONT_USER_HOME}/Library/DeviceRegistry/${ANY_UUID}/NanoPreferencesSync/NanoDomains/${ENTITLEMENT:com.apple.security.exception.nano-preference.read-write}")
	(literal-prefix "${FRONT_USER_HOME}/Library/Preferences/.GlobalPreferences.plist")
	(extension "b'com.apple.quicklook.readonly'")
	(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
	(extension "b'com.apple.app-sandbox.read'")
	(extension "b'com.apple.app-sandbox.read-write'")
	(extension "b'com.apple.sandbox.executable'")
	(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
	(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
	(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
	(require-all
		(require-all (require-not (literal "/System/Library/Caches/apticket.der"))
(require-not (subpath "/System/Library/Caches/com.apple.factorydata"))
(require-not (subpath "/System/Library/Caches/com.apple.kernelcaches")))
		(require-not (subpath "/private/var/hardware/FactoryData"))
		(require-not (literal "/usr/standalone/firmware/apticket.der"))
		(require-any
			(literal "/dev/null")
			(literal "/dev/aes_0")
			(subpath "/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.icloud.findmydevice.managed/Library")
			(literal "/dev/urandom")
			(require-any (subpath "/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.configurationprofiles/Library/ConfigurationProfiles/PublicInfo")
(subpath-prefix "${FRONT_USER_HOME}/Library/ConfigurationProfiles/PublicInfo")
(subpath-prefix "${FRONT_USER_HOME}/Library/UserConfigurationProfiles/PublicInfo"))
			(subpath "/private/var/db/datadetectors/sys")
			(literal "/dev/dtracehelper")
			(literal "/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.mobilegestaltcache/Library/Caches/com.apple.MobileGestalt.plist")
			(literal "/dev/zero")
			(literal "/dev/random")
			(entitlement-is-bool-true "b'com.apple.private.amfi.can-execute-cdhash'")
			(require-any (literal-prefix "${FRONT_USER_HOME}/Library/DeviceRegistry/${ANY_UUID}/")
(subpath-prefix "${ENTITLEMENT:com.apple.security.ts.nano-paired-storage.subpath.read-only}")
(literal-prefix "NanoPreferencesSync/NanoDomains/${ENTITLEMENT:com.apple.security.ts.nano-preference.read-only}"))
			(require-any (literal-prefix "${FRONT_USER_HOME}/Library/DeviceRegistry/${ANY_UUID}/")
(subpath-prefix "${ENTITLEMENT:com.apple.security.ts.nano-paired-storage.subpath.read-write}")
(literal-prefix "NanoPreferencesSync/NanoDomains/${ENTITLEMENT:com.apple.security.ts.nano-preference.read-write}"))
			(entitlement-is-bool-true "b'com.apple.private.amfi.can-execute-cdhash'")
			(require-all
				(entitlement-is-bool-true "b'com.apple.security.network.client'")
				(require-any
					(literal "/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.nsurlstoragedresources/Library/dafsaData.bin")
					(literal "/private/var/db/com.apple.networkextension.tracker-info")
					(literal "/private/var/preferences/com.apple.security.plist")
					(literal "/private/var/preferences/com.apple.NetworkStatistics.plist")
					(literal "/private/var/Managed Preferences/mobile/com.apple.SystemConfiguration.plist")
					(literal "/private/var/preferences/com.apple.networkd.plist")
					(require-all
						(process-attribute is-apple-signed-executable)
						(literal "/private/var/preferences/com.apple.networkextension.uuidcache.plist"))
					(require-all
						(literal "/private/var/preferences/com.apple.networkextension.plist")
						(entitlement-is-present "b'com.apple.private.networkextension.configuration'"))))
			(require-all
				(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'")
				(require-any
					(require-all
						(extension "b'com.apple.librarian.ubiquity-revision'")
						(require-any (subpath-prefix "${HOME}/Library/Application Support/Ubiquity/genstore")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Application Support/Ubiquity/genstore/?")))
					(require-all
						(entitlement-is-bool-true "b'com.apple.private.librarian.container-proxy'")
						(require-any
							(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents/?")
							(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/File Provider Storage/?")
							(subpath-prefix "${HOME}/Library/Mobile Documents")
							(require-all
								(literal "/private/var/")
								(subpath-prefix "${FRONT_USER_HOME}")
								(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$"))))
					(require-all
						(extension "b'com.apple.librarian.ubiquity-container'")
						(require-any
							(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents/?")
							(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/File Provider Storage/?")
							(subpath-prefix "${HOME}/Library/Mobile Documents")
							(require-all
								(literal "/private/var/")
								(subpath-prefix "${FRONT_USER_HOME}")
								(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$"))))))
			(require-all
				(entitlement-is-bool-true "b'com.apple.security.ts.front-user-home-literal.read-only'")
				(literal-prefix "${FRONT_USER_HOME}"))
			(require-all
				(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Application Support/iCloudDrive/[UNSUPPORTED]+/session/r/?")
				(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'")
				(extension "b'com.apple.clouddocs.version'"))
			(require-all
				(entitlement-is-bool-true "b'com.apple.security.ts.render-images'")
				(subpath-prefix "${HOME}/Library/Fonts"))
			(require-all
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Application Support/iCloudDrive/[^/]+/session/r/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Application Support/iCloudDrive/[^/]+/session/r$" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/Library/Application Support/iCloudDrive/[^/]+/session/r/" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/Library/Application Support/iCloudDrive/[^/]+/session/r$" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/Library/Application Support/iCloudDrive/[^/]+/session/r/" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/Library/Application Support/iCloudDrive/[^/]+/session/r$" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Application Support/iCloudDrive/[^/]+/session/r/" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Application Support/iCloudDrive/[^/]+/session/r$")
				(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}")))
			(require-all
				(entitlement-is-present "b'com.apple.security.ts.tmpdir'")
				(require-any (subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.tmpdir}")
(subpath-prefix "${PROCESS_TEMP_DIR}/${ENTITLEMENT:com.apple.security.ts.tmpdir}")))
			(require-all
				(subpath-prefix "${HOME}/Library/Application Support/CloudDocs/session/r")
				(vnode-type REGULAR-FILE))
			(require-all
				(entitlement-is-bool-true "b'com.apple.security.ts.read-any-bundle'")
				(require-any
					(subpath "/private/var/containers/Bundle")
					(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
					(subpath "/Developer/Applications")
					(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
					(subpath "/Applications")))
			(require-all
				(literal "/private/var/preferences/com.apple.networkextension.uuidcache.plist")
				(process-attribute is-apple-signed-executable))
			(require-all
				(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Application Support/CloudDocs/session/r/?")
				(vnode-type REGULAR-FILE))
			(require-all
				(literal "/private/var/preferences/com.apple.networkextension.plist")
				(entitlement-is-present "b'com.apple.private.networkextension.configuration'"))
			(require-all
				(entitlement-is-bool-true "b'com.apple.security.ts.location-services'")
				(subpath-prefix "${FRONT_USER_HOME}/Library/Carrier Bundles/Overlay"))
			(require-all
				(literal "/System/Library/Carrier Bundles/")
				(regex #"^/System/Library/Carrier Bundles//carrier[.]plist$" #"^/System/Library/Carrier Bundles/.+/carrier[.]plist$"))
			(require-all
				(literal "/private/var/db/com.apple.networkextension.tracker-info")
				(entitlement-is-bool-true "b'com.apple.security.network.server'"))
			(require-all
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Library/Carrier Bundles//carrier[.]plist$" #"^/private/var/mobile/Library/Carrier Bundles/.+/carrier[.]plist$" #"^/private/var/euser[0-9]+/Library/Carrier Bundles/.*/carrier[.]plist$" #"^/private/var/[-0-9A-F]+/Library/Carrier Bundles/.*/carrier[.]plist$" #"^/private/var/Users/[^/]+/Library/Carrier Bundles/.*/carrier[.]plist$")
				(subpath-prefix "${FRONT_USER_HOME}"))
			(require-all
				(literal-prefix "${FRONT_USER_HOME}/Library/Preferences/com.apple.carrier.plist")
				(entitlement-is-bool-true "b'com.apple.security.ts.location-services'"))
			(require-all
				(entitlement-is-bool-true "b'com.apple.security.ts.identity-services-receive-file'")
				(subpath-prefix "${FRONT_USER_HOME}/Library/IdentityServices")
				(extension "b'com.apple.identityservices.deliver'"))
			(require-all
				(literal "/private/var/preferences/com.apple.security.plist")
				(require-any
					(entitlement-is-bool-true "b'com.apple.security.ts.lockdown-service'")
					(entitlement-is-bool-true "b'com.apple.security.network.server'")))
			(require-all
				(literal "/private/var/preferences/com.apple.networkd.plist")
				(entitlement-is-bool-true "b'com.apple.security.network.server'"))
			(require-all
				(literal "/private/var/Managed Preferences/mobile/com.apple.SystemConfiguration.plist")
				(entitlement-is-bool-true "b'com.apple.security.network.server'"))
			(require-all
				(entitlement-is-bool-true "b'com.apple.security.ts.location-services'")
				(require-any
					(require-all
						(literal "/private/var/")
						(subpath-prefix "${FRONT_USER_HOME}")
						(regex #"^/private/var/mobile/Library/Carrier Bundles/[.]png$" #"^/private/var/mobile/Library/Carrier Bundles/.+[.]png$" #"^/private/var/euser[0-9]+/Library/Carrier Bundles/.*[.]png$" #"^/private/var/[-0-9A-F]+/Library/Carrier Bundles/.*[.]png$" #"^/private/var/Users/[^/]+/Library/Carrier Bundles/.*[.]png$"))
					(require-all
						(literal "/System/Library/Carrier Bundles/")
						(regex #"^/System/Library/Carrier Bundles/[.]png$" #"^/System/Library/Carrier Bundles/.+[.]png$"))))
			(require-all
				(literal-prefix "${ANY_USER_HOME}/Library/Caches/GeoServices/tguid.bin")
				(require-not (entitlement-is-bool-true "b'com.apple.security.ts.geoservices'")))
			(require-all
				(literal "/private/var/preferences/com.apple.NetworkStatistics.plist")
				(entitlement-is-bool-true "b'com.apple.security.network.server'"))
			(require-all
				(entitlement-is-bool-true "b'com.apple.security.ts.geoservices'")
				(require-any
					(subpath-prefix "${FRONT_USER_HOME}/Library/Caches/GeoServices")
					(subpath "/private/var/containers/Data/System/com.apple.geod")
					(require-all
						(literal "/private/var/")
						(regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/GeoServices$" #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/GeoServices/" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/GeoServices$" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/GeoServices/" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/GeoServices$" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/GeoServices/" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/GeoServices$" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/GeoServices/")
						(subpath-prefix "${FRONT_USER_HOME}"))))
			(require-all
				(extension "b'com.apple.sandbox.container'")
				(entitlement-is-bool-true "b'com.apple.security.ts.daemon-container'"))
			(require-all
				(subpath-prefix "${HOME}/Library/Assets")
				(extension "b'com.apple.assets.read'")
				(require-any
					(entitlement-is-bool-true "b'com.apple.security.ts.asset-access.with-media-playback'")
					(require-all
						(subpath-prefix "${HOME}/Library/Assets")
						(entitlement-is-bool-true "b'com.apple.security.ts.asset-access'"))
					(require-all
						(subpath "/private/var/MobileAsset")
						(entitlement-is-bool-true "b'com.apple.security.ts.asset-access'"))))
			(require-all
				(subpath "/private/var/MobileAsset")
				(extension "b'com.apple.assets.read'")
				(require-any
					(entitlement-is-bool-true "b'com.apple.security.ts.asset-access.with-media-playback'")
					(require-all
						(subpath-prefix "${HOME}/Library/Assets")
						(entitlement-is-bool-true "b'com.apple.security.ts.asset-access'"))
					(require-all
						(subpath "/private/var/MobileAsset")
						(entitlement-is-bool-true "b'com.apple.security.ts.asset-access'"))))
			(require-all
				(entitlement-is-bool-true "b'com.apple.security.ts.addressbook'")
				(subpath-prefix "${HOME}/Library/Fonts"))
			(require-all
				(literal "/private/var/")
				(require-any
					(require-all
						(subpath-prefix "${FRONT_USER_HOME}")
						(require-any
							(require-all
								(signing-identifier "com.apple.nanophoned")
								(require-any
									(regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$")
									(regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/com[.]apple[.]private[.]alloy[.]voicemailsync" #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/nms[.]com[.]apple[.]private[.]alloy[.]voicemailsync" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/(nms[.])?com[.]apple[.]private[.]alloy[.]voicemailsync" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/(nms[.])?com[.]apple[.]private[.]alloy[.]voicemailsync" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/(nms[.])?com[.]apple[.]private[.]alloy[.]voicemailsync")))
							(require-all
								(signing-identifier "com.apple.tursd")
								(require-any
									(regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$")
									(regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/com[.]apple[.]private[.]alloy[.]voicemailsync" #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/nms[.]com[.]apple[.]private[.]alloy[.]voicemailsync" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/(nms[.])?com[.]apple[.]private[.]alloy[.]voicemailsync" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/(nms[.])?com[.]apple[.]private[.]alloy[.]voicemailsync" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/(nms[.])?com[.]apple[.]private[.]alloy[.]voicemailsync")))
							(require-all
								(signing-identifier "com.apple.videocodecd")
								(regex #"^/private/var/mobile/Library/Logs/CrashReporter/videocodecd_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/videocodecd_" #"^/private/var/mobile/Library/Logs/CrashReporter/[.]videocodecd_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/[.]videocodecd_" #"^/private/var/euser[0-9]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])videocodecd_" #"^/private/var/[-0-9A-F]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])videocodecd_" #"^/private/var/Users/[^/]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])videocodecd_"))))
					(require-all
						(regex #"^/private/var/mobile/Media/iTunes_Control/iTunes/Artwork/" #"^/private/var/mobile/Media/iTunes_Control/iTunes/Artwork$" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/Artwork/" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/Artwork$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/Artwork/" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/Artwork$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/Artwork/" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/Artwork$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/Artwork/" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/Artwork$")
						(subpath-prefix "${HOME}")
						(signing-identifier "com.apple.mediaartworkd"))
					(require-all
						(subpath-prefix "${HOME}")
						(regex #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal")
						(signing-identifier "com.apple.siriknowledged")
						(extension "b'com.apple.tcc.kTCCServiceMediaLibrary'"))
					(require-all
						(vnode-type DIRECTORY)
						(regex #"^/private/var/mobile/Media/iTunes_Control/iTunes$" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes$")
						(subpath-prefix "${HOME}"))))
			(require-all
				(entitlement-is-bool-true "b'com.apple.Contacts.database-allow'")
				(entitlement-is-bool-true "b'com.apple.security.ts.addressbook'")
				(extension "b'com.apple.tcc.kTCCServiceAddressBook'")
				(require-any
					(subpath-prefix "${HOME}/Library/AddressBook/Delegates")
					(subpath-prefix "${HOME}/Library/AddressBook")
					(literal-prefix "${HOME}/Library/Preferences/com.apple.mobilephone.speeddial.plist")))
			(require-all
				(signing-identifier "com.apple.wapic")
				(literal))
			(require-all
				(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter")
				(signing-identifier "com.apple.videocodecd"))
			(require-all
				(subpath "/private/var/containers/Bundle")
				(require-any
					(signing-identifier "com.apple.managedappdistributiond")
					(signing-identifier "com.apple.storekitd")))
			(require-all
				(subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/TransportLogs")
				(signing-identifier "com.apple.tursd"))
			(require-all
				(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
				(require-any
					(signing-identifier "com.apple.managedappdistributiond")
					(signing-identifier "com.apple.storekitd")))
			(require-all
				(subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/DiagnosticLogs/CompanionSync/TransportLogs")
				(signing-identifier "com.apple.tursd"))
			(require-all
				(require-any (literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db")
(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db-shm")
(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db-wal")
(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db-journal"))
				(signing-identifier "com.apple.tursd"))
			(require-all
				(subpath "/Developer/Applications")
				(require-any
					(signing-identifier "com.apple.managedappdistributiond")
					(signing-identifier "com.apple.storekitd")))
			(require-all
				(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/StoreKit/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/StoreKit$" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/StoreKit/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/StoreKit$" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/(Library/Caches/)?StoreKit/" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/(Library/Caches/)?StoreKit$" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/(Library/Caches/)?StoreKit/" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/(Library/Caches/)?StoreKit$" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/(Library/Caches/)?StoreKit/" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/(Library/Caches/)?StoreKit$")
				(literal "/private/var/")
				(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}")))
			(require-all
				(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync")
				(signing-identifier "com.apple.tursd"))
			(require-all
				(literal "/private/var/PersonaVolumes/")
				(regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/StoreKit/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/StoreKit$" #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Caches/StoreKit/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Caches/StoreKit$")
				(require-any
					(signing-identifier "com.apple.managedappdistributiond")
					(signing-identifier "com.apple.storekitd")))
			(require-all
				(subpath "/Applications")
				(require-any
					(signing-identifier "com.apple.managedappdistributiond")
					(signing-identifier "com.apple.storekitd")))
			(require-all
				(signing-identifier "com.apple.storagedatad")
				(require-any
					(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Safari/Downloads/Downloads[UNSUPPORTED]plist")
					(require-all
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Safari/Downloads/Downloads.plist")
						(literal "/private/var/")
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}")))))
			(require-all
				(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
				(require-any
					(signing-identifier "com.apple.managedappdistributiond")
					(signing-identifier "com.apple.storekitd")))
			(require-all
				(require-any (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/TapToRadar/Attachments/?")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Safari/WebExtensions/Extensions[UNSUPPORTED]plist")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Preferences/com[UNSUPPORTED]apple[UNSUPPORTED]mobilesafari[UNSUPPORTED]plist"))
				(signing-identifier "com.apple.storagedatad"))
			(require-all
				(literal "/private/var/")
				(require-any
					(require-all
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Preferences/com.apple.mobilesafari.plist" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/Library/Preferences/com.apple.mobilesafari.plist" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/Library/Preferences/com.apple.mobilesafari.plist" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Preferences/com.apple.mobilesafari.plist"))
					(require-all
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Safari/WebExtensions/Extensions.plist" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/Library/Safari/WebExtensions/Extensions.plist" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/Library/Safari/WebExtensions/Extensions.plist" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Safari/WebExtensions/Extensions.plist")
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}")))
					(require-all
						(subpath-prefix "${FRONT_USER_HOME}")
						(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/TapToRadar/Attachments/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/TapToRadar/Attachments$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/TapToRadar/Attachments/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/TapToRadar/Attachments$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/TapToRadar/Attachments/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/TapToRadar/Attachments$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/TapToRadar/Attachments/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/TapToRadar/Attachments$"))))
			(require-all
				(vnode-type DIRECTORY)
				(require-any
					(require-all
						(require-any (subpath-prefix "${FRONT_USER_HOME}/Media/iTunes_Control")
(subpath-prefix "${FRONT_USER_HOME}/Media/Books")
(subpath-prefix "${FRONT_USER_HOME}/Media/Downloads")
(subpath-prefix "${FRONT_USER_HOME}/Media/Recordings")
(subpath-prefix "${FRONT_USER_HOME}/Library/Mail")
(subpath-prefix "${FRONT_USER_HOME}/Library/Passes")
(subpath-prefix "${FRONT_USER_HOME}/Library/Health")
(subpath-prefix "${FRONT_USER_HOME}/Library/Contacts")
(subpath-prefix "${FRONT_USER_HOME}/Library/AddressBook")
(subpath-prefix "${FRONT_USER_HOME}/Library/SMS")
(subpath-prefix "${FRONT_USER_HOME}/Library/Safari")
(subpath-prefix "${FRONT_USER_HOME}/Library/Reminders")
(subpath-prefix "${FRONT_USER_HOME}/Library/Recordings")
(subpath-prefix "${FRONT_USER_HOME}/Library/NanoPhotos")
(subpath-prefix "${FRONT_USER_HOME}/Library/NanoMailKit"))
						(signing-identifier "com.apple.storagedatad"))
					(require-all
						(require-any (subpath-prefix "${FRONT_USER_HOME}/Library/Voicemail")
(subpath-prefix "${FRONT_USER_HOME}/Library/Notes"))
						(signing-identifier "com.apple.storagedatad"))
					(require-all
						(subpath "/private/var/wireless/Library/Logs")
						(signing-identifier "com.apple.storagedatad"))
					(require-all
						(subpath "/private/var/logs")
						(signing-identifier "com.apple.storagedatad"))
					(require-all
						(subpath "/private/var/log")
						(signing-identifier "com.apple.storagedatad"))
					(require-all
						(subpath-prefix "${FRONT_USER_HOME}/Library/Logs")
						(signing-identifier "com.apple.storagedatad"))
					(require-all
						(subpath-prefix "${PROCESS_TEMP_DIR}/powerlog")
						(signing-identifier "com.apple.storagedatad"))
					(require-all
						(subpath "/private/var/tmp/powerlog")
						(signing-identifier "com.apple.storagedatad"))
					(require-all
						(literal "/private/var/")
						(require-any
							(require-all
								(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}")))
							(require-all
								(subpath-prefix "${FRONT_USER_HOME}")
								(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+"))
							(require-all
								(literal "/private/var/PersonaVolumes/")
								(require-any
									(regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+")
									(regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+")))))))
			(require-all
				(signing-identifier "com.apple.nanophoned")
				(require-any
					(subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/TransportLogs")
					(require-any (literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db")
(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db-shm")
(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db-wal")
(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db-journal"))
					(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync")
					(subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/DiagnosticLogs/CompanionSync/TransportLogs")))
			(require-all
				(signing-identifier "com.apple.mDNSResponderHelper")
				(literal))
			(require-all
				(signing-identifier "com.apple.privacyaccountingctl")
				(literal "/dev/ttys")
				(regex #"^/dev/ttys[0-9]" #"^/dev/ttys[0-9]+"))
			(require-all
				(extension "b'com.apple.sandbox.container-proxy'")
				(require-any
					(require-all
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+")
						(literal "/private/var/")
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}")))
					(require-all
						(literal "/private/var/PersonaVolumes/")
						(regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+")
						(signing-identifier "com.apple.CoreDevice.dtfileserviced"))))
			(require-all
				(extension "b'com.apple.sandbox.container'")
				(require-any
					(require-all
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+")
						(literal "/private/var/")
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}")))
					(require-all
						(literal "/private/var/PersonaVolumes/")
						(regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+")
						(signing-identifier "com.apple.CoreDevice.dtfilesandboxd"))))
			(require-all
				(signing-identifier "com.apple.cloudpaird")
				(subpath-prefix "${PROCESS_TEMP_DIR}/com.apple.cloudpaird"))
			(require-all
				(require-any (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com[UNSUPPORTED]apple[UNSUPPORTED]chrono/?"))
				(signing-identifier "com.apple.chronod"))
			(require-all
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com.apple.chrono/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com.apple.chrono$" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/SystemData/com.apple.chrono/" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/SystemData/com.apple.chrono$" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/SystemData/com.apple.chrono/" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/SystemData/com.apple.chrono$" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/SystemData/com.apple.chrono/" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/SystemData/com.apple.chrono$")
				(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}")))
			(require-all
				(debug-mode)
				(literal "/mach.")
				(process-name "/System/Library/PrivateFrameworks/DVTInstrumentsFoundation.framework/DTServiceHub"))
			(require-all
				(extension "b'com.apple.sandbox.container'")
				(require-any
					(require-all
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Documents/Podcasts.+[.]plist$" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/Documents/Podcasts.+[.]plist$" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/Documents/Podcasts.+[.]plist$" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/Documents/Podcasts.+[.]plist$")
						(literal "/private/var/")
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}")))
					(require-all
						(literal "/private/var/PersonaVolumes/")
						(regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/Documents/Podcasts.+[.]plist$")
						(signing-identifier "com.apple.siriknowledged"))))
			(require-all
				(vnode-type REGULAR-FILE)
				(subpath-prefix "${HOME}/Library/Caches/com.apple.nsurlsessiond/Downloads/com.apple.anomalydetectiond"))
			(require-all
				(vnode-type DIRECTORY)
				(subpath-prefix "${HOME}/Library/Caches/com.apple.nsurlsessiond/Downloads/com.apple.anomalydetectiond"))
			(require-all
				(subpath-prefix "${HOME}/Library/Caches/com.apple.anomalydetectiond")
				(signing-identifier "com.apple.anomalydetectiond"))
			(require-all
				(require-any (subpath "/private/var/tmp/com.apple.announced")
(subpath-prefix "${PROCESS_TEMP_DIR}/com.apple.announced"))
				(signing-identifier "com.apple.announced"))
			(require-all
				(require-any (subpath-prefix "${FRONT_USER_HOME}/Library/Logs/gpsd")
(subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/gpsd"))
				(signing-identifier "com.apple.gpsd"))
			(require-all
				(require-any (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Caches/")
(regex #"com[UNSUPPORTED]apple[UNSUPPORTED]metalassetupgrader/?")
(regex #"[UNSUPPORTED]+/com[UNSUPPORTED]apple[UNSUPPORTED]metal/?"))
				(signing-identifier "com.apple.MTLAssetUpgraderD"))
			(require-all
				(literal "/private/var/")
				(require-any
					(require-all
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader$" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader$" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader$" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader$"))
					(require-all
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal$")
						(require-any
							(subpath-prefix "${FRONT_USER_HOME}")
							(subpath-prefix "${HOME}")))
					(require-all
						(regex #"^/private/var/mobile/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/mobile/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/euser[0-9]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/euser[0-9]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/[-0-9A-F]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/[-0-9A-F]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/Users/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/Users/[^/]+/Library/Caches/[^/]+/com.apple.metal$")
						(subpath-prefix "${HOME}"))))
			(require-all
				(signing-identifier "com.apple.dmd")
				(require-any
					(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/StoreKit/?")
					(require-all
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/StoreKit/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/StoreKit$" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/StoreKit/" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/StoreKit$" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/StoreKit/" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/StoreKit$" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/StoreKit/" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/StoreKit$")
						(literal "/private/var/")
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}")))))
			(require-all
				(extension "b'com.apple.sandbox.container'")
				(require-any
					(require-all
						(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Preferences/[^/]+[.]plist$" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/Library/Preferences/[^/]+[.]plist$" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/Library/Preferences/[^/]+[.]plist$" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Preferences/[^/]+[.]plist$")
						(literal "/private/var/")
						(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}")))
					(require-all
						(literal "/private/var/PersonaVolumes/")
						(regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Preferences/[^/]+[.]plist$")
						(signing-identifier "com.apple.dmd"))))
			(require-all
				(extension "b'com.apple.sandbox.application-group'")
				(require-any
					(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/.com.apple."))
					(require-all
						(literal "/private/var/")
						(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]")
						(require-not (subpath-prefix "${FRONT_USER_HOME}")))))
			(require-all
				(signing-identifier "com.apple.mediaplaybackd")
				(require-any
					(require-any (subpath-prefix "${HOME}/Media/PhotoData/CPLAssets")
(subpath-prefix "${HOME}/Media/PhotoData/Sync")
(subpath-prefix "${HOME}/Media/PhotoData/Mutations"))
					(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter")
					(require-any (subpath-prefix "${HOME}/Media/PhotoData/OutboundSharingTmp")
(subpath-prefix "${HOME}/Media/PhotoData/Metadata/DCIM")
(subpath-prefix "${HOME}/Media/PhotoData/Metadata/PhotoData/CPLAssets")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
					(extension "b'com.apple.mediaserverd.read'")
					(extension "b'com.apple.mediaserverd.read-write'")
					(subpath-prefix "${HOME}/Media/PhotoData/PhotoCloudSharingData")
					(subpath-prefix "${HOME}/Media/Podcasts")
					(subpath-prefix "${HOME}/Media/PhotoStreamsData")
					(subpath-prefix "${HOME}/Media/Deferred")
					(subpath-prefix "${HOME}/Media/DCIM")
					(require-all
						(literal "/private/var/")
						(require-any
							(require-all
								(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")
								(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}")))
							(require-all
								(subpath-prefix "${FRONT_USER_HOME}")
								(regex #"^/private/var/mobile/Library/Logs/CrashReporter/mediaplaybackd_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/mediaplaybackd_" #"^/private/var/mobile/Library/Logs/CrashReporter/[.]mediaplaybackd_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/[.]mediaplaybackd_" #"^/private/var/euser[0-9]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])mediaplaybackd_" #"^/private/var/[-0-9A-F]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])mediaplaybackd_" #"^/private/var/Users/[^/]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])mediaplaybackd_"))
							(require-all
								(subpath-prefix "${HOME}")
								(require-any
									(regex #"^/private/var/mobile/Media/CloudAssets/" #"^/private/var/mobile/Media/CloudAssets$" #"^/private/var/mobile/Media/[^/]+/CloudAssets/" #"^/private/var/mobile/Media/[^/]+/CloudAssets$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?CloudAssets/" #"^/private/var/euser[0-9]+/Media/([^/]+/)?CloudAssets$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?CloudAssets/" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?CloudAssets$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?CloudAssets/" #"^/private/var/Users/[^/]+/Media/([^/]+/)?CloudAssets$")
									(regex #"^/private/var/mobile/Media/Music/Cache_LoFi/" #"^/private/var/mobile/Media/Music/Cache_LoFi$" #"^/private/var/mobile/Media/[^/]+/Music/Cache_LoFi/" #"^/private/var/mobile/Media/[^/]+/Music/Cache_LoFi$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?Music/Cache_LoFi/" #"^/private/var/euser[0-9]+/Media/([^/]+/)?Music/Cache_LoFi$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?Music/Cache_LoFi/" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?Music/Cache_LoFi$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?Music/Cache_LoFi/" #"^/private/var/Users/[^/]+/Media/([^/]+/)?Music/Cache_LoFi$")
									(regex #"^/private/var/mobile/Media/Music/iTunes/" #"^/private/var/mobile/Media/Music/iTunes$" #"^/private/var/mobile/Media/[^/]+/Music/iTunes/" #"^/private/var/mobile/Media/[^/]+/Music/iTunes$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?Music/iTunes/" #"^/private/var/euser[0-9]+/Media/([^/]+/)?Music/iTunes$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?Music/iTunes/" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?Music/iTunes$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?Music/iTunes/" #"^/private/var/Users/[^/]+/Media/([^/]+/)?Music/iTunes$")
									(regex #"^/private/var/mobile/Media/iTunes_Control/Ringtones/" #"^/private/var/mobile/Media/iTunes_Control/Ringtones$" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/Ringtones/" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/Ringtones$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/Ringtones/" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/Ringtones$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/Ringtones/" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/Ringtones$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/Ringtones/" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/Ringtones$")
									(regex #"^/private/var/mobile/Media/Purchases/" #"^/private/var/mobile/Media/Purchases$" #"^/private/var/mobile/Media/[^/]+/Purchases/" #"^/private/var/mobile/Media/[^/]+/Purchases$" #"^/private/var/mobile/Media/ManagedPurchases/" #"^/private/var/mobile/Media/ManagedPurchases$" #"^/private/var/mobile/Media/[^/]+/ManagedPurchases/" #"^/private/var/mobile/Media/[^/]+/ManagedPurchases$" #"^/private/var/euser[0-9]+/Media/((([^/]+/)?|Managed)|[^/]+/Managed)Purchases/" #"^/private/var/euser[0-9]+/Media/((([^/]+/)?|Managed)|[^/]+/Managed)Purchases$" #"^/private/var/[-0-9A-F]+/Media/((([^/]+/)?|Managed)|[^/]+/Managed)Purchases/" #"^/private/var/[-0-9A-F]+/Media/((([^/]+/)?|Managed)|[^/]+/Managed)Purchases$" #"^/private/var/Users/[^/]+/Media/((([^/]+/)?|Managed)|[^/]+/Managed)Purchases/" #"^/private/var/Users/[^/]+/Media/((([^/]+/)?|Managed)|[^/]+/Managed)Purchases$")
									(regex #"^/private/var/mobile/Media/LoFiCloudAssets/" #"^/private/var/mobile/Media/LoFiCloudAssets$" #"^/private/var/mobile/Media/[^/]+/LoFiCloudAssets/" #"^/private/var/mobile/Media/[^/]+/LoFiCloudAssets$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?LoFiCloudAssets/" #"^/private/var/euser[0-9]+/Media/([^/]+/)?LoFiCloudAssets$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?LoFiCloudAssets/" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?LoFiCloudAssets$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?LoFiCloudAssets/" #"^/private/var/Users/[^/]+/Media/([^/]+/)?LoFiCloudAssets$")
									(regex #"^/private/var/mobile/Media/Music/Cache/" #"^/private/var/mobile/Media/Music/Cache$" #"^/private/var/mobile/Media/[^/]+/Music/Cache/" #"^/private/var/mobile/Media/[^/]+/Music/Cache$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?Music/Cache/" #"^/private/var/euser[0-9]+/Media/([^/]+/)?Music/Cache$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?Music/Cache/" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?Music/Cache$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?Music/Cache/" #"^/private/var/Users/[^/]+/Media/([^/]+/)?Music/Cache$")
									(regex #"^/private/var/mobile/Media/Downloads/" #"^/private/var/mobile/Media/Downloads$" #"^/private/var/mobile/Media/[^/]+/Downloads/" #"^/private/var/mobile/Media/[^/]+/Downloads$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?Downloads/" #"^/private/var/euser[0-9]+/Media/([^/]+/)?Downloads$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?Downloads/" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?Downloads$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?Downloads/" #"^/private/var/Users/[^/]+/Media/([^/]+/)?Downloads$")
									(regex #"^/private/var/mobile/Media/Music/Downloads/" #"^/private/var/mobile/Media/Music/Downloads$" #"^/private/var/mobile/Media/[^/]+/Music/Downloads/" #"^/private/var/mobile/Media/[^/]+/Music/Downloads$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?Music/Downloads/" #"^/private/var/euser[0-9]+/Media/([^/]+/)?Music/Downloads$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?Music/Downloads/" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?Music/Downloads$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?Music/Downloads/" #"^/private/var/Users/[^/]+/Media/([^/]+/)?Music/Downloads$")
									(regex #"^/private/var/mobile/Media/iTunes_Control/Music/" #"^/private/var/mobile/Media/iTunes_Control/Music$" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/Music/" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/Music$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/Music/" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/Music$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/Music/" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/Music$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/Music/" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/Music$")))))))
			(require-all
				(debug-mode)
				(signing-identifier "com.apple.audiomxd")
				(literal)
				(require-any
					(subpath-prefix "${FRONT_USER_HOME}/tmp")
					(subpath "/private/var/tmp")))
			(require-all
				(debug-mode)
				(signing-identifier "com.apple.audiomxd")
				(literal)
				(require-any
					(subpath-prefix "${FRONT_USER_HOME}/tmp")
					(subpath "/private/var/tmp")))
			(require-all
				(signing-identifier "com.apple.momentsd")
				(require-any
					(subpath-prefix "${HOME}/Library/com.apple.momentsd")
					(subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd")
					(require-all
						(vnode-type REGULAR-FILE)
						(subpath-prefix "${HOME}/Library/Caches/com.apple.nsurlsessiond/Downloads/com.apple.momentsd"))
					(require-all
						(vnode-type DIRECTORY)
						(subpath-prefix "${HOME}/Library/Caches/com.apple.nsurlsessiond/Downloads/com.apple.momentsd"))))
			(require-all
				(signing-identifier "com.apple.security.KeychainDBMover")
				(subpath-prefix "${FRONT_USER_HOME}/Library/Keychains"))
			(require-all
				(signing-identifier "com.apple.geoanalyticsd")
				(require-any
					(subpath-prefix "${HOME}/Library/Caches/com.apple.geoanalyticsd")
					(require-all
						(vnode-type REGULAR-FILE)
						(subpath-prefix "${HOME}/Library/Caches/com.apple.nsurlsessiond/Downloads/com.apple.geoanalyticsd"))
					(require-all
						(vnode-type DIRECTORY)
						(subpath-prefix "${HOME}/Library/Caches/com.apple.nsurlsessiond/Downloads/com.apple.geoanalyticsd"))))
			(require-all
				(signing-identifier "com.apple.linkd")
				(require-any
					(subpath "/private/var/containers/Bundle")
					(require-any (subpath "/AppleInternal/Applications")
(subpath "/System/Developer/Applications")
(subpath "/private/var/personalized_debug/Applications")
(subpath "/private/var/personalized_automation/Applications")
(regex #"/private/var/personalized_factory/[UNSUPPORTED]+/Applications/?")
(regex #"/private/var/factory_mount/[UNSUPPORTED]+/Applications/?"))
					(subpath "/Developer/Applications")
					(subpath-prefix "${FRONT_USER_HOME}/Containers/Bundle")
					(subpath "/Applications")))
			(require-all
				(extension "b'com.apple.sandbox.application-group'")
				(require-any
					(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/")
					(require-all
						(literal "/private/var/")
						(require-any
							(require-all
								(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/")
								(subpath-prefix "${FRONT_USER_HOME}"))
							(require-all
								(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+$")
								(subpath-prefix "${FRONT_USER_HOME}"))
							(require-all
								(literal "/private/var/PersonaVolumes/")
								(regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+$"))))))
			(require-all
				(signing-identifier "com.apple.audiomxd")
				(require-any
					(extension "b'com.apple.mediaserverd.read-write'")
					(extension "b'com.apple.mediaserverd.read'")))
			(require-all
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Library/Logs/CrashReporter/audiomxd_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/audiomxd_" #"^/private/var/mobile/Library/Logs/CrashReporter/[.]audiomxd_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/[.]audiomxd_" #"^/private/var/euser[0-9]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])audiomxd_" #"^/private/var/[-0-9A-F]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])audiomxd_" #"^/private/var/Users/[^/]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])audiomxd_")
				(subpath-prefix "${FRONT_USER_HOME}"))
			(require-all
				(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter")
				(signing-identifier "com.apple.audiomxd"))
			(require-all
				(uid 0)
				(literal "/private/etc/master.passwd"))
			(require-all
				(entitlement-is-bool-true "b'com.apple.coreduetd.people'")
				(require-any
					(require-any (literal-prefix "${HOME}/Library/CoreDuet/People")
(literal-prefix "${HOME}/Library/CoreDuet/People/interactionC.db")
(literal-prefix "${HOME}/Library/CoreDuet/People/interactionC.db-wal")
(literal-prefix "${HOME}/Library/CoreDuet/People/interactionC.db-journal"))
					(literal-prefix "${HOME}/Library/CoreDuet/People/interactionC.db-shm")))
			(require-all
				(entitlement-is-bool-true "b'com.apple.security.system-container'")
				(extension "b'com.apple.sandbox.system-container'")
				(regex #"/private/var/containers/Data/System/[UNSUPPORTED]+/.com.apple.")
				(require-any
					(regex #"/private/var/containers/Data/System/[UNSUPPORTED]+/")
					(require-all
						(literal "/private/var/containers/Data/System/")
						(regex #"^/private/var/containers/Data/System/[^/]+/" #"^/private/var/containers/Data/System/[^/]+$"))))
			(require-all
				(regex #"/private/var/containers/Shared/SystemGroup/[UNSUPPORTED]+/.com.apple.")
				(extension "b'com.apple.sandbox.system-group'")
				(entitlement-is-present "b'com.apple.security.system-groups'")
				(entitlement-is-present "b'com.apple.security.system-group-containers'"))
			(require-all
				(extension "b'com.apple.sandbox.system-group'")
				(require-any
					(require-all
						(entitlement-is-present "b'com.apple.security.system-groups'")
						(require-any
							(regex #"/private/var/containers/Shared/SystemGroup/[UNSUPPORTED]+/")
							(require-all
								(literal "/private/var/containers/Shared/SystemGroup/")
								(regex #"^/private/var/containers/Shared/SystemGroup/[^/]+/" #"^/private/var/containers/Shared/SystemGroup/[^/]+$"))))
					(require-all
						(entitlement-is-present "b'com.apple.security.system-group-containers'")
						(require-any
							(regex #"/private/var/containers/Shared/SystemGroup/[UNSUPPORTED]+/")
							(require-all
								(literal "/private/var/containers/Shared/SystemGroup/")
								(regex #"^/private/var/containers/Shared/SystemGroup/[^/]+/" #"^/private/var/containers/Shared/SystemGroup/[^/]+$"))))))
			(require-all
				(entitlement-is-bool-true "b'com.apple.private.logging.diagnostic'")
				(extension "b'com.apple.logd.read-only'")
				(require-any
					(require-any (subpath "/private/var/userdata/diagnostics")
(subpath "/private/var/db/timesync"))
					(require-any (subpath "/private/var/db/diagnostics")
(subpath "/private/var/db/uuidtext"))))
			(require-all
				(vnode-type BLOCK-DEVICE)
				(vnode-type CHARACTER-DEVICE)
				(require-any
					(literal "/private")
					(subpath "/Developer")
					(subpath "/private/var/preferences/Logging")
					(literal "/private/preboot/cryptex1/current/RestoreVersion.plist")
					(subpath "/System/Library/PrivateFrameworks")
					(require-any (literal "/private/var/db/eligibilityd/eligibility.plist")
(literal-prefix "${FRONT_USER_HOME}/Library/Application Support/com.apple.palette.green.plist"))
					(literal "/private/etc/passwd")
					(subpath "/usr/lib")
					(subpath "/private/var/db/timezone")
					(subpath "/Library/RegionFeatures")
					(literal "/System")
					(literal "/private/etc/services")
					(require-any (literal "/private/etc/group")
(literal "/private/etc/protocols"))
					(subpath "/System/Library/Frameworks")
					(literal "/private/var/db/DarwinDirectory/local/recordStore.data")
					(subpath "/System/Cryptexes")
					(literal "/private/preboot/cryptex1/current/SystemVersion.plist")
					(literal "/private/etc/hosts")
					(subpath "/private/preboot/Cryptexes")
					(literal-prefix "${FRONT_USER_HOME}/Library/Application Support/com.apple.palette.green.bin")
					(literal "/")
					(subpath "/usr/share")
					(literal "/private/etc/fstab")
					(literal "/private/preboot")
					(subpath "/System/Library")
					(subpath "/System/Developer")
					(subpath "/private/var/MobileAsset/PreinstalledAssetsV2/InstallWithOs")
					(require-all
						(process-attribute is-apple-signed-executable)
						(require-any
							(subpath "/usr/libexec")
							(require-any (literal "/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.configurationprofiles/Library/ConfigurationProfiles/CloudConfigurationDetails.plist")
(literal-prefix "${FRONT_USER_HOME}/Library/ConfigurationProfiles/CloudConfigurationDetails.plist")
(literal-prefix "${FRONT_USER_HOME}/Library/ConfigurationProfiles/CloudConfigurationSetAsideDetails.plist")
(literal-prefix "${FRONT_USER_HOME}/Library/UserConfigurationProfiles/CloudConfigurationDetails.plist")
(literal-prefix "${FRONT_USER_HOME}/Library/UserConfigurationProfiles/CloudConfigurationSetAsideDetails.plist"))
							(literal "/private/var/preferences/SystemConfiguration/preferences.plist")
							(literal "/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.configurationprofiles/Library/ConfigurationProfiles/CloudConfigurationSetAsideDetails.plist")
							(require-all
								(subpath "/usr/local/libexec")
								(debug-mode))))
					(require-all
						(debug-mode)
						(subpath-prefix "${FRONT_USER_HOME}/XcodeBuiltProducts"))
					(require-all
						(subpath "/usr/local")
						(require-any
							(debug-mode)
							(require-all
								(debug-mode)
								(require-any
									(subpath "/AppleInternal")
									(subpath "/usr/local/lib")))))
					(require-all
						(subpath "/AppleInternal")
						(require-any
							(debug-mode)
							(require-all
								(debug-mode)
								(require-any
									(subpath "/AppleInternal")
									(subpath "/usr/local/lib")))))
					(require-all
						(subpath "/usr/appleinternal")
						(require-any
							(debug-mode)
							(require-all
								(debug-mode)
								(require-any
									(subpath "/AppleInternal")
									(subpath "/usr/local/lib")))))
					(require-all
						(subpath-prefix "${FRONT_USER_HOME}/Library/NanoTimeKit/FaceSupport")
						(require-any
							(entitlement-is-bool-true "b'com.apple.private.security.storage.NanoTimeKit.Argon'")
							(entitlement-is-bool-true "b'com.apple.private.security.storage.NanoTimeKit.FaceSupport'")))
					(require-all
						(entitlement-is-present "b'com.apple.private.oop-jit.loader'")
						(subpath "/private/var/OOPJit")
						(extension "b'com.apple.sandbox.oopjit'")))))))
(allow file-mount-update
	(require-all
		(literal)
		(require-not (extension "b'com.apple.sandbox.executable'")))
	(require-all
		(vnode-type REGULAR-FILE)
		(require-any
			(require-all
				(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging")
				(extension "b'com.apple.revisiond.staging'")
				(require-any
					(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'")
					(entitlement-is-bool-true "b'com.apple.security.ts.revisiond-client'")))
			(require-all
				(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/[UNSUPPORTED]DocumentRevisions-V100/staging/?"))
				(extension "b'com.apple.revisiond.staging'")
				(require-any
					(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'")
					(entitlement-is-bool-true "b'com.apple.security.ts.revisiond-client'")))
			(require-all
				(require-any (subpath "/private/var/.DocumentRevisions-V100/PerUID")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/PerUID/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/PerUID"))
				(extension "b'com.apple.revisiond.revision'")
				(require-any
					(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'")
					(entitlement-is-bool-true "b'com.apple.security.ts.revisiond-client'")))))
	(require-all
		(vnode-type DIRECTORY)
		(require-any
			(require-all
				(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging")
				(extension "b'com.apple.revisiond.staging'")
				(require-any
					(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'")
					(entitlement-is-bool-true "b'com.apple.security.ts.revisiond-client'")))
			(require-all
				(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/[UNSUPPORTED]DocumentRevisions-V100/staging/?"))
				(extension "b'com.apple.revisiond.staging'")
				(require-any
					(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'")
					(entitlement-is-bool-true "b'com.apple.security.ts.revisiond-client'")))
			(require-all
				(require-any (subpath "/private/var/.DocumentRevisions-V100/PerUID")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/PerUID/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/PerUID"))
				(extension "b'com.apple.revisiond.revision'")
				(require-any
					(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'")
					(entitlement-is-bool-true "b'com.apple.security.ts.revisiond-client'")))))
	(require-all
		(vnode-type SYMLINK)
		(require-any
			(require-all
				(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging")
				(extension "b'com.apple.revisiond.staging'")
				(require-any
					(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'")
					(entitlement-is-bool-true "b'com.apple.security.ts.revisiond-client'")))
			(require-all
				(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/[UNSUPPORTED]DocumentRevisions-V100/staging/?"))
				(extension "b'com.apple.revisiond.staging'")
				(require-any
					(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'")
					(entitlement-is-bool-true "b'com.apple.security.ts.revisiond-client'")))
			(require-all
				(require-any (subpath "/private/var/.DocumentRevisions-V100/PerUID")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/PerUID/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/PerUID"))
				(extension "b'com.apple.revisiond.revision'")
				(require-any
					(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'")
					(entitlement-is-bool-true "b'com.apple.security.ts.revisiond-client'"))))))
(allow file-read*
	(vnode-type SYMLINK)
	(literal-prefix "${HOME}")
	(literal-prefix "${HOME}/Library/Preferences")
	(extension "b'com.apple.quicklook.readonly'")
	(extension "b'com.apple.security.exception.files.home-relative-path.read-only'")
	(extension "b'com.apple.app-sandbox.read'")
	(extension "b'com.apple.app-sandbox.read-write'")
	(extension "b'com.apple.security.exception.files.absolute-path.read-only'")
	(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
	(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
	(extension "b'com.apple.sharing.airdrop.readonly'")
	(literal-prefix "${HOME}/Library/Caches/powerlog.launchd")
	(literal "/private/var/run/syslog")
	(entitlement-is-bool-true "b'com.apple.private.amfi.can-execute-cdhash'")
	(require-all
		(process-attribute is-apple-signed-executable)
		(require-any
			(literal-prefix "${FRONT_USER_HOME}/Library/DeviceRegistry")
			(require-all
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+$" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+$" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+$" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+$")
				(subpath-prefix "${FRONT_USER_HOME}"))))
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'")
		(require-any
			(literal-prefix "${HOME}/Library/Mobile Documents")
			(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents")
			(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library")
			(literal-prefix "${HOME}/Library")))
	(require-all
		(vnode-type DIRECTORY)
		(require-any
			(require-all
				(literal-prefix "${HOME}/Library/Mobile Documents")
				(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'"))
			(require-all
				(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents")
				(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'"))
			(require-all
				(extension "b'com.apple.revisiond.revision'")
				(require-any (subpath "/private/var/.DocumentRevisions-V100/PerUID")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/PerUID/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/PerUID")))
			(require-all
				(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'")
				(require-any
					(require-all
						(entitlement-is-bool-true "b'com.apple.private.librarian.container-proxy'")
						(require-any
							(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents/?")
							(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/File Provider Storage/?")
							(subpath-prefix "${HOME}/Library/Mobile Documents")
							(require-all
								(literal "/private/var/")
								(subpath-prefix "${FRONT_USER_HOME}")
								(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$"))))
					(require-all
						(extension "b'com.apple.librarian.ubiquity-container'")
						(require-any
							(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents/?")
							(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/File Provider Storage/?")
							(subpath-prefix "${HOME}/Library/Mobile Documents")
							(require-all
								(literal "/private/var/")
								(subpath-prefix "${FRONT_USER_HOME}")
								(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$"))))))))
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'")
		(require-any
			(literal-prefix "${HOME}/Library/Mobile Documents")
			(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents")
			(require-all
				(entitlement-is-bool-true "b'com.apple.private.librarian.container-proxy'")
				(require-any
					(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents/?")
					(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/File Provider Storage/?")
					(subpath-prefix "${HOME}/Library/Mobile Documents")
					(require-all
						(literal "/private/var/")
						(subpath-prefix "${FRONT_USER_HOME}")
						(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$"))))
			(require-all
				(extension "b'com.apple.librarian.ubiquity-container'")
				(require-any
					(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents/?")
					(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/File Provider Storage/?")
					(subpath-prefix "${HOME}/Library/Mobile Documents")
					(require-all
						(literal "/private/var/")
						(subpath-prefix "${FRONT_USER_HOME}")
						(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$"))))))
	(require-all
		(vnode-type REGULAR-FILE)
		(require-any
			(require-all
				(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'")
				(extension "b'com.apple.revisiond.staging'")
				(require-any
					(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging")
					(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/[UNSUPPORTED]DocumentRevisions-V100/staging/?"))))
			(require-all
				(extension "b'com.apple.revisiond.revision'")
				(require-any (subpath "/private/var/.DocumentRevisions-V100/PerUID")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/PerUID/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/PerUID")))))
	(require-all
		(vnode-type DIRECTORY)
		(require-any
			(require-all
				(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'")
				(extension "b'com.apple.revisiond.staging'")
				(require-any
					(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging")
					(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/[UNSUPPORTED]DocumentRevisions-V100/staging/?"))))
			(require-all
				(extension "b'com.apple.revisiond.revision'")
				(require-any (subpath "/private/var/.DocumentRevisions-V100/PerUID")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/PerUID/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/PerUID")))))
	(require-all
		(vnode-type SYMLINK)
		(require-any
			(require-all
				(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'")
				(extension "b'com.apple.revisiond.staging'")
				(require-any
					(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging")
					(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/[UNSUPPORTED]DocumentRevisions-V100/staging/?"))))
			(require-all
				(extension "b'com.apple.revisiond.revision'")
				(require-any (subpath "/private/var/.DocumentRevisions-V100/PerUID")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/PerUID/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/PerUID")))))
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.ts.location-services'")
		(subpath-prefix "${FRONT_USER_HOME}/Library/Carrier Bundles"))
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.ts.daemon-container'")
		(extension "b'com.apple.sandbox.container'"))
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.ts.revisiond-client'")
		(require-any
			(require-all
				(vnode-type REGULAR-FILE)
				(require-any
					(require-all
						(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging")
						(extension "b'com.apple.revisiond.staging'"))
					(require-all
						(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/[UNSUPPORTED]DocumentRevisions-V100/staging/?"))
						(extension "b'com.apple.revisiond.staging'"))
					(require-all
						(require-any (subpath "/private/var/.DocumentRevisions-V100/PerUID")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/PerUID/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/PerUID"))
						(extension "b'com.apple.revisiond.revision'"))))
			(require-all
				(vnode-type DIRECTORY)
				(require-any
					(require-all
						(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging")
						(extension "b'com.apple.revisiond.staging'"))
					(require-all
						(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/[UNSUPPORTED]DocumentRevisions-V100/staging/?"))
						(extension "b'com.apple.revisiond.staging'"))
					(require-all
						(require-any (subpath "/private/var/.DocumentRevisions-V100/PerUID")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/PerUID/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/PerUID"))
						(extension "b'com.apple.revisiond.revision'"))))
			(require-all
				(vnode-type SYMLINK)
				(require-any
					(require-all
						(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging")
						(extension "b'com.apple.revisiond.staging'"))
					(require-all
						(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/[UNSUPPORTED]DocumentRevisions-V100/staging/?"))
						(extension "b'com.apple.revisiond.staging'"))
					(require-all
						(require-any (subpath "/private/var/.DocumentRevisions-V100/PerUID")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/PerUID/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/PerUID"))
						(extension "b'com.apple.revisiond.revision'"))))))
	(require-all
		(entitlement-is-present "b'com.apple.security.ts.tmpdir'")
		(require-any (subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.tmpdir}")
(subpath-prefix "${PROCESS_TEMP_DIR}/${ENTITLEMENT:com.apple.security.ts.tmpdir}")))
	(require-all
		(literal-prefix "${HOME}/Library/PPTDevice")
		(require-any
			(entitlement-is-bool-true "b'com.apple.security.ts.identity-services-receive-file'")
			(entitlement-is-bool-true "b'com.apple.security.ts.identity-services-client'")))
	(require-all
		(literal-prefix "${HOME}")
		(require-any
			(entitlement-is-bool-true "b'com.apple.security.ts.addressbook'")
			(signing-identifier "com.apple.siriknowledged")
			(require-any (signing-identifier "com.apple.videocodecd")
(signing-identifier "com.apple.mediaplaybackd"))
			(signing-identifier "com.apple.tursd")
			(signing-identifier "com.apple.audiomxd")
			(signing-identifier "com.apple.nanophoned")
			(signing-identifier "com.apple.facetimemessagestored")
			(signing-identifier "com.apple.Carousel")
			(require-any (signing-identifier "com.apple.announced")
(signing-identifier "com.apple.FTLivePhotoService"))))
	(require-all
		(literal-prefix "${HOME}/Library/Preferences")
		(require-any
			(entitlement-is-bool-true "b'com.apple.security.ts.addressbook'")
			(signing-identifier "com.apple.siriknowledged")
			(require-any (signing-identifier "com.apple.videocodecd")
(signing-identifier "com.apple.mediaplaybackd"))
			(signing-identifier "com.apple.tursd")
			(signing-identifier "com.apple.audiomxd")
			(signing-identifier "com.apple.nanophoned")
			(signing-identifier "com.apple.facetimemessagestored")
			(signing-identifier "com.apple.Carousel")
			(require-any (signing-identifier "com.apple.announced")
(signing-identifier "com.apple.FTLivePhotoService"))))
	(require-all
		(signing-identifier "com.apple.videocodecd")
		(subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter"))
	(require-all
		(signing-identifier "com.apple.tursd")
		(require-any
			(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/DiagnosticLogs")
			(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/DiagnosticLogs/CompanionSync")
			(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync")))
	(require-all
		(literal "/private/var/")
		(require-any
			(require-all
				(signing-identifier "com.apple.tursd")
				(subpath-prefix "${FRONT_USER_HOME}")
				(regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$"))
			(require-all
				(subpath "/private/var/wireless/Library/Logs")
				(signing-identifier "com.apple.storagedatad"))
			(require-all
				(subpath "/private/var/log")
				(signing-identifier "com.apple.storagedatad"))
			(require-all
				(subpath "/private/var/tmp/powerlog")
				(signing-identifier "com.apple.storagedatad"))
			(require-all
				(subpath "/private/var/logs")
				(signing-identifier "com.apple.storagedatad"))))
	(require-all
		(require-any (subpath-prefix "${FRONT_USER_HOME}/Media/iTunes_Control")
(subpath-prefix "${FRONT_USER_HOME}/Media/Books")
(subpath-prefix "${FRONT_USER_HOME}/Media/Downloads")
(subpath-prefix "${FRONT_USER_HOME}/Media/Recordings")
(subpath-prefix "${FRONT_USER_HOME}/Library/Mail")
(subpath-prefix "${FRONT_USER_HOME}/Library/Passes")
(subpath-prefix "${FRONT_USER_HOME}/Library/Health")
(subpath-prefix "${FRONT_USER_HOME}/Library/Contacts")
(subpath-prefix "${FRONT_USER_HOME}/Library/AddressBook")
(subpath-prefix "${FRONT_USER_HOME}/Library/SMS")
(subpath-prefix "${FRONT_USER_HOME}/Library/Safari")
(subpath-prefix "${FRONT_USER_HOME}/Library/Reminders")
(subpath-prefix "${FRONT_USER_HOME}/Library/Recordings")
(subpath-prefix "${FRONT_USER_HOME}/Library/NanoPhotos")
(subpath-prefix "${FRONT_USER_HOME}/Library/NanoMailKit"))
		(signing-identifier "com.apple.storagedatad"))
	(require-all
		(require-any (subpath-prefix "${FRONT_USER_HOME}/Library/Voicemail")
(subpath-prefix "${FRONT_USER_HOME}/Library/Notes"))
		(signing-identifier "com.apple.storagedatad"))
	(require-all
		(vnode-type DIRECTORY)
		(require-any
			(require-all
				(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/DiagnosticLogs")
				(signing-identifier "com.apple.nanophoned"))
			(require-all
				(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/DiagnosticLogs/CompanionSync")
				(signing-identifier "com.apple.nanophoned"))
			(require-all
				(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync")
				(signing-identifier "com.apple.nanophoned"))))
	(require-all
		(subpath-prefix "${FRONT_USER_HOME}/Library/Logs")
		(signing-identifier "com.apple.storagedatad"))
	(require-all
		(subpath-prefix "${PROCESS_TEMP_DIR}/powerlog")
		(signing-identifier "com.apple.storagedatad"))
	(require-all
		(signing-identifier "com.apple.nanophoned")
		(require-any
			(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/DiagnosticLogs")
			(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/DiagnosticLogs/CompanionSync")
			(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync")))
	(require-all
		(literal "/private/var/")
		(require-any
			(require-all
				(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+")
				(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
				(signing-identifier "com.apple.storagedatad"))
			(require-all
				(subpath-prefix "${FRONT_USER_HOME}")
				(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+")
				(signing-identifier "com.apple.storagedatad"))
			(require-all
				(literal "/private/var/PersonaVolumes/")
				(require-any
					(require-all
						(regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+")
						(signing-identifier "com.apple.storagedatad"))
					(require-all
						(regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+")
						(signing-identifier "com.apple.storagedatad"))))))
	(require-all
		(literal "/private/var/")
		(subpath-prefix "${FRONT_USER_HOME}")
		(regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$")
		(signing-identifier "com.apple.nanophoned"))
	(require-all
		(signing-identifier "com.apple.cloudpaird")
		(subpath-prefix "${PROCESS_TEMP_DIR}/com.apple.cloudpaird"))
	(require-all
		(literal-prefix "${HOME}/Library/PPTDevice")
		(require-any
			(signing-identifier "com.apple.Carousel")
			(require-any (signing-identifier "com.apple.announced")
(signing-identifier "com.apple.FTLivePhotoService"))))
	(require-all
		(signing-identifier "com.apple.anomalydetectiond")
		(require-any
			(literal-prefix "${HOME}/Library/Caches")
			(subpath-prefix "${HOME}/Library/Caches/com.apple.anomalydetectiond")))
	(require-all
		(signing-identifier "com.apple.mediaplaybackd")
		(subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter"))
	(require-all
		(signing-identifier "com.apple.momentsd")
		(require-any
			(subpath-prefix "${HOME}/Library/com.apple.momentsd")
			(literal-prefix "${HOME}/Library/Caches")
			(subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd")))
	(require-all
		(extension "b'com.apple.sandbox.application-group'")
		(require-any
			(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/")
			(require-all
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/")
				(subpath-prefix "${FRONT_USER_HOME}"))))
	(require-all
		(subpath-prefix "${HOME}/Library/Caches/com.apple.geoanalyticsd")
		(signing-identifier "com.apple.geoanalyticsd"))
	(require-all
		(literal-prefix "${HOME}/Library/Caches")
		(signing-identifier "com.apple.geoanalyticsd"))
	(require-all
		(signing-identifier "com.apple.audiomxd")
		(subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter"))
	(require-all
		(literal-prefix "${HOME}")
		(require-any
			(require-any (signing-identifier "com.apple.storagedatad")
(signing-identifier "com.apple.bookdatastored")
(signing-identifier "com.apple.desktopservices.desktopserviceshelper")
(signing-identifier "com.apple.CloudDocsDaemon.container-metadata-extractor"))
			(signing-identifier "com.apple.siri.context.service")
			(signing-identifier "com.apple.GameController.gamecontrollerd")
			(signing-identifier "com.apple.installcoordinationd")
			(signing-identifier "com.apple.sociallayerd")
			(signing-identifier "com.apple.assistantd")))
	(require-all
		(signing-identifier "com.apple.facetimemessagestored")
		(literal-prefix "${HOME}/Library/PPTDevice"))
	(require-all
		(literal-prefix "${HOME}/Library/Preferences")
		(require-any
			(require-any (signing-identifier "com.apple.storagedatad")
(signing-identifier "com.apple.bookdatastored")
(signing-identifier "com.apple.desktopservices.desktopserviceshelper")
(signing-identifier "com.apple.CloudDocsDaemon.container-metadata-extractor"))
			(signing-identifier "com.apple.siri.context.service")
			(signing-identifier "com.apple.GameController.gamecontrollerd")
			(signing-identifier "com.apple.installcoordinationd")
			(signing-identifier "com.apple.sociallayerd")
			(signing-identifier "com.apple.assistantd")))
	(require-all
		(vnode-type DIRECTORY)
		(process-attribute is-apple-signed-executable))
	(require-all
		(extension "b'com.apple.sandbox.system-container'")
		(entitlement-is-bool-true "b'com.apple.security.system-container'")
		(regex #"/private/var/containers/Data/System/[UNSUPPORTED]+/"))
	(require-all
		(extension "b'com.apple.sandbox.system-group'")
		(require-any
			(require-all
				(entitlement-is-present "b'com.apple.security.system-groups'")
				(regex #"/private/var/containers/Shared/SystemGroup/[UNSUPPORTED]+/"))
			(require-all
				(entitlement-is-present "b'com.apple.security.system-group-containers'")
				(regex #"/private/var/containers/Shared/SystemGroup/[UNSUPPORTED]+/"))))
	(require-all
		(process-attribute is-apple-signed-executable)
		(require-any
			(literal-prefix "${HOME}")
			(literal-prefix "${HOME}/Library/Preferences"))))
(allow file-read-data
	(require-all
		(subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter")
		(require-any
			(require-any (signing-identifier "com.apple.videocodecd")
(signing-identifier "com.apple.mediaplaybackd"))
			(signing-identifier "com.apple.audiomxd")))
	(require-all
		(vnode-type REGULAR-FILE)
		(require-any
			(require-all
				(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging")
				(extension "b'com.apple.revisiond.staging'")
				(require-any
					(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'")
					(entitlement-is-bool-true "b'com.apple.security.ts.revisiond-client'")))
			(require-all
				(require-any (subpath "/private/var/.DocumentRevisions-V100/PerUID")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/PerUID/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/PerUID"))
				(extension "b'com.apple.revisiond.revision'")
				(require-any
					(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'")
					(entitlement-is-bool-true "b'com.apple.security.ts.revisiond-client'")))
			(require-all
				(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/[UNSUPPORTED]DocumentRevisions-V100/staging/?"))
				(extension "b'com.apple.revisiond.staging'")
				(require-any
					(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'")
					(entitlement-is-bool-true "b'com.apple.security.ts.revisiond-client'")))))
	(require-all
		(vnode-type DIRECTORY)
		(require-any
			(require-all
				(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging")
				(extension "b'com.apple.revisiond.staging'")
				(require-any
					(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'")
					(entitlement-is-bool-true "b'com.apple.security.ts.revisiond-client'")))
			(require-all
				(require-any (subpath "/private/var/.DocumentRevisions-V100/PerUID")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/PerUID/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/PerUID"))
				(extension "b'com.apple.revisiond.revision'")
				(require-any
					(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'")
					(entitlement-is-bool-true "b'com.apple.security.ts.revisiond-client'")))
			(require-all
				(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/[UNSUPPORTED]DocumentRevisions-V100/staging/?"))
				(extension "b'com.apple.revisiond.staging'")
				(require-any
					(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'")
					(entitlement-is-bool-true "b'com.apple.security.ts.revisiond-client'")))))
	(require-all
		(vnode-type SYMLINK)
		(require-any
			(require-all
				(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging")
				(extension "b'com.apple.revisiond.staging'")
				(require-any
					(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'")
					(entitlement-is-bool-true "b'com.apple.security.ts.revisiond-client'")))
			(require-all
				(require-any (subpath "/private/var/.DocumentRevisions-V100/PerUID")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]/[UNSUPPORTED]DocumentRevisions-V100/PerUID/?")
(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/PerUID"))
				(extension "b'com.apple.revisiond.revision'")
				(require-any
					(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'")
					(entitlement-is-bool-true "b'com.apple.security.ts.revisiond-client'")))
			(require-all
				(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/[UNSUPPORTED]DocumentRevisions-V100/staging/?"))
				(extension "b'com.apple.revisiond.staging'")
				(require-any
					(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'")
					(entitlement-is-bool-true "b'com.apple.security.ts.revisiond-client'"))))))
(allow file-revoke)
(allow file-search
	(require-all
		(signing-identifier "com.apple.diskimagesiod")
		(file-attribute removable-media)))
(allow file-test-existence
	(require-any (literal-prefix "${FRONT_USER_HOME}/Library/DeviceRegistry/${ANY_UUID}/")
(subpath-prefix "${ENTITLEMENT:com.apple.security.ts.nano-paired-storage.subpath.read-write}")
(literal-prefix "NanoPreferencesSync/NanoDomains/${ENTITLEMENT:com.apple.security.ts.nano-preference.read-write}"))
	(subpath-prefix "${FRONT_USER_HOME}/Library/DeviceRegistry/${ANY_UUID}/${ENTITLEMENT:com.apple.security.exception.nano-paired-storage.subpath.read-write}")
	(literal-prefix "${FRONT_USER_HOME}/Library/DeviceRegistry/${ANY_UUID}/NanoPreferencesSync/NanoDomains/${ENTITLEMENT:com.apple.security.exception.nano-preference.read-write}")
	(extension "b'com.apple.app-sandbox.read-write'")
	(extension "b'com.apple.security.exception.files.home-relative-path.read-write'")
	(extension "b'com.apple.security.exception.files.absolute-path.read-write'")
	(entitlement-is-bool-true "b'com.apple.private.amfi.can-execute-cdhash'")
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.ts.revisiond-client'")
		(require-any
			(require-all
				(vnode-type REGULAR-FILE)
				(extension "b'com.apple.revisiond.staging'")
				(require-any
					(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging")
					(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/[UNSUPPORTED]DocumentRevisions-V100/staging/?"))))
			(require-all
				(vnode-type DIRECTORY)
				(extension "b'com.apple.revisiond.staging'")
				(require-any
					(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging")
					(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/[UNSUPPORTED]DocumentRevisions-V100/staging/?"))))
			(require-all
				(vnode-type SYMLINK)
				(extension "b'com.apple.revisiond.staging'")
				(require-any
					(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging")
					(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/[UNSUPPORTED]DocumentRevisions-V100/staging/?"))))))
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'")
		(require-any
			(require-all
				(subpath-prefix "${HOME}/Library/Mobile Documents")
				(require-any
					(extension "b'com.apple.librarian.ubiquity-container'")
					(entitlement-is-bool-true "b'com.apple.private.librarian.container-proxy'")))
			(require-all
				(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents/?")
				(require-any
					(extension "b'com.apple.librarian.ubiquity-container'")
					(entitlement-is-bool-true "b'com.apple.private.librarian.container-proxy'")))
			(require-all
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$")
				(subpath-prefix "${FRONT_USER_HOME}"))
			(require-all
				(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/File Provider Storage/?")
				(require-any
					(extension "b'com.apple.librarian.ubiquity-container'")
					(entitlement-is-bool-true "b'com.apple.private.librarian.container-proxy'")))
			(require-all
				(vnode-type REGULAR-FILE)
				(require-any
					(require-all
						(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging")
						(extension "b'com.apple.revisiond.staging'"))
					(require-all
						(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/[UNSUPPORTED]DocumentRevisions-V100/staging/?"))
						(extension "b'com.apple.revisiond.staging'"))))
			(require-all
				(vnode-type DIRECTORY)
				(require-any
					(require-all
						(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging")
						(extension "b'com.apple.revisiond.staging'"))
					(require-all
						(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/[UNSUPPORTED]DocumentRevisions-V100/staging/?"))
						(extension "b'com.apple.revisiond.staging'"))))
			(require-all
				(vnode-type SYMLINK)
				(require-any
					(require-all
						(subpath-prefix "${FRONT_USER_HOME}/.DocumentRevisions-V100/staging")
						(extension "b'com.apple.revisiond.staging'"))
					(require-all
						(require-any (subpath "/private/var/.DocumentRevisions-V100/staging")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/[UNSUPPORTED]DocumentRevisions-V100/staging/?"))
						(extension "b'com.apple.revisiond.staging'"))))))
	(require-all
		(entitlement-is-present "b'com.apple.security.ts.tmpdir'")
		(require-any (subpath-prefix "/private/var/tmp/${ENTITLEMENT:com.apple.security.ts.tmpdir}")
(subpath-prefix "${PROCESS_TEMP_DIR}/${ENTITLEMENT:com.apple.security.ts.tmpdir}")))
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.ts.geoservices'")
		(require-not (literal-prefix "${ANY_USER_HOME}/Library/Caches/GeoServices/tguid.bin")))
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.ts.daemon-container'")
		(extension "b'com.apple.sandbox.container'"))
	(require-all
		(literal "/private/var/")
		(require-any
			(require-all
				(subpath-prefix "${FRONT_USER_HOME}")
				(require-any
					(require-all
						(regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/com[.]apple[.]private[.]alloy[.]voicemailsync" #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/nms[.]com[.]apple[.]private[.]alloy[.]voicemailsync" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/(nms[.])?com[.]apple[.]private[.]alloy[.]voicemailsync" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/(nms[.])?com[.]apple[.]private[.]alloy[.]voicemailsync" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync/(nms[.])?com[.]apple[.]private[.]alloy[.]voicemailsync")
						(require-any
							(signing-identifier "com.apple.tursd")
							(signing-identifier "com.apple.nanophoned")))
					(require-all
						(regex #"^/private/var/mobile/Library/Logs/CrashReporter/videocodecd_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/videocodecd_" #"^/private/var/mobile/Library/Logs/CrashReporter/[.]videocodecd_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/[.]videocodecd_" #"^/private/var/euser[0-9]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])videocodecd_" #"^/private/var/[-0-9A-F]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])videocodecd_" #"^/private/var/Users/[^/]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])videocodecd_")
						(signing-identifier "com.apple.videocodecd"))))
			(require-all
				(regex #"^/private/var/mobile/Media/iTunes_Control/iTunes/Artwork/" #"^/private/var/mobile/Media/iTunes_Control/iTunes/Artwork$" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/Artwork/" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/Artwork$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/Artwork/" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/Artwork$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/Artwork/" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/Artwork$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/Artwork/" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/Artwork$")
				(subpath-prefix "${HOME}")
				(signing-identifier "com.apple.mediaartworkd"))
			(require-all
				(subpath-prefix "${HOME}")
				(regex #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/mobile/Media/iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-journal" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-shm" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes/MediaLibrary.sqlitedb-wal")
				(signing-identifier "com.apple.siriknowledged")
				(extension "b'com.apple.tcc.kTCCServiceMediaLibrary'"))
			(require-all
				(vnode-type DIRECTORY)
				(subpath-prefix "${HOME}")
				(regex #"^/private/var/mobile/Media/iTunes_Control/iTunes$" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/iTunes$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/iTunes$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/iTunes$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/iTunes$"))))
	(require-all
		(vnode-type REGULAR-FILE)
		(entitlement-is-bool-true "b'com.apple.Contacts.database-allow'")
		(entitlement-is-bool-true "b'com.apple.security.ts.addressbook'")
		(literal-prefix "${HOME}/Library/AddressBook/")
		(extension "b'com.apple.tcc.kTCCServiceAddressBook'"))
	(require-all
		(entitlement-is-bool-true "b'com.apple.Contacts.database-allow'")
		(entitlement-is-bool-true "b'com.apple.security.ts.addressbook'")
		(subpath-prefix "${HOME}/Library/AddressBook/Delegates")
		(extension "b'com.apple.tcc.kTCCServiceAddressBook'"))
	(require-all
		(subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/TransportLogs")
		(signing-identifier "com.apple.tursd"))
	(require-all
		(subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/DiagnosticLogs/CompanionSync/TransportLogs")
		(signing-identifier "com.apple.tursd"))
	(require-all
		(require-any (literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db")
(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db-shm")
(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db-wal")
(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db-journal"))
		(signing-identifier "com.apple.tursd"))
	(require-all
		(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync")
		(signing-identifier "com.apple.tursd"))
	(require-all
		(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/StoreKit/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/StoreKit$" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/StoreKit/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/StoreKit$" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/(Library/Caches/)?StoreKit/" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/(Library/Caches/)?StoreKit$" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/(Library/Caches/)?StoreKit/" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/(Library/Caches/)?StoreKit$" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/(Library/Caches/)?StoreKit/" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/(Library/Caches/)?StoreKit$")
		(literal "/private/var/")
		(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
		(require-any
			(signing-identifier "com.apple.managedappdistributiond")
			(signing-identifier "com.apple.storekitd")))
	(require-all
		(literal "/private/var/PersonaVolumes/")
		(regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/StoreKit/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/StoreKit$" #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Caches/StoreKit/" #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Caches/StoreKit$")
		(require-any
			(signing-identifier "com.apple.managedappdistributiond")
			(signing-identifier "com.apple.storekitd")))
	(require-all
		(signing-identifier "com.apple.nanophoned")
		(require-any
			(subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/TransportLogs")
			(require-any (literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db")
(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db-shm")
(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db-wal")
(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync/statistics.db-journal"))
			(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync")
			(subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/DiagnosticLogs/CompanionSync/TransportLogs")))
	(require-all
		(signing-identifier "com.apple.privacyaccountingctl")
		(literal "/dev/ttys")
		(regex #"^/dev/ttys[0-9]" #"^/dev/ttys[0-9]+"))
	(require-all
		(extension "b'com.apple.sandbox.container-proxy'")
		(require-any
			(require-all
				(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+")
				(literal "/private/var/")
				(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}")))
			(require-all
				(literal "/private/var/PersonaVolumes/")
				(regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+")
				(signing-identifier "com.apple.CoreDevice.dtfileserviced"))))
	(require-all
		(signing-identifier "com.apple.cloudpaird")
		(subpath-prefix "${PROCESS_TEMP_DIR}/com.apple.cloudpaird"))
	(require-all
		(require-any (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com[UNSUPPORTED]apple[UNSUPPORTED]chrono/?"))
		(signing-identifier "com.apple.chronod"))
	(require-all
		(literal "/private/var/")
		(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com.apple.chrono/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com.apple.chrono$" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/SystemData/com.apple.chrono/" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/SystemData/com.apple.chrono$" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/SystemData/com.apple.chrono/" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/SystemData/com.apple.chrono$" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/SystemData$" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/SystemData/com.apple.chrono/" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/SystemData/com.apple.chrono$")
		(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
		(signing-identifier "com.apple.chronod"))
	(require-all
		(signing-identifier "com.apple.anomalydetectiond")
		(require-any
			(subpath-prefix "${HOME}/Library/Caches/com.apple.anomalydetectiond")
			(require-all
				(vnode-type REGULAR-FILE)
				(subpath-prefix "${HOME}/Library/Caches/com.apple.nsurlsessiond/Downloads/com.apple.anomalydetectiond"))
			(require-all
				(vnode-type DIRECTORY)
				(subpath-prefix "${HOME}/Library/Caches/com.apple.nsurlsessiond/Downloads/com.apple.anomalydetectiond"))))
	(require-all
		(require-any (subpath "/private/var/tmp/com.apple.announced")
(subpath-prefix "${PROCESS_TEMP_DIR}/com.apple.announced"))
		(signing-identifier "com.apple.announced"))
	(require-all
		(require-any (subpath-prefix "${FRONT_USER_HOME}/Library/Logs/gpsd")
(subpath-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/gpsd"))
		(signing-identifier "com.apple.gpsd"))
	(require-all
		(require-any (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Caches/")
(regex #"com[UNSUPPORTED]apple[UNSUPPORTED]metalassetupgrader/?")
(regex #"[UNSUPPORTED]+/com[UNSUPPORTED]apple[UNSUPPORTED]metal/?"))
		(signing-identifier "com.apple.MTLAssetUpgraderD"))
	(require-all
		(literal "/private/var/")
		(require-any
			(require-all
				(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}"))
				(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader$" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader$" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader$" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader/" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Caches/com.apple.metalassetupgrader$")
				(signing-identifier "com.apple.MTLAssetUpgraderD"))
			(require-all
				(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Caches/[^/]+/com.apple.metal$")
				(require-any
					(require-all
						(subpath-prefix "${FRONT_USER_HOME}")
						(signing-identifier "com.apple.MTLAssetUpgraderD"))
					(require-all
						(subpath-prefix "${HOME}")
						(signing-identifier "com.apple.MTLAssetUpgraderD"))))
			(require-all
				(regex #"^/private/var/mobile/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/mobile/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/euser[0-9]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/euser[0-9]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/[-0-9A-F]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/[-0-9A-F]+/Library/Caches/[^/]+/com.apple.metal$" #"^/private/var/Users/[^/]+/Library/Caches/[^/]+/com.apple.metal/" #"^/private/var/Users/[^/]+/Library/Caches/[^/]+/com.apple.metal$")
				(subpath-prefix "${HOME}")
				(signing-identifier "com.apple.MTLAssetUpgraderD"))))
	(require-all
		(extension "b'com.apple.sandbox.container'")
		(require-any
			(require-all
				(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/Library/Preferences/[^/]+[.]plist$" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/Library/Preferences/[^/]+[.]plist$" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/Library/Preferences/[^/]+[.]plist$" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Preferences/[^/]+[.]plist$")
				(literal "/private/var/")
				(require-any (subpath-prefix "${HOME}")
(subpath-prefix "${FRONT_USER_HOME}")))
			(require-all
				(literal "/private/var/PersonaVolumes/")
				(regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Data/[^/]+/[^/]+/Library/Preferences/[^/]+[.]plist$")
				(signing-identifier "com.apple.dmd"))))
	(require-all
		(extension "b'com.apple.sandbox.application-group'")
		(require-any
			(require-not (regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/.com.apple."))
			(require-all
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/[.]com[.]apple[.]")
				(require-not (subpath-prefix "${FRONT_USER_HOME}")))))
	(require-all
		(signing-identifier "com.apple.security.KeychainDBMover")
		(subpath-prefix "${FRONT_USER_HOME}/Library/Keychains"))
	(require-all
		(signing-identifier "com.apple.momentsd")
		(require-any
			(subpath-prefix "${HOME}/Library/com.apple.momentsd")
			(subpath-prefix "${HOME}/Library/Caches/com.apple.momentsd")
			(require-all
				(vnode-type REGULAR-FILE)
				(subpath-prefix "${HOME}/Library/Caches/com.apple.nsurlsessiond/Downloads/com.apple.momentsd"))
			(require-all
				(vnode-type DIRECTORY)
				(subpath-prefix "${HOME}/Library/Caches/com.apple.nsurlsessiond/Downloads/com.apple.momentsd"))))
	(require-all
		(extension "b'com.apple.sandbox.application-group'")
		(require-any
			(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/")
			(require-all
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/")
				(subpath-prefix "${FRONT_USER_HOME}"))))
	(require-all
		(require-any (subpath-prefix "${HOME}/Media/PhotoData/CPLAssets")
(subpath-prefix "${HOME}/Media/PhotoData/Sync")
(subpath-prefix "${HOME}/Media/PhotoData/Mutations"))
		(signing-identifier "com.apple.mediaplaybackd"))
	(require-all
		(require-any (subpath-prefix "${HOME}/Media/PhotoData/OutboundSharingTmp")
(subpath-prefix "${HOME}/Media/PhotoData/Metadata/DCIM")
(subpath-prefix "${HOME}/Media/PhotoData/Metadata/PhotoData/CPLAssets")
(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/SystemData/com.apple.mediaserverd/?"))
		(signing-identifier "com.apple.mediaplaybackd"))
	(require-all
		(signing-identifier "com.apple.audiomxd")
		(require-any
			(extension "b'com.apple.mediaserverd.read-write'")
			(require-all
				(literal "/private/var/")
				(subpath-prefix "${FRONT_USER_HOME}")
				(regex #"^/private/var/mobile/Library/Logs/CrashReporter/audiomxd_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/audiomxd_" #"^/private/var/mobile/Library/Logs/CrashReporter/[.]audiomxd_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/[.]audiomxd_" #"^/private/var/euser[0-9]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])audiomxd_" #"^/private/var/[-0-9A-F]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])audiomxd_" #"^/private/var/Users/[^/]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])audiomxd_"))))
	(require-all
		(subpath-prefix "${HOME}/Media/DCIM")
		(signing-identifier "com.apple.mediaplaybackd"))
	(require-all
		(subpath-prefix "${HOME}/Media/Deferred")
		(signing-identifier "com.apple.mediaplaybackd"))
	(require-all
		(signing-identifier "com.apple.geoanalyticsd")
		(require-any
			(subpath-prefix "${HOME}/Library/Caches/com.apple.geoanalyticsd")
			(require-all
				(vnode-type REGULAR-FILE)
				(subpath-prefix "${HOME}/Library/Caches/com.apple.nsurlsessiond/Downloads/com.apple.geoanalyticsd"))
			(require-all
				(vnode-type DIRECTORY)
				(subpath-prefix "${HOME}/Library/Caches/com.apple.nsurlsessiond/Downloads/com.apple.geoanalyticsd"))))
	(require-all
		(subpath-prefix "${HOME}/Media/PhotoData/PhotoCloudSharingData")
		(signing-identifier "com.apple.mediaplaybackd"))
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.system-container'")
		(require-any
			(entitlement-is-bool-true "b'com.apple.private.amfi.can-execute-cdhash'")
			(require-all
				(extension "b'com.apple.sandbox.system-container'")
				(regex #"/private/var/containers/Data/System/[UNSUPPORTED]+/.com.apple.")
				(regex #"/private/var/containers/Data/System/[UNSUPPORTED]+/"))))
	(require-all
		(subpath-prefix "${HOME}/Media/Podcasts")
		(signing-identifier "com.apple.mediaplaybackd"))
	(require-all
		(subpath-prefix "${HOME}/Media/PhotoStreamsData")
		(signing-identifier "com.apple.mediaplaybackd"))
	(require-all
		(vnode-type BLOCK-DEVICE)
		(vnode-type CHARACTER-DEVICE))
	(require-all
		(literal "/private/var/")
		(require-any
			(require-all
				(regex #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/mobile/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/euser[0-9]+/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/[-0-9A-F]+/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd/" #"^/private/var/Users/[^/]+/Containers/Data/[^/]+/[^/]+/SystemData/com[.]apple[.]mediaserverd$")
				(require-any
					(require-all
						(subpath-prefix "${FRONT_USER_HOME}")
						(signing-identifier "com.apple.mediaplaybackd"))
					(require-all
						(subpath-prefix "${HOME}")
						(signing-identifier "com.apple.mediaplaybackd"))))
			(require-all
				(regex #"^/private/var/mobile/Media/CloudAssets/" #"^/private/var/mobile/Media/CloudAssets$" #"^/private/var/mobile/Media/[^/]+/CloudAssets/" #"^/private/var/mobile/Media/[^/]+/CloudAssets$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?CloudAssets/" #"^/private/var/euser[0-9]+/Media/([^/]+/)?CloudAssets$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?CloudAssets/" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?CloudAssets$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?CloudAssets/" #"^/private/var/Users/[^/]+/Media/([^/]+/)?CloudAssets$")
				(subpath-prefix "${HOME}")
				(signing-identifier "com.apple.mediaplaybackd"))
			(require-all
				(regex #"^/private/var/mobile/Media/Music/Cache_LoFi/" #"^/private/var/mobile/Media/Music/Cache_LoFi$" #"^/private/var/mobile/Media/[^/]+/Music/Cache_LoFi/" #"^/private/var/mobile/Media/[^/]+/Music/Cache_LoFi$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?Music/Cache_LoFi/" #"^/private/var/euser[0-9]+/Media/([^/]+/)?Music/Cache_LoFi$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?Music/Cache_LoFi/" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?Music/Cache_LoFi$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?Music/Cache_LoFi/" #"^/private/var/Users/[^/]+/Media/([^/]+/)?Music/Cache_LoFi$")
				(subpath-prefix "${HOME}")
				(signing-identifier "com.apple.mediaplaybackd"))
			(require-all
				(regex #"^/private/var/mobile/Media/Music/iTunes/" #"^/private/var/mobile/Media/Music/iTunes$" #"^/private/var/mobile/Media/[^/]+/Music/iTunes/" #"^/private/var/mobile/Media/[^/]+/Music/iTunes$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?Music/iTunes/" #"^/private/var/euser[0-9]+/Media/([^/]+/)?Music/iTunes$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?Music/iTunes/" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?Music/iTunes$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?Music/iTunes/" #"^/private/var/Users/[^/]+/Media/([^/]+/)?Music/iTunes$")
				(subpath-prefix "${HOME}")
				(signing-identifier "com.apple.mediaplaybackd"))
			(require-all
				(regex #"^/private/var/mobile/Media/iTunes_Control/Ringtones/" #"^/private/var/mobile/Media/iTunes_Control/Ringtones$" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/Ringtones/" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/Ringtones$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/Ringtones/" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/Ringtones$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/Ringtones/" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/Ringtones$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/Ringtones/" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/Ringtones$")
				(subpath-prefix "${HOME}")
				(signing-identifier "com.apple.mediaplaybackd"))
			(require-all
				(regex #"^/private/var/mobile/Media/Purchases/" #"^/private/var/mobile/Media/Purchases$" #"^/private/var/mobile/Media/[^/]+/Purchases/" #"^/private/var/mobile/Media/[^/]+/Purchases$" #"^/private/var/mobile/Media/ManagedPurchases/" #"^/private/var/mobile/Media/ManagedPurchases$" #"^/private/var/mobile/Media/[^/]+/ManagedPurchases/" #"^/private/var/mobile/Media/[^/]+/ManagedPurchases$" #"^/private/var/euser[0-9]+/Media/((([^/]+/)?|Managed)|[^/]+/Managed)Purchases/" #"^/private/var/euser[0-9]+/Media/((([^/]+/)?|Managed)|[^/]+/Managed)Purchases$" #"^/private/var/[-0-9A-F]+/Media/((([^/]+/)?|Managed)|[^/]+/Managed)Purchases/" #"^/private/var/[-0-9A-F]+/Media/((([^/]+/)?|Managed)|[^/]+/Managed)Purchases$" #"^/private/var/Users/[^/]+/Media/((([^/]+/)?|Managed)|[^/]+/Managed)Purchases/" #"^/private/var/Users/[^/]+/Media/((([^/]+/)?|Managed)|[^/]+/Managed)Purchases$")
				(subpath-prefix "${HOME}")
				(signing-identifier "com.apple.mediaplaybackd"))
			(require-all
				(regex #"^/private/var/mobile/Media/LoFiCloudAssets/" #"^/private/var/mobile/Media/LoFiCloudAssets$" #"^/private/var/mobile/Media/[^/]+/LoFiCloudAssets/" #"^/private/var/mobile/Media/[^/]+/LoFiCloudAssets$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?LoFiCloudAssets/" #"^/private/var/euser[0-9]+/Media/([^/]+/)?LoFiCloudAssets$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?LoFiCloudAssets/" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?LoFiCloudAssets$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?LoFiCloudAssets/" #"^/private/var/Users/[^/]+/Media/([^/]+/)?LoFiCloudAssets$")
				(subpath-prefix "${HOME}")
				(signing-identifier "com.apple.mediaplaybackd"))
			(require-all
				(regex #"^/private/var/mobile/Media/Music/Cache/" #"^/private/var/mobile/Media/Music/Cache$" #"^/private/var/mobile/Media/[^/]+/Music/Cache/" #"^/private/var/mobile/Media/[^/]+/Music/Cache$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?Music/Cache/" #"^/private/var/euser[0-9]+/Media/([^/]+/)?Music/Cache$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?Music/Cache/" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?Music/Cache$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?Music/Cache/" #"^/private/var/Users/[^/]+/Media/([^/]+/)?Music/Cache$")
				(subpath-prefix "${HOME}")
				(signing-identifier "com.apple.mediaplaybackd"))
			(require-all
				(regex #"^/private/var/mobile/Media/Downloads/" #"^/private/var/mobile/Media/Downloads$" #"^/private/var/mobile/Media/[^/]+/Downloads/" #"^/private/var/mobile/Media/[^/]+/Downloads$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?Downloads/" #"^/private/var/euser[0-9]+/Media/([^/]+/)?Downloads$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?Downloads/" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?Downloads$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?Downloads/" #"^/private/var/Users/[^/]+/Media/([^/]+/)?Downloads$")
				(subpath-prefix "${HOME}")
				(signing-identifier "com.apple.mediaplaybackd"))
			(require-all
				(regex #"^/private/var/mobile/Media/Music/Downloads/" #"^/private/var/mobile/Media/Music/Downloads$" #"^/private/var/mobile/Media/[^/]+/Music/Downloads/" #"^/private/var/mobile/Media/[^/]+/Music/Downloads$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?Music/Downloads/" #"^/private/var/euser[0-9]+/Media/([^/]+/)?Music/Downloads$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?Music/Downloads/" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?Music/Downloads$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?Music/Downloads/" #"^/private/var/Users/[^/]+/Media/([^/]+/)?Music/Downloads$")
				(subpath-prefix "${HOME}")
				(signing-identifier "com.apple.mediaplaybackd"))
			(require-all
				(regex #"^/private/var/mobile/Media/iTunes_Control/Music/" #"^/private/var/mobile/Media/iTunes_Control/Music$" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/Music/" #"^/private/var/mobile/Media/[^/]+/iTunes_Control/Music$" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/Music/" #"^/private/var/euser[0-9]+/Media/([^/]+/)?iTunes_Control/Music$" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/Music/" #"^/private/var/[-0-9A-F]+/Media/([^/]+/)?iTunes_Control/Music$" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/Music/" #"^/private/var/Users/[^/]+/Media/([^/]+/)?iTunes_Control/Music$")
				(subpath-prefix "${HOME}")
				(signing-identifier "com.apple.mediaplaybackd"))))
	(require-all
		(extension "b'com.apple.sandbox.system-group'")
		(require-any
			(require-all
				(entitlement-is-present "b'com.apple.security.system-groups'")
				(regex #"/private/var/containers/Shared/SystemGroup/[UNSUPPORTED]+/.com.apple.")
				(regex #"/private/var/containers/Shared/SystemGroup/[UNSUPPORTED]+/"))
			(require-all
				(entitlement-is-present "b'com.apple.security.system-group-containers'")
				(regex #"/private/var/containers/Shared/SystemGroup/[UNSUPPORTED]+/.com.apple.")
				(regex #"/private/var/containers/Shared/SystemGroup/[UNSUPPORTED]+/"))))
	(require-all
		(signing-identifier "com.apple.mediaplaybackd")
		(extension "b'com.apple.mediaserverd.read-write'"))
	(require-all
		(literal "/private/var/")
		(subpath-prefix "${FRONT_USER_HOME}")
		(regex #"^/private/var/mobile/Library/Logs/CrashReporter/mediaplaybackd_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/mediaplaybackd_" #"^/private/var/mobile/Library/Logs/CrashReporter/[.]mediaplaybackd_" #"^/private/var/mobile/Library/Logs/CrashReporter/Retired/[.]mediaplaybackd_" #"^/private/var/euser[0-9]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])mediaplaybackd_" #"^/private/var/[-0-9A-F]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])mediaplaybackd_" #"^/private/var/Users/[^/]+/Library/Logs/CrashReporter/(((Retired/)?|[.])|Retired/[.])mediaplaybackd_")
		(signing-identifier "com.apple.mediaplaybackd")))
(allow file-write*
	(require-all
		(vnode-type DIRECTORY)
		(require-any
			(require-all
				(literal-prefix "${FRONT_USER_HOME}/Library/DeviceRegistry")
				(process-attribute is-apple-signed-executable))
			(require-all
				(literal-prefix "${HOME}/Library/Mobile Documents")
				(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'"))
			(require-all
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+$" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+$" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+$" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+$")
				(subpath-prefix "${FRONT_USER_HOME}"))
			(require-all
				(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents")
				(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'"))))
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.network.client'")
		(require-not (literal-prefix "${HOME}/Library/Logs/CrashReporter/CFNetwork_")))
	(require-all
		(vnode-type DIRECTORY)
		(require-any
			(require-all
				(signing-identifier "com.apple.nanophoned")
				(require-any
					(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/DiagnosticLogs")
					(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/DiagnosticLogs/CompanionSync")
					(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync")
					(require-all
						(literal "/private/var/")
						(subpath-prefix "${FRONT_USER_HOME}")
						(regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$"))))
			(require-all
				(signing-identifier "com.apple.tursd")
				(require-any
					(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/DiagnosticLogs")
					(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CrashReporter/DiagnosticLogs/CompanionSync")
					(literal-prefix "${FRONT_USER_HOME}/Library/Logs/CompanionSync")
					(require-all
						(literal "/private/var/")
						(subpath-prefix "${FRONT_USER_HOME}")
						(regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$"))))
			(require-all
				(signing-identifier "com.apple.anomalydetectiond")
				(literal-prefix "${HOME}/Library/Caches"))
			(require-all
				(literal-prefix "${HOME}/Library/Caches")
				(require-any
					(signing-identifier "com.apple.geoanalyticsd")
					(signing-identifier "com.apple.momentsd")))))
	(require-all
		(vnode-type REGULAR-FILE)
		(require-any
			(require-all
				(signing-identifier "com.apple.Carousel")
				(require-any
					(subpath "/private/var/tmp")
					(subpath-prefix "${PROCESS_TEMP_DIR}")))
			(require-all
				(require-any (signing-identifier "com.apple.announced")
(signing-identifier "com.apple.FTLivePhotoService"))
				(require-any
					(subpath "/private/var/tmp")
					(subpath-prefix "${PROCESS_TEMP_DIR}")))))
	(require-all
		(literal "/private/var/")
		(extension "b'com.apple.sandbox.application-group'")
		(require-any
			(require-all
				(literal "/private/var/PersonaVolumes/")
				(require-not (regex #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+/Library$" #"^/private/var/PersonaVolumes/[^/]+/Containers/Shared/AppGroup/[^/]+/Library/Preferences$")))
			(require-all
				(subpath-prefix "${FRONT_USER_HOME}")
				(require-not (regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/Library$" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/Library/Preferences$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/Library(/Preferences)?$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/Library(/Preferences)?$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/Library(/Preferences)?$")))
			(require-all
				(vnode-type DIRECTORY)
				(literal-prefix "${HOME}/Library/Caches")
				(require-any
					(signing-identifier "com.apple.geoanalyticsd")
					(signing-identifier "com.apple.momentsd")))))
	(require-all
		(vnode-type REGULAR-FILE)
		(require-any
			(require-all
				(subpath "/private/var/tmp")
				(signing-identifier "com.apple.facetimemessagestored"))
			(require-all
				(subpath-prefix "${PROCESS_TEMP_DIR}")
				(signing-identifier "com.apple.facetimemessagestored"))))
	(require-all
		(literal "/private/var/tmp/AudioCapture")
		(require-any
			(require-all
				(debug-mode)
				(vnode-type SYMLINK)
				(signing-identifier "com.apple.audiomxd"))
			(require-all
				(debug-mode)
				(vnode-type SYMLINK)
				(signing-identifier "com.apple.audiomxd"))))
	(require-all
		(require-any (literal-prefix "${PROCESS_TEMP_DIR}/AudioCapture")
(literal-prefix "${FRONT_USER_HOME}/tmp/AudioCapture"))
		(require-any
			(require-all
				(debug-mode)
				(vnode-type SYMLINK)
				(signing-identifier "com.apple.audiomxd"))
			(require-all
				(debug-mode)
				(vnode-type SYMLINK)
				(signing-identifier "com.apple.audiomxd")))))
(allow file-write-acl
	(literal "/dev/aes_0")
	(require-all
		(literal)
		(require-any
			(signing-identifier "com.apple.wapic")
			(signing-identifier "com.apple.mDNSResponderHelper")))
	(require-all
		(require-not (literal "/dev/urandom"))
		(require-not (literal "/dev/random"))
		(require-any
			(literal "/dev/null")
			(literal "/dev/dtracehelper")
			(literal "/dev/zero"))))
(allow file-write-finderinfo
	(require-all
		(literal "/private/var/")
		(subpath-prefix "${FRONT_USER_HOME}")
		(require-any
			(require-all
				(signing-identifier "com.apple.nanophoned")
				(regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$"))
			(require-all
				(signing-identifier "com.apple.tursd")
				(regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$")))))
(allow file-write-setugid
	(entitlement-is-present "b'com.apple.private.oop-jit.loader'")
	(require-all
		(vnode-type REGULAR-FILE)
		(require-any
			(require-all
				(subpath-prefix "${PROCESS_TEMP_DIR}")
				(require-any
					(signing-identifier "com.apple.Carousel")
					(require-any (signing-identifier "com.apple.announced")
(signing-identifier "com.apple.FTLivePhotoService"))
					(signing-identifier "com.apple.facetimemessagestored")))
			(require-all
				(subpath "/private/var/tmp")
				(require-any
					(signing-identifier "com.apple.Carousel")
					(require-any (signing-identifier "com.apple.announced")
(signing-identifier "com.apple.FTLivePhotoService"))
					(signing-identifier "com.apple.facetimemessagestored")))))
	(require-all
		(extension "b'com.apple.identityservices.deliver'")
		(subpath-prefix "${FRONT_USER_HOME}/Library/IdentityServices")
		(entitlement-is-bool-true "b'com.apple.security.ts.identity-services-receive-file'"))
	(require-all
		(extension "b'com.apple.sandbox.oopjit'")
		(subpath "/private/var/OOPJit")))
(allow file-write-times
	(require-all
		(xattr "com.apple.metadata:com_apple_backup_excludeItem")
		(require-any
			(entitlement-is-bool-true "b'com.apple.private.amfi.can-execute-cdhash'")
			(require-all
				(extension "b'com.apple.sandbox.system-container'")
				(entitlement-is-bool-true "b'com.apple.security.system-container'")
				(literal "/private/var/containers/Data/System/")
				(regex #"^/private/var/containers/Data/System/[^/]+/" #"^/private/var/containers/Data/System/[^/]+$"))
			(require-all
				(extension "b'com.apple.sandbox.system-group'")
				(require-any
					(require-all
						(entitlement-is-present "b'com.apple.security.system-groups'")
						(literal "/private/var/containers/Shared/SystemGroup/")
						(regex #"^/private/var/containers/Shared/SystemGroup/[^/]+/" #"^/private/var/containers/Shared/SystemGroup/[^/]+$"))
					(require-all
						(entitlement-is-present "b'com.apple.security.system-group-containers'")
						(literal "/private/var/containers/Shared/SystemGroup/")
						(regex #"^/private/var/containers/Shared/SystemGroup/[^/]+/" #"^/private/var/containers/Shared/SystemGroup/[^/]+$"))))
			(require-all
				(regex #"^/private/var/mobile/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/euser[0-9]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/[-0-9A-F]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$" #"^/private/var/Users/[^/]+/Library/DeviceRegistry/[-0-9A-Z]+/CompanionSync$")
				(literal "/private/var/")
				(subpath-prefix "${FRONT_USER_HOME}")
				(require-any
					(signing-identifier "com.apple.tursd")
					(signing-identifier "com.apple.nanophoned"))))))
(allow file-write-unlink)
(allow file-write-xattr)
(allow fs-quota*)
(allow fs-quota-get)
(allow fs-quota-on)
(allow fs-quota-off)
(allow fs-quota-set*)
(allow fs-quota-set-limits)
(allow fs-quota-set-usage)
(allow fs-snapshot-create)
(allow fs-snapshot-mount
	(require-all
		(extension-class "com.apple.webkit.mach-bootstrap")
		(entitlement-is-present "b'com.apple.security.ts.webkit-client'")))
(allow hid-control
	(require-not (entitlement-is-bool-true "b'com.apple.security.ts.addressbook'"))
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.ts.render-images'")
		(require-any
			(require-all
				(iokit-property "IOSurfaceAcceleratorCapabilitiesDict")
				(iokit-user-client-class "IOService"))
			(require-all
				(iokit-user-client-class "AppleJPEGDriver")
				(require-any
					(iokit-property "AppleJPEGNumCores")
					(iokit-property "AppleJPEGSupportsAppleInterchangeFormats")))
			(require-all
				(iokit-property "soc-generation")
				(iokit-user-client-class "IOPlatformDevice"))))
	(require-all
		(iokit-user-client-class "IOPlatformDevice")
		(entitlement-is-bool-true "b'com.apple.security.ts.geoservices'")
		(require-any (iokit-property "disable-globe-map")
(iokit-property "multiuser-sessions")))
	(require-all
		(iokit-property "soc-generation")
		(iokit-user-client-class "IOPlatformDevice")
		(entitlement-is-bool-true "b'com.apple.security.ts.framebuffer-access'"))
	(require-all
		(iokit-property "ane-type")
		(entitlement-is-bool-true "b'com.apple.security.ts.ane-client'")
		(require-any (iokit-user-client-class "AppleARMIODevice")
(iokit-user-client-class "IOPlatformExpertDevice"))))
(allow iokit*
	(require-all
		(extension-class "com.apple.webkit.extension.iokit")
		(entitlement-is-present "b'com.apple.security.ts.webkit-client'")))
(allow iokit-issue-extension
	(extension "b'com.apple.security.exception.iokit-user-client-class'")
	(require-all
		(iokit-user-client-class "IOMobileFramebufferUserClient")
		(entitlement-is-bool-true "b'com.apple.security.ts.framebuffer-access'"))
	(require-all
		(iokit-user-client-class "RootDomainUserClient")
		(entitlement-is-bool-true "b'com.apple.security.ts.power-assertions'"))
	(require-all
		(iokit-user-client-class "RootDomainUserClient")
		(require-any
			(entitlement-is-bool-true "b'com.apple.security.ts.identity-services-receive-file'")
			(entitlement-is-bool-true "b'com.apple.security.ts.identity-services-client'")))
	(require-all
		(iokit-user-client-class "AppleKeyStoreUserClient")
		(require-any
			(entitlement-is-bool-true "b'com.apple.security.network.client'")
			(entitlement-is-bool-true "b'com.apple.security.ts.mobile-keybag-access'")))
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.ts.ane-client'")
		(require-any (iokit-user-client-class "H11ANEInDirectPathClient")
(iokit-user-client-class "AppleVirtIONeuralEngineDeviceUserClient")))
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.ts.render-images'")
		(require-any
			(iokit-user-client-class "AGXDevice")
			(iokit-user-client-class "AppleJPEGDriverUserClient")
			(iokit-user-client-class "IOSurfaceAcceleratorClient")
			(iokit-user-client-class "IOSurfaceRootUserClient")
			(iokit-user-client-class "IOMobileFramebufferUserClient")))
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.ts.opengl-or-metal'")
		(require-any
			(require-any (iokit-user-client-class "IOAccelDevice2")
(iokit-user-client-class "IOAccelContext2")
(iokit-user-client-class "IOAccelSharedUserClient2"))
			(iokit-user-client-class "IOGPUDeviceUserClient")
			(require-any (iokit-connection "IOGPU")
(iokit-connection "IOGraphicsAccelerator2"))
			(require-any (iokit-user-client-class "IOAccelDevice")
(iokit-user-client-class "IOAccelContext")
(iokit-user-client-class "IOAccelSubmitter2")
(iokit-user-client-class "IOAccelSharedUserClient"))
			(iokit-user-client-class "AGXDevice")
			(iokit-user-client-class "AGXCommandQueue")
			(iokit-user-client-class "AGXSharedUserClient")))
	(require-all
		(iokit-user-client-class "AppleKeyStoreUserClient")
		(entitlement-is-bool-true "b'com.apple.security.ts.addressbook'"))
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.ts.addressbook'")
		(require-any
			(iokit-user-client-class "AppleJPEGDriverUserClient")
			(iokit-user-client-class "IOSurfaceAcceleratorClient")
			(iokit-user-client-class "IOSurfaceRootUserClient")
			(iokit-user-client-class "IOMobileFramebufferUserClient")
			(iokit-user-client-class "AGXDevice")))
	(require-all
		(iokit-user-client-class "RootDomainUserClient")
		(require-any
			(signing-identifier "com.apple.facetimemessagestored")
			(signing-identifier "com.apple.Carousel")
			(require-any (signing-identifier "com.apple.announced")
(signing-identifier "com.apple.FTLivePhotoService")))))
(allow iokit-open*
	(iokit-user-client-class "AppleKeyStore")
	(entitlement-is-bool-true "b'com.apple.security.exception.iokit-user-client-class'")
	(entitlement-is-bool-true "b'com.apple.security.ts.render-images'")
	(require-not (entitlement-is-bool-true "b'com.apple.security.ts.addressbook'"))
	(iokit-user-client-class "AppleJPEGDriver")
	(iokit-user-client-class "IOSurfaceRoot")
	(iokit-user-client-class "AppleCLCD")
	(iokit-user-client-class "AGXAcceleratorG")
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.ts.framebuffer-access'")
		(require-any
			(iokit-user-client-class "AppleCLCD")
			(iokit-user-client-class "AGXAcceleratorG")))
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.ts.ane-client'")
		(require-any (iokit-user-client-class "H11ANEIn")
(iokit-user-client-class "AppleVirtIONeuralEngineDevice")))
	(require-all
		(iokit-user-client-class "IOPMrootDomain")
		(require-any
			(entitlement-is-bool-true "b'com.apple.security.ts.identity-services-receive-file'")
			(entitlement-is-bool-true "b'com.apple.security.ts.identity-services-client'")
			(entitlement-is-bool-true "b'com.apple.security.ts.power-assertions'"))))
(allow iokit-open-user-client
	(signing-identifier "com.apple.SoundBoard")
	(require-all
		(signing-identifier "com.apple.thermalmonitord")
		(require-any
			(iokit-user-client-class "AppleVTempDispatcher")
			(require-all
				(iokit-user-client-class "IOPMPowerSource")
				(require-any
					(iokit-property "AppleChargeRateLimitIndex")
					(iokit-property "DeviceOpenedByEventSystem")))
			(require-all
				(iokit-property "AppleARMPerformanceControllerDVDFactor")
				(iokit-user-client-class "ApplePMGR"))
			(require-all
				(iokit-property "lts-ctrl-0-")
				(iokit-user-client-class "ApplePMPv2"))
			(require-all
				(require-any (iokit-property "GPUMaxPower")
(iokit-property "CameraStrobeMaxLoad")
(iokit-property "EnableBatteryAgingModel")
(iokit-property "BaselineSystemCapability")
(iokit-property "UseBaselineSystemCapability")
(iokit-property "LifetimeServoDieTemperatureTargetPropertyKey"))
				(require-any (iokit-user-client-class "ApplePMP")
(iokit-user-client-class "ApplePPM")
(iokit-user-client-class "AppleDieTempController")))
			(require-all
				(iokit-user-client-class "AGXAcceleratorG")
				(require-any (iokit-property "AbsoluteTarget")
(iokit-property "SetMaxGPUAbsolutePower")
(iokit-property "LifetimeServoFastDieTemperatureTarget")))
			(require-all
				(iokit-user-client-class "AppleCLPC")
				(require-any (iokit-property "`cpu-avg-power-target-w2r")
(iokit-property "`cpu-avg-limiter-input-w2r")
(iokit-property "`gpu-avg-power-target-w2r")
(iokit-property "`pkg-hip-power-target")
(iokit-property "`pkg-low-power-target")
(iokit-property "`pkg-avg-therm-power-target")
(iokit-property "`pkg-power-zone-metric-w2r-0")
(iokit-property "`pkg-power-split-cpu-fraction")))))
	(require-all
		(signing-identifier "com.apple.SoundBoard")
		(require-any
			(iokit-user-client-class "IOHIDEventServiceUserClient")
			(require-all
				(iokit-user-client-class "IOPMrootDomain")
				(require-any (iokit-property "System Boot Complete")
(iokit-property "System Idle Seconds")
(iokit-property "System Idle Milliseconds")))))
	(require-all
		(iokit-property "DeviceOpenedByEventSystem")
		(iokit-user-client-class "AppleMultitouchDevice")
		(signing-identifier "com.apple.SoundBoard"))
	(require-all
		(signing-identifier "com.apple.SoundBoard")
		(require-any
			(require-all
				(iokit-user-client-class "MiniDisplayDriver")
				(require-any (iokit-property "RegisterLUTData")
(iokit-property "RegisterLUTInfo")))
			(require-all
				(iokit-user-client-class "AppleARMBacklight")
				(require-any (iokit-property "LogLevel")
(iokit-property "CompensationTweak")
(iokit-property "brightness-nits")
(iokit-property "brightness-nits-cap")
(iokit-property "DisplayBrightness")
(iokit-property "DisplayBrightnessNitsNVRAM")
(iokit-property "DisplayBrightnessSliderPosition")))))
	(require-all
		(iokit-user-client-class "ApplePeppyUserClient")
		(iokit-property "OOBFlag")
		(signing-identifier "com.apple.SoundBoard"))
	(require-all
		(signing-identifier "com.apple.audiomxd")
		(require-any
			(require-all
				(iokit-property "voice-trigger-configuration")
				(iokit-user-client-class "com_apple_audio_IOBorealisOwlUserClient"))
			(require-all
				(iokit-property "exclusive access owner")
				(iokit-user-client-class "IOAudio2Device"))
			(require-all
				(iokit-property "Enable")
				(iokit-user-client-class "AppleHDMIPortControl"))
			(require-all
				(iokit-property "System Latency")
				(require-any (iokit-user-client-class "AppleEARCAudio")
(iokit-user-client-class "AppleSiI9437Audio")))
			(require-all
				(iokit-property "kPropertyConfiguration")
				(iokit-user-client-class "AppleAOPVoiceTriggerUserClient"))))
	(require-all
		(iokit-property "exclusive access owner")
		(iokit-user-client-class "IOAudio2Device")
		(signing-identifier "com.apple.darwinaudiod"))
	(require-all
		(iokit-property "BondManagement")
		(iokit-user-client-class "AppleEmbeddedBluetoothDeviceManagement")
		(signing-identifier "com.apple.BTLEServer"))
	(require-all
		(iokit-property "kAppleI2CEthernetLomEnable")
		(iokit-user-client-class "AppleI2CEthernetAquantiaControllerBSD")
		(signing-identifier "com.apple.lightsoutmanagementd"))
	(require-all
		(require-any (iokit-property "GameControllerSupportedHIDDevice")
(iokit-property "IOHIDDeviceForceInterfaceRematch"))
		(iokit-user-client-class "IOHIDLibUserClient")
		(signing-identifier "com.apple.GameController.gamecontrollerd"))
	(require-all
		(require-any (iokit-property "System Boot Complete")
(iokit-property "System Idle Seconds")
(iokit-property "System Idle Milliseconds"))
		(iokit-user-client-class "IOPMrootDomain")
		(signing-identifier "com.apple.SurfBoard")))
(allow ipc-posix*
	(ipc-posix-name-prefix "${ENTITLEMENT:com.apple.security.ts.ipc-posix-sem}")
	(extension "b'com.apple.sandbox.application-group'")
	(require-all
		(ipc-posix-name "purplebuddy.sentinel")
		(require-any
			(signing-identifier "com.apple.SurfBoard")
			(require-any (signing-identifier "com.apple.SoundBoard")
(signing-identifier "com.apple.ClarityBoard"))))
	(require-all
		(ipc-posix-name "installcood.f.")
		(signing-identifier "com.apple.managedappdistributiond")))
(allow ipc-posix-issue-extension
	(require-all
		(ipc-posix-name "purplebuddy.sentinel")
		(require-any
			(signing-identifier "com.apple.SurfBoard")
			(require-any (signing-identifier "com.apple.SoundBoard")
(signing-identifier "com.apple.ClarityBoard")))))
(allow ipc-posix-sem*
	(require-any (ipc-posix-name "purplebuddy.sentinel")
(ipc-posix-name "containermanagerd.fb_check")))
(allow ipc-posix-sem-unlink
	(ipc-posix-name "")
	(extension "b'com.apple.sandbox.application-group'")
	(require-all
		(ipc-posix-name-regex #"/FBW[0-9]:com[UNSUPPORTED]apple[UNSUPPORTED]frontboard[UNSUPPORTED]syst")
		(signing-identifier "com.apple.SurfBoard"))
	(require-all
		(ipc-posix-name "AppleABL.")
		(signing-identifier "com.apple.audiomxd")))
(allow ipc-posix-sem-wait
	(ipc-posix-name "apple.cfprefs.")
	(ipc-posix-name "")
	(require-all
		(ipc-posix-name "apple.shm.notification_center")
		(require-not (entitlement-is-bool-true "b'com.apple.security.on-demand-install-capable'")))
	(require-all
		(ipc-posix-name "/com.apple.AppSSO.version")
		(require-any
			(entitlement-is-bool-true "b'com.apple.security.network.server'")
			(entitlement-is-bool-true "b'com.apple.security.network.client'")))
	(require-all
		(ipc-posix-name-regex #"/FBW[0-9]:com.apple.frontboard.syst")
		(require-any
			(signing-identifier "com.apple.Carousel")
			(require-any (signing-identifier "com.apple.SoundBoard")
(signing-identifier "com.apple.ClarityBoard")))))
(allow ipc-posix-shm*
	(require-all
		(ipc-posix-name-regex #"/FBW[0-9]:com.apple.frontboard.syst")
		(require-any
			(signing-identifier "com.apple.Carousel")
			(require-any (signing-identifier "com.apple.SoundBoard")
(signing-identifier "com.apple.ClarityBoard")))))
(allow ipc-posix-shm-write*
	(ipc-posix-name))
(allow ipc-sysv-sem
	(signing-identifier "com.apple.security.cryptexd"))
(allow ipc-sysv-shm)
(allow lsopen)
(allow mach*)
(allow mach-bootstrap)
(allow mach-host-exception-port-set
	(require-all
		(extension-class "com.apple.webkit.extension.mach")
		(entitlement-is-present "b'com.apple.security.ts.webkit-client'"))
	(require-all
		(extension-class "com.apple.media-device-discovery.logging")
		(signing-identifier "com.apple.deviceaccessd")
		(require-any
			(global-name "com.apple.logd.events")
			(global-name "com.apple.logd"))))
(allow mach-host-special-port-set)
(allow mach-issue-extension
	(global-name "com.apple.pluginkit.pkd")
	(global-name "com.apple.pairedsyncd.syncstate")
	(global-name "com.apple.nano.nanoregistry.paireddeviceregistry")
	(xpc-service-name "com.apple.extensionkitservice")
	(extension "b'com.apple.pluginkit.plugin-service'")
	(extension "b'com.apple.security.exception.mach-lookup.global-name'")
	(extension "b'com.apple.security.exception.mach-lookup.local-name'")
	(global-name "com.apple.diagnosticd")
	(require-any (global-name "com.apple.appsupport.cplogd")
(global-name "com.apple.lsd")
(global-name "com.apple.lsd.icons")
(global-name "com.apple.coreservices.lsuseractivitymanager.xpc"))
	(local-name "com.apple.cfprefsd.agent")
	(global-name "com.apple.logd.events")
	(global-name "com.apple.runningboard")
	(require-any (global-name "com.apple.gputools.service")
(global-name "com.apple.hangtracerd")
(global-name "com.apple.hangtracermonitor"))
	(require-any (global-name "com.apple.cfprefsd.daemon")
(global-name "com.apple.cfprefsd.daemon.system"))
	(global-name "com.apple.system.libinfo.muser")
	(global-name "com.apple.system.logger")
	(global-name "com.apple.duetknowledged.activity")
	(global-name "com.apple.aggregated")
	(global-name "com.apple.lsd.openurl")
	(global-name "com.apple.analyticsd")
	(global-name "com.apple.ctkd.token-client")
	(global-name "com.apple.managedconfiguration.profiled.public")
	(global-name "com.apple.CoreAuthentication.daemon")
	(global-name "com.apple.mobilegestalt.xpc")
	(global-name "com.apple.containermanagerd")
	(global-name "com.apple.lsd.mapdb")
	(global-name "com.apple.cfprefsd.agent")
	(global-name "com.apple.containermanagerd.system")
	(global-name "com.apple.distributed_notifications@1v3")
	(extension "b'com.apple.sandbox.application-group'")
	(global-name "com.apple.lsd.open")
	(global-name "com.apple.logd")
	(global-name "com.apple.tccd")
	(global-name "com.apple.lsd.advertisingidentifiers")
	(require-all
		(entitlement-is-present "b'com.apple.security.ts.webkit-client'")
		(require-any
			(require-any (xpc-service-name "com.apple.WebKit.Networking")
(xpc-service-name "com.apple.WebKit.WebAuthn")
(xpc-service-name "com.apple.WebKit.WebContent"))
			(xpc-service-name "com.apple.WebKit.GPU")
			(xpc-service-name "com.apple.WebKit.WebContent.CaptivePortal")))
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.network.client'")
		(require-any
			(global-name "com.apple.securityd")
			(global-name "com.apple.SystemConfiguration.DNSConfiguration")
			(global-name "com.apple.SystemConfiguration.NetworkInformation")
			(global-name "com.apple.SystemConfiguration.helper")
			(global-name "com.apple.commcenter.xpc")
			(global-name "com.apple.SystemConfiguration.configd")
			(global-name "com.apple.accountsd.accountmanager")
			(global-name "com.apple.GSSCred")
			(global-name "com.apple.cfnetwork.cfnetworkagent")
			(global-name "com.apple.nehelper")
			(global-name "com.apple.nesessionmanager")
			(global-name "com.apple.networkserviceproxy.fetch-token")
			(global-name "com.apple.dnssd.service")
			(global-name "com.apple.usymptomsd")
			(global-name "com.apple.trustd")
			(global-name "com.apple.SystemConfiguration.PPPController")
			(global-name "com.apple.commcenter.cupolicy.xpc")
			(global-name "com.apple.nsurlsessiond")
			(global-name "com.apple.symptomsd")
			(global-name "com.apple.AppSSO.service-xpc")
			(global-name "com.apple.symptoms.symptomsd.managed_events")
			(global-name "com.apple.networkd")
			(global-name "com.apple.cfnetwork.AuthBrokerAgent")
			(global-name "com.apple.SystemConfiguration.SCNetworkReachability")
			(require-all
				(global-name "com.apple.ak.auth.xpc")
				(require-any
					(process-attribute is-apple-signed-executable)
					(entitlement-is-bool-true "b'com.apple.authkit.client'")
					(entitlement-is-bool-true "b'com.apple.authkit.client.internal'")
					(entitlement-is-bool-true "b'com.apple.authkit.client.private'")))
			(require-all
				(global-name "com.apple.ak.anisette.xpc")
				(require-any
					(process-attribute is-apple-signed-executable)
					(entitlement-is-bool-true "b'com.apple.authkit.client'")
					(entitlement-is-bool-true "b'com.apple.authkit.client.internal'")
					(entitlement-is-bool-true "b'com.apple.authkit.client.private'")))
			(require-all
				(global-name "com.apple.networkd_privileged")
				(require-any
					(entitlement-is-bool-true "b'com.apple.networkd.modify_settings'")
					(entitlement-is-bool-true "b'com.apple.networkd.disable_opportunistic'")
					(entitlement-is-bool-true "b'com.apple.networkd.advisory_socket'")
					(entitlement-is-bool-true "b'com.apple.networkd_privileged'")
					(entitlement-is-bool-true "b'com.apple.networkd.persistent_interface'")))))
	(require-all
		(global-name "com.apple.quicklook.ThumbnailsAgent")
		(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'"))
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.ts.play-media'")
		(require-any
			(require-any (global-name "com.apple.coremedia.samplebufferaudiorenderer.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.audioprocessingtap.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.samplebufferrendersynchronizer.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.figcontentkeyboss.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.figcontentkeysession.xpc"))
			(global-name "com.apple.mediaserverd")
			(require-any (global-name "com.apple.timesync.manager")
(global-name "com.apple.timesync.expositor"))
			(global-name "com.apple.coremedia.mediaplaybackd.assetimagegenerator.xpc")
			(global-name "com.apple.coremedia.mediaplaybackd.cpeprotector.xpc")
			(require-any (global-name "com.apple.coremedia.figcpecryptor")
(global-name "com.apple.coremedia.mediaplaybackd.figcpecryptor.xpc"))
			(require-any (global-name "com.apple.coremedia.samplegenerator.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.samplegenerator.xpc"))
			(global-name "com.apple.coremedia.sandboxserver.xpc")
			(require-any (global-name "com.apple.coremedia.audioprocessingtap.xpc")
(global-name "com.apple.coremedia.samplebufferrendersynchronizer.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.samplebufferaudiorenderer.xpc"))
			(global-name "com.apple.coremedia.endpointremotecontrolsession.xpc")
			(global-name "com.apple.coremedia.mediaplaybackd.player.xpc")
			(global-name "com.apple.audio.AudioSession")
			(require-any (global-name "com.apple.coremedia.videotarget.xpc")
(global-name "com.apple.coremedia.assetcacheinspector")
(global-name "com.apple.coremedia.mediaplaybackd.videotarget.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.assetcacheinspector.xpc"))
			(global-name "com.apple.coremedia.routingcontext.xpc")
			(global-name "com.apple.coremedia.figcontentkeysession.xpc")
			(global-name "com.apple.coremedia.mediaplaybackd.videocompositor.xpc")
			(global-name "com.apple.coremedia.sts")
			(global-name "com.apple.coremedia.mediaparserd.formatreader.xpc")
			(require-any (global-name "com.apple.coremedia.capturesource")
(global-name "com.apple.coremedia.capturesession"))
			(global-name "com.apple.coremedia.mediaplaybackd.bytestream.xpc")
			(require-any (global-name "com.apple.coremedia.cpeprotector.xpc")
(global-name "com.apple.coremedia.routingsessionmanager.xpc"))
			(global-name "com.apple.springboard.backgroundappservices")
			(global-name "com.apple.coremedia.formatreader.xpc")
			(global-name "com.apple.coremedia.externalstoragedevicemanager.xpc")
			(global-name "com.apple.coremedia.endpoint.xpc")
			(global-name "com.apple.coremedia.mediaplaybackd.sandboxserver.xpc")
			(require-any (global-name "com.apple.coremedia.remaker")
(global-name "com.apple.coremedia.mediaplaybackd.remaker.xpc"))
			(global-name "com.apple.coremedia.player.xpc")
			(global-name "com.apple.airplay.apsynccontroller.xpc")
			(global-name "com.apple.itunesstored.xpc")
			(require-any (global-name "com.apple.coremedia.remotequeue")
(global-name "com.apple.coremedia.audiodeviceclock.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.audiodeviceclock.xpc"))
			(global-name "com.apple.coremedia.videocompositor")
			(global-name "com.apple.coremedia.customurlloader.xpc")
			(global-name "com.apple.coremedia.figcontentkeyboss.xpc")
			(global-name "com.apple.audioanalyticsd")
			(require-any (global-name "com.apple.coremedia.routediscoverer.xpc")
(global-name "com.apple.coremedia.volumecontroller.xpc"))
			(global-name "com.apple.coremedia.bytestream.xpc")
			(global-name "com.apple.coremedia.systemcontroller.xpc")
			(global-name "com.apple.coremedia.assetimagegenerator.xpc")
			(global-name "com.apple.coremedia.admin")
			(global-name "com.apple.coremedia.asset.xpc")
			(global-name "com.apple.itunescloudd.xpc")
			(global-name "com.apple.pegasus")
			(global-name "com.apple.coremedia.mediaplaybackd.customurlloader.xpc")
			(global-name "com.apple.coremedia.visualcontext.xpc")
			(global-name "com.apple.privacyaccountingd")
			(global-name "com.apple.coremedia.mediaplaybackd.visualcontext.xpc")
			(global-name "com.apple.coremedia.mediaplaybackd.formatreader.xpc")
			(global-name "com.apple.timesync.ptp.manager")
			(global-name "com.apple.coremedia.mediaplaybackd.asset.xpc")
			(global-name "com.apple.coremedia.sandboxserver")))
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'")
		(require-any
			(global-name "com.apple.FileCoordination")
			(global-name "com.apple.FileProvider")
			(global-name "com.apple.itunescloudd.xpc")
			(global-name "com.apple.itunesstored.xpc")
			(require-any (global-name "com.apple.timesync.manager")
(global-name "com.apple.timesync.expositor"))
			(require-any (global-name "com.apple.coremedia.audioprocessingtap.xpc")
(global-name "com.apple.coremedia.samplebufferrendersynchronizer.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.samplebufferaudiorenderer.xpc"))
			(global-name "com.apple.timesync.ptp.manager")
			(global-name "com.apple.librariand")
			(global-name "com.apple.bird")
			(global-name "com.apple.bird.token")
			(global-name "com.apple.audio.AudioSession")
			(global-name "com.apple.springboard.backgroundappservices")
			(global-name "com.apple.airplay.apsynccontroller.xpc")
			(global-name "com.apple.audioanalyticsd")
			(require-any (global-name "com.apple.coremedia.samplebufferaudiorenderer.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.audioprocessingtap.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.samplebufferrendersynchronizer.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.figcontentkeyboss.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.figcontentkeysession.xpc"))
			(global-name "com.apple.coremedia.mediaplaybackd.assetimagegenerator.xpc")
			(global-name "com.apple.coremedia.mediaplaybackd.cpeprotector.xpc")
			(require-any (global-name "com.apple.coremedia.figcpecryptor")
(global-name "com.apple.coremedia.mediaplaybackd.figcpecryptor.xpc"))
			(require-any (global-name "com.apple.coremedia.samplegenerator.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.samplegenerator.xpc"))
			(global-name "com.apple.privacyaccountingd")
			(global-name "com.apple.coremedia.mediaplaybackd.player.xpc")
			(require-any (global-name "com.apple.coremedia.videotarget.xpc")
(global-name "com.apple.coremedia.assetcacheinspector")
(global-name "com.apple.coremedia.mediaplaybackd.videotarget.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.assetcacheinspector.xpc"))
			(global-name "com.apple.coremedia.mediaparserd.formatreader.xpc")
			(global-name "com.apple.coremedia.mediaplaybackd.bytestream.xpc")
			(require-any (global-name "com.apple.coremedia.remaker")
(global-name "com.apple.coremedia.mediaplaybackd.remaker.xpc"))
			(global-name "com.apple.coremedia.visualcontext.xpc")
			(global-name "com.apple.coremedia.asset.xpc")
			(require-any (global-name "com.apple.coremedia.remotequeue")
(global-name "com.apple.coremedia.audiodeviceclock.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.audiodeviceclock.xpc"))
			(global-name "com.apple.pegasus")
			(global-name "com.apple.coremedia.mediaplaybackd.customurlloader.xpc")
			(global-name "com.apple.coremedia.mediaplaybackd.visualcontext.xpc")
			(global-name "com.apple.coremedia.mediaplaybackd.formatreader.xpc")
			(global-name "com.apple.coremedia.mediaplaybackd.asset.xpc")
			(global-name "com.apple.coremedia.mediaplaybackd.sandboxserver.xpc")
			(global-name "com.apple.coremedia.mediaplaybackd.videocompositor.xpc")
			(global-name "com.apple.coremedia.figcontentkeyboss.xpc")
			(global-name "com.apple.mediaserverd")
			(global-name "com.apple.coremedia.sandboxserver.xpc")
			(require-any (global-name "com.apple.coremedia.cpeprotector.xpc")
(global-name "com.apple.coremedia.routingsessionmanager.xpc"))
			(global-name "com.apple.coremedia.routingcontext.xpc")
			(global-name "com.apple.coremedia.figcontentkeysession.xpc")
			(global-name "com.apple.coremedia.endpointremotecontrolsession.xpc")
			(require-any (global-name "com.apple.coremedia.capturesource")
(global-name "com.apple.coremedia.capturesession"))
			(require-any (global-name "com.apple.coremedia.routediscoverer.xpc")
(global-name "com.apple.coremedia.volumecontroller.xpc"))
			(global-name "com.apple.coremedia.formatreader.xpc")
			(global-name "com.apple.coremedia.sandboxserver")
			(global-name "com.apple.coremedia.endpoint.xpc")
			(global-name "com.apple.coremedia.customurlloader.xpc")
			(global-name "com.apple.coremedia.sts")
			(global-name "com.apple.coremedia.player.xpc")
			(global-name "com.apple.coremedia.videocompositor")
			(global-name "com.apple.coremedia.externalstoragedevicemanager.xpc")
			(global-name "com.apple.coremedia.bytestream.xpc")
			(global-name "com.apple.coremedia.systemcontroller.xpc")
			(global-name "com.apple.coremedia.assetimagegenerator.xpc")
			(global-name "com.apple.coremedia.admin")))
	(require-all
		(process-attribute is-apple-signed-executable)
		(global-name "com.apple.audioanalyticsd")
		(entitlement-is-bool-true "b'com.apple.security.ts.play-audio'"))
	(require-all
		(global-name "com.apple.revisiond")
		(require-any
			(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'")
			(entitlement-is-bool-true "b'com.apple.security.ts.revisiond-client'")))
	(require-all
		(xpc-service-name "com.apple.ImageIOXPCService")
		(entitlement-is-bool-true "b'com.apple.security.ts.render-images'"))
	(require-all
		(global-name "com.apple.cvmsServ")
		(entitlement-is-bool-true "b'com.apple.security.ts.opengl-or-metal'"))
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.ts.springboard-services'")
		(require-any
			(global-name "com.apple.usernotifications.remotenotificationservice")
			(global-name "com.apple.springboard.backgroundappservices")
			(global-name "com.apple.springboard.services")
			(global-name "com.apple.usernotifications.usernotificationservice")
			(global-name "com.apple.usernotifications.listener")))
	(require-all
		(global-name "com.apple.gpumemd.source")
		(entitlement-is-bool-true "b'com.apple.security.ts.opengl-or-metal'"))
	(require-all
		(xpc-service-name "com.apple.AGXCompilerService")
		(entitlement-is-bool-true "b'com.apple.security.ts.opengl-or-metal'"))
	(require-all
		(xpc-service-name "com.apple.MTLCompilerService")
		(entitlement-is-bool-true "b'com.apple.security.ts.opengl-or-metal'"))
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.ts.power-assertions'")
		(require-any
			(global-name "com.apple.powerlog.plxpclogger.xpc")
			(global-name "com.apple.iokit.powerdxpc")
			(global-name "com.apple.PowerManagement.control")))
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.ts.play-audio'")
		(require-any
			(global-name "com.apple.audio.AURemoteIOServer")
			(xpc-service-name "com.apple.audio.toolbox.reporting.service")
			(xpc-service-name "com.apple.audio.analytics.service")))
	(require-all
		(global-name "com.apple.AppSSO.service-xpc")
		(require-any
			(entitlement-is-bool-true "b'com.apple.security.network.server'")
			(require-all
				(xpc-service-name "com.apple.ImageIOXPCService")
				(entitlement-is-bool-true "b'com.apple.security.ts.addressbook'"))))
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.network.server'")
		(require-any
			(global-name "com.apple.commcenter.xpc")
			(global-name "com.apple.commcenter.cupolicy.xpc")
			(global-name "com.apple.securityd")
			(global-name "com.apple.trustd")
			(global-name "com.apple.usymptomsd")
			(global-name "com.apple.symptomsd")
			(global-name "com.apple.symptoms.symptomsd.managed_events")
			(global-name "com.apple.SystemConfiguration.DNSConfiguration")
			(global-name "com.apple.SystemConfiguration.NetworkInformation")
			(global-name "com.apple.SystemConfiguration.helper")
			(global-name "com.apple.SystemConfiguration.configd")
			(global-name "com.apple.SystemConfiguration.PPPController")
			(global-name "com.apple.SystemConfiguration.SCNetworkReachability")))
	(require-all
		(global-name "com.apple.nesessionmanager")
		(require-any
			(entitlement-is-bool-true "b'com.apple.security.network.server'")
			(require-all
				(xpc-service-name "com.apple.ImageIOXPCService")
				(entitlement-is-bool-true "b'com.apple.security.ts.addressbook'"))))
	(require-all
		(global-name "com.apple.dnssd.service")
		(require-any
			(entitlement-is-bool-true "b'com.apple.security.network.server'")
			(require-all
				(xpc-service-name "com.apple.ImageIOXPCService")
				(entitlement-is-bool-true "b'com.apple.security.ts.addressbook'"))))
	(require-all
		(global-name "com.apple.mobile.heartbeat")
		(require-any
			(entitlement-is-bool-true "b'com.apple.security.ts.lockdown-service'")
			(require-all
				(xpc-service-name "com.apple.ImageIOXPCService")
				(entitlement-is-bool-true "b'com.apple.security.ts.addressbook'"))))
	(require-all
		(global-name "com.apple.securityd")
		(entitlement-is-bool-true "b'com.apple.security.ts.lockdown-service'"))
	(require-all
		(global-name "com.apple.trustd")
		(entitlement-is-bool-true "b'com.apple.security.ts.lockdown-service'"))
	(require-all
		(global-name "com.apple.locationd.spi")
		(require-any
			(entitlement-is-bool-true "b'com.apple.security.ts.location-services'")
			(require-all
				(xpc-service-name "com.apple.ImageIOXPCService")
				(entitlement-is-bool-true "b'com.apple.security.ts.addressbook'"))))
	(require-all
		(global-name "com.apple.locationd.registration")
		(entitlement-is-bool-true "b'com.apple.security.ts.location-services'"))
	(require-all
		(global-name "com.apple.locationd.synchronous")
		(entitlement-is-bool-true "b'com.apple.security.ts.location-services'"))
	(require-all
		(global-name "com.apple.PowerManagement.control")
		(entitlement-is-bool-true "b'com.apple.security.ts.identity-services-receive-file'"))
	(require-all
		(global-name "com.apple.iokit.powerdxpc")
		(entitlement-is-bool-true "b'com.apple.security.ts.identity-services-receive-file'"))
	(require-all
		(global-name "com.apple.powerlog.plxpclogger.xpc")
		(entitlement-is-bool-true "b'com.apple.security.ts.identity-services-receive-file'"))
	(require-all
		(global-name "com.apple.marco")
		(require-any
			(entitlement-is-bool-true "b'com.apple.security.ts.identity-services-receive-file'")
			(entitlement-is-bool-true "b'com.apple.security.ts.identity-services-client'")
			(require-all
				(xpc-service-name "com.apple.ImageIOXPCService")
				(entitlement-is-bool-true "b'com.apple.security.ts.addressbook'"))))
	(require-all
		(global-name "com.apple.identityservicesd.embedded.auth")
		(require-any
			(entitlement-is-bool-true "b'com.apple.security.ts.identity-services-receive-file'")
			(entitlement-is-bool-true "b'com.apple.security.ts.identity-services-client'")
			(require-all
				(xpc-service-name "com.apple.ImageIOXPCService")
				(entitlement-is-bool-true "b'com.apple.security.ts.addressbook'"))))
	(require-all
		(global-name "com.apple.powerlog.plxpclogger.xpc")
		(require-any
			(entitlement-is-bool-true "b'com.apple.security.ts.identity-services-client'")
			(require-all
				(xpc-service-name "com.apple.ImageIOXPCService")
				(entitlement-is-bool-true "b'com.apple.security.ts.addressbook'"))))
	(require-all
		(global-name "com.apple.iokit.powerdxpc")
		(require-any
			(entitlement-is-bool-true "b'com.apple.security.ts.identity-services-client'")
			(require-all
				(xpc-service-name "com.apple.ImageIOXPCService")
				(entitlement-is-bool-true "b'com.apple.security.ts.addressbook'"))))
	(require-all
		(global-name "com.apple.PowerManagement.control")
		(require-any
			(entitlement-is-bool-true "b'com.apple.security.ts.identity-services-client'")
			(require-all
				(xpc-service-name "com.apple.ImageIOXPCService")
				(entitlement-is-bool-true "b'com.apple.security.ts.addressbook'"))))
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.ts.geoservices'")
		(require-any
			(require-any (global-name "com.apple.geod")
(global-name "com.apple.nanomaps.xpc.GeoServices"))
			(global-name "com.apple.geoanalyticsd")))
	(require-all
		(global-name "com.apple.ckdiscretionaryd.debug")
		(xpc-service-name "com.apple.ImageIOXPCService")
		(entitlement-is-bool-true "b'com.apple.security.ts.addressbook'"))
	(require-all
		(require-any (global-name "com.apple.cloudd.debug")
(global-name "com.apple.cloudkit.partlycloudd.debug"))
		(xpc-service-name "com.apple.ImageIOXPCService")
		(entitlement-is-bool-true "b'com.apple.security.ts.addressbook'"))
	(require-all
		(global-name "com.apple.cloudkit.partlycloudd")
		(xpc-service-name "com.apple.ImageIOXPCService")
		(entitlement-is-bool-true "b'com.apple.security.ts.addressbook'"))
	(require-all
		(global-name "com.apple.ckdiscretionaryd")
		(entitlement-is-bool-true "b'com.apple.security.ts.cloudkit-client'"))
	(require-all
		(global-name "com.apple.cloudd")
		(entitlement-is-bool-true "b'com.apple.security.ts.cloudkit-client'"))
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.ts.asset-access'")
		(require-any
			(global-name "com.apple.mobileasset.autoasset")
			(global-name "com.apple.mobileassetd")
			(global-name "com.apple.mobileassetd.v2")))
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.ts.asset-access.with-media-playback'")
		(require-any
			(global-name "com.apple.itunescloudd.xpc")
			(global-name "com.apple.itunesstored.xpc")
			(require-any (global-name "com.apple.timesync.manager")
(global-name "com.apple.timesync.expositor"))
			(require-any (global-name "com.apple.coremedia.audioprocessingtap.xpc")
(global-name "com.apple.coremedia.samplebufferrendersynchronizer.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.samplebufferaudiorenderer.xpc"))
			(global-name "com.apple.timesync.ptp.manager")
			(global-name "com.apple.mobileasset.autoasset")
			(global-name "com.apple.mobileassetd")
			(global-name "com.apple.mobileassetd.v2")
			(global-name "com.apple.audio.AudioSession")
			(global-name "com.apple.springboard.backgroundappservices")
			(global-name "com.apple.airplay.apsynccontroller.xpc")
			(global-name "com.apple.audioanalyticsd")
			(require-any (global-name "com.apple.coremedia.samplebufferaudiorenderer.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.audioprocessingtap.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.samplebufferrendersynchronizer.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.figcontentkeyboss.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.figcontentkeysession.xpc"))
			(global-name "com.apple.coremedia.mediaplaybackd.assetimagegenerator.xpc")
			(global-name "com.apple.coremedia.mediaplaybackd.cpeprotector.xpc")
			(require-any (global-name "com.apple.coremedia.figcpecryptor")
(global-name "com.apple.coremedia.mediaplaybackd.figcpecryptor.xpc"))
			(require-any (global-name "com.apple.coremedia.samplegenerator.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.samplegenerator.xpc"))
			(global-name "com.apple.privacyaccountingd")
			(global-name "com.apple.coremedia.mediaplaybackd.player.xpc")
			(require-any (global-name "com.apple.coremedia.videotarget.xpc")
(global-name "com.apple.coremedia.assetcacheinspector")
(global-name "com.apple.coremedia.mediaplaybackd.videotarget.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.assetcacheinspector.xpc"))
			(global-name "com.apple.coremedia.mediaparserd.formatreader.xpc")
			(global-name "com.apple.coremedia.mediaplaybackd.bytestream.xpc")
			(require-any (global-name "com.apple.coremedia.remaker")
(global-name "com.apple.coremedia.mediaplaybackd.remaker.xpc"))
			(global-name "com.apple.coremedia.visualcontext.xpc")
			(global-name "com.apple.coremedia.asset.xpc")
			(require-any (global-name "com.apple.coremedia.remotequeue")
(global-name "com.apple.coremedia.audiodeviceclock.xpc")
(global-name "com.apple.coremedia.mediaplaybackd.audiodeviceclock.xpc"))
			(global-name "com.apple.pegasus")
			(global-name "com.apple.coremedia.mediaplaybackd.customurlloader.xpc")
			(global-name "com.apple.coremedia.mediaplaybackd.visualcontext.xpc")
			(global-name "com.apple.coremedia.mediaplaybackd.formatreader.xpc")
			(global-name "com.apple.coremedia.mediaplaybackd.asset.xpc")
			(global-name "com.apple.coremedia.mediaplaybackd.sandboxserver.xpc")
			(global-name "com.apple.coremedia.mediaplaybackd.videocompositor.xpc")
			(global-name "com.apple.coremedia.figcontentkeyboss.xpc")
			(global-name "com.apple.mediaserverd")
			(global-name "com.apple.coremedia.sandboxserver.xpc")
			(require-any (global-name "com.apple.coremedia.cpeprotector.xpc")
(global-name "com.apple.coremedia.routingsessionmanager.xpc"))
			(global-name "com.apple.coremedia.routingcontext.xpc")
			(global-name "com.apple.coremedia.figcontentkeysession.xpc")
			(global-name "com.apple.coremedia.endpointremotecontrolsession.xpc")
			(require-any (global-name "com.apple.coremedia.capturesource")
(global-name "com.apple.coremedia.capturesession"))
			(require-any (global-name "com.apple.coremedia.routediscoverer.xpc")
(global-name "com.apple.coremedia.volumecontroller.xpc"))
			(global-name "com.apple.coremedia.formatreader.xpc")
			(global-name "com.apple.coremedia.sandboxserver")
			(global-name "com.apple.coremedia.endpoint.xpc")
			(global-name "com.apple.coremedia.customurlloader.xpc")
			(global-name "com.apple.coremedia.sts")
			(global-name "com.apple.coremedia.player.xpc")
			(global-name "com.apple.coremedia.videocompositor")
			(global-name "com.apple.coremedia.externalstoragedevicemanager.xpc")
			(global-name "com.apple.coremedia.bytestream.xpc")
			(global-name "com.apple.coremedia.systemcontroller.xpc")
			(global-name "com.apple.coremedia.assetimagegenerator.xpc")
			(global-name "com.apple.coremedia.admin")))
	(require-all
		(global-name "com.apple.appleneuralengine")
		(require-any
			(entitlement-is-bool-true "b'com.apple.security.ts.ane-client'")
			(require-all
				(xpc-service-name "com.apple.ImageIOXPCService")
				(entitlement-is-bool-true "b'com.apple.security.ts.addressbook'"))))
	(require-all
		(global-name "com.apple.contactsd")
		(entitlement-is-bool-true "b'com.apple.security.ts.addressbook'"))
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.ts.addressbook'")
		(require-any
			(global-name "com.apple.identityservicesd.idquery.embedded.auth")
			(global-name "com.apple.spotlight.IndexDelegateAgent")
			(global-name "com.apple.accountsd.accountmanager")
			(global-name "com.apple.spotlight.IndexAgent")
			(global-name "com.apple.ABDatabaseDoctor")
			(global-name "com.apple.telephonyutilities.callservicesdaemon.callcapabilities")
			(global-name "com.apple.cmfsyncagent.embedded.auth")
			(require-all
				(xpc-service-name "com.apple.ImageIOXPCService")
				(entitlement-is-bool-true "b'com.apple.security.ts.addressbook'"))))
	(require-all
		(global-name "com.apple.powerlog.plxpclogger.xpc")
		(require-any
			(signing-identifier "com.apple.facetimemessagestored")
			(signing-identifier "com.apple.Carousel")
			(require-any (signing-identifier "com.apple.announced")
(signing-identifier "com.apple.FTLivePhotoService"))))
	(require-all
		(global-name "com.apple.iokit.powerdxpc")
		(require-any
			(signing-identifier "com.apple.facetimemessagestored")
			(signing-identifier "com.apple.Carousel")
			(require-any (signing-identifier "com.apple.announced")
(signing-identifier "com.apple.FTLivePhotoService"))))
	(require-all
		(global-name "com.apple.PowerManagement.control")
		(require-any
			(signing-identifier "com.apple.facetimemessagestored")
			(signing-identifier "com.apple.Carousel")
			(require-any (signing-identifier "com.apple.announced")
(signing-identifier "com.apple.FTLivePhotoService"))))
	(require-all
		(global-name "com.apple.FileCoordination")
		(require-any
			(signing-identifier "com.apple.tursd")
			(require-all
				(global-name "com.apple.FileCoordination")
				(signing-identifier "com.apple.nanophoned"))
			(require-all
				(global-name "com.apple.awdd")
				(signing-identifier "com.apple.nanophoned"))))
	(require-all
		(global-name "com.apple.chrono.event-service.")
		(signing-identifier "com.apple.chronod"))
	(require-all
		(global-name "com.apple.awdd")
		(require-any
			(signing-identifier "com.apple.tursd")
			(require-all
				(global-name "com.apple.FileCoordination")
				(signing-identifier "com.apple.nanophoned"))
			(require-all
				(global-name "com.apple.awdd")
				(signing-identifier "com.apple.nanophoned"))))
	(require-all
		(xpc-service-name-regex #".+")
		(signing-identifier "com.apple.chronod"))
	(require-all
		(global-name "com.apple.medialibraryd.xpc")
		(signing-identifier "com.apple.siriknowledged"))
	(require-all
		(xpc-service-name "com.apple.remotemanagement.")
		(require-any
			(signing-identifier "com.apple.remotemanagementd")
			(signing-identifier "com.apple.RemoteManagementAgent")
			(require-all
				(signing-identifier "com.apple.mlruntimed")
				(b2 00e5 f4bb 13b4))
			(require-all
				(xpc-service-name "com.apple.")
				(require-any
					(require-all
						(b2 00e4 13b6 13b8)
						(require-any
							(signing-identifier "com.apple.ManagedSettingsAgent")
							(signing-identifier "com.apple.diagnosticextensionsd")))
					(require-all
						(b2 00e3 13b9 13ba)
						(signing-identifier "com.apple.installcoordinationd"))))))
	(require-all
		(global-name "com.apple.itunescloudd.xpc")
		(signing-identifier "com.apple.siriknowledged"))
	(require-all
		(global-name "com.apple.marco")
		(require-any
			(signing-identifier "com.apple.Carousel")
			(require-any (signing-identifier "com.apple.announced")
(signing-identifier "com.apple.FTLivePhotoService"))))
	(require-all
		(xpc-service-name "com")
		(require-any
			(require-all
				(signing-identifier "com.apple.mlruntimed")
				(b2 00e5 f4bb 13b4))
			(require-all
				(xpc-service-name "com.apple.")
				(require-any
					(require-all
						(b2 00e4 13b6 13b8)
						(require-any
							(signing-identifier "com.apple.ManagedSettingsAgent")
							(signing-identifier "com.apple.diagnosticextensionsd")))
					(require-all
						(b2 00e3 13b9 13ba)
						(signing-identifier "com.apple.installcoordinationd"))))))
	(require-all
		(global-name "com.apple.identityservicesd.embedded.auth")
		(require-any
			(signing-identifier "com.apple.Carousel")
			(require-any (signing-identifier "com.apple.announced")
(signing-identifier "com.apple.FTLivePhotoService"))))
	(require-all
		(global-name "com.apple.identityservicesd.embedded.auth")
		(signing-identifier "com.apple.facetimemessagestored"))
	(require-all
		(global-name "com.apple.usernotifications.delegate.")
		(require-any
			(signing-identifier "com.apple.Carousel")
			(signing-identifier "com.apple.SurfBoard")))
	(require-all
		(global-name "com.apple.marco")
		(signing-identifier "com.apple.facetimemessagestored"))
	(require-all
		(xpc-service-name "com.apple.DiagnosticExtensions.")
		(require-any
			(require-any (signing-identifier "com.apple.InputUI")
(signing-identifier "com.apple.destinationd")
(signing-identifier "com.apple.donotdisturbd")
(signing-identifier "com.apple.locationpushd")
(signing-identifier "com.apple.symptomsd-diag"))
			(signing-identifier "com.apple.assistantd")
			(signing-identifier "com.apple.diagnosticextensionsd")))
	(require-all
		(xpc-service-name-regex #".+")
		(require-any
			(require-any (signing-identifier "com.apple.InputUI")
(signing-identifier "com.apple.destinationd")
(signing-identifier "com.apple.donotdisturbd")
(signing-identifier "com.apple.locationpushd")
(signing-identifier "com.apple.symptomsd-diag"))
			(signing-identifier "com.apple.assistantd")))
	(require-all
		(global-name "com.apple.coreduetd.people")
		(entitlement-is-bool-true "b'com.apple.coreduetd.people'"))
	(require-all
		(global-name "com.apple.system.notification_center")
		(entitlement-is-bool-true "b'com.apple.security.on-demand-install-capable'"))
	(require-all
		(global-name "com.apple.osanalytics.osanalyticshelper")
		(process-attribute is-apple-signed-executable))
	(require-all
		(xpc-service-name "com.apple.WebKit.")
		(xpc-service-name "com.apple.CoreGraphics.CGPDFService")
		(require-any
			(xpc-service-name-regex #".+")
			(require-all
				(process-attribute is-apple-signed-executable)
				(require-any
					(global-name "com.apple.SharedWebCredentials")
					(global-name "com.apple.datamigrator")
					(global-name "com.apple.Honeybee.event-notify")
					(global-name "com.apple.mobile.usermanagerd.xpc"))))))
(allow mach-priv*
	(require-all
		(debug-mode)
		(process-name "/System/Library/PrivateFrameworks/DVTInstrumentsFoundation.framework/DTServiceHub")))
(allow mach-register
	(target self)
	(require-any (signing-identifier "com.apple.osanalyticshelper")
(signing-identifier "com.apple.gputoolsserviced")
(signing-identifier "com.apple.gputoolstransportd"))
	(require-all
		(debug-mode)
		(process-name "/System/Library/PrivateFrameworks/DVTInstrumentsFoundation.framework/DTServiceHub")))
(allow mach-task*
	(target self)
	(entitlement-is-bool-true "b'com.apple.security.ts.mach-task-name'")
	(require-any (signing-identifier "com.apple.osanalyticshelper")
(signing-identifier "com.apple.gputoolsserviced")
(signing-identifier "com.apple.gputoolstransportd"))
	(require-all
		(debug-mode)
		(process-name "/System/Library/PrivateFrameworks/DVTInstrumentsFoundation.framework/DTServiceHub")))
(allow mach-task-name)
(allow mach-task-read)
(allow mach-task-special-port*)
(allow mach-task-special-port-get)
(allow necp-client-open
	(entitlement-is-bool-true "b'com.apple.security.network.server'")
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.network.client'")
		(entitlement-is-bool-true "b'com.apple.developer.networking.multicast'"))
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'")
		(require-any
			(require-all
				(subpath-prefix "${HOME}/Library/Mobile Documents")
				(require-any
					(extension "b'com.apple.librarian.ubiquity-container'")
					(entitlement-is-bool-true "b'com.apple.private.librarian.container-proxy'")))
			(require-all
				(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents/?")
				(require-any
					(extension "b'com.apple.librarian.ubiquity-container'")
					(entitlement-is-bool-true "b'com.apple.private.librarian.container-proxy'")))
			(require-all
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$")
				(subpath-prefix "${FRONT_USER_HOME}"))
			(require-all
				(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/File Provider Storage/?")
				(require-any
					(extension "b'com.apple.librarian.ubiquity-container'")
					(entitlement-is-bool-true "b'com.apple.private.librarian.container-proxy'")))
			(require-all
				(extension "b'com.apple.app-sandbox.read-write'")
				(require-any
					(subpath-prefix "${HOME}/Library/Mobile Documents")
					(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents/?"))))))
(allow network-inbound
	(control-name "com.apple.flow-divert")
	(entitlement-is-bool-true "b'com.apple.security.network.client'")
	(literal "/private/var/run/syslog")
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.network.server'")
		(require-any
			(control-name "com.apple.network.statistics")
			(control-name "com.apple.netsrc")
			(literal "/private/var/run/mDNSResponder")))
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'")
		(require-any
			(require-all
				(subpath-prefix "${HOME}/Library/Mobile Documents")
				(require-any
					(extension "b'com.apple.librarian.ubiquity-container'")
					(entitlement-is-bool-true "b'com.apple.private.librarian.container-proxy'")))
			(require-all
				(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents/?")
				(require-any
					(extension "b'com.apple.librarian.ubiquity-container'")
					(entitlement-is-bool-true "b'com.apple.private.librarian.container-proxy'")))
			(require-all
				(literal "/private/var/")
				(regex #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/mobile/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/euser[0-9]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/[-0-9A-F]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage/" #"^/private/var/Users/[^/]+/Containers/Shared/AppGroup/[^/]+/File Provider Storage$")
				(subpath-prefix "${FRONT_USER_HOME}"))
			(require-all
				(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Shared/AppGroup/[UNSUPPORTED]+/File Provider Storage/?")
				(require-any
					(extension "b'com.apple.librarian.ubiquity-container'")
					(entitlement-is-bool-true "b'com.apple.private.librarian.container-proxy'")))
			(require-all
				(extension "b'com.apple.app-sandbox.read-write'")
				(require-any
					(subpath-prefix "${HOME}/Library/Mobile Documents")
					(regex #"/private/var/PersonaVolumes/[UNSUPPORTED]+/Containers/Data/[UNSUPPORTED]+/[UNSUPPORTED]+/Library/Mobile Documents/?")))))
	(require-all
		(literal "/private/var/run/lockdown/checkin")
		(entitlement-is-bool-true "b'com.apple.security.ts.lockdown-service'"))
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.ts.lockdown-client'")
		(literal "/private/var/run/lockdown.sock")))
(allow nvram*
	(signing-identifier "com.apple.SoundBoard")
	(nvram-variable "emu")
	(require-all
		(nvram-variable "")
		(entitlement-is-present "b'com.apple.security.ts.nvram-read'"))
	(require-all
		(nvram-variable "")
		(entitlement-is-present "b'com.apple.security.ts.nvram-read-write'"))
	(require-all
		(signing-identifier "com.apple.SoundBoard")
		(require-any (nvram-variable "boot-args")
(nvram-variable "obliteration")
(nvram-variable "oblit-begins")))
	(require-all
		(require-any (nvram-variable "OOBF")
(nvram-variable "IONVRAM-FORCESYNCNOW-PROPERTY"))
		(signing-identifier "com.apple.SoundBoard"))
	(require-all
		(nvram-variable "boot-args")
		(signing-identifier "com.apple.darwinaudiod"))
	(require-all
		(nvram-variable "StartupMute")
		(signing-identifier "com.apple.AccessibilityUIServer")))
(allow nvram-delete
	(require-all
		(nvram-variable "")
		(entitlement-is-present "b'com.apple.security.ts.nvram-read-write'"))
	(require-all
		(require-any (nvram-variable "OOBF")
(nvram-variable "IONVRAM-FORCESYNCNOW-PROPERTY"))
		(signing-identifier "com.apple.SoundBoard"))
	(require-all
		(nvram-variable "StartupMute")
		(signing-identifier "com.apple.AccessibilityUIServer")))
(allow opendirectory-user-modify)
(allow process*
	(require-all
		(process-name "/usr/libexec/thermalmonitord")
		(debug-mode))
	(require-all
		(debug-mode)
		(debug-mode)
		(process-name "/System/Library/PrivateFrameworks/DVTInstrumentsFoundation.framework/DTServiceHub"))
	(require-all
		(subpath "/System/Library/PrivateFrameworks/DVTInstrumentsFoundation.framework")
		(debug-mode)
		(process-name "/System/Library/PrivateFrameworks/DVTInstrumentsFoundation.framework/DTServiceHub")))
(allow process-exec*
	(require-all
		(process-name "/usr/libexec/thermalmonitord")
		(debug-mode)))
(allow process-fork)
(allow process-info*
	(target self)
	(require-all
		(target others)
		(debug-mode)
		(process-name "/System/Library/PrivateFrameworks/DVTInstrumentsFoundation.framework/DTServiceHub")))
(allow process-info-codesignature
	(signing-identifier "com.apple.dasd")
	(target self))
(allow process-info-ledger
	(entitlement-is-bool-true "b'com.apple.security.exception.process-info'")
	(target self))
(allow process-info-listpids
	(signing-identifier "com.apple.SoundBoard"))
(allow process-info-pidfdinfo
	(target self))
(allow process-legacy-codesigning-text-offset-get
	(target self)
	(require-all
		(debug-mode)
		(process-name "/System/Library/PrivateFrameworks/DVTInstrumentsFoundation.framework/DTServiceHub"))
	(require-all
		(target others)
		(signing-identifier "com.apple.Carousel")))
(allow pseudo-tty)
(allow socket-ioctl)
(allow socket-option*)
(allow socket-option-set)
(allow syscall*)
(allow syscall-unix)
(allow syscall-mig
	(extension "b'com.apple.security.exception.sysctl.read-write'")
	(extension "b'com.apple.security.exception.sysctl.read-only'")
	(sysctl-name "kern.bootsessionuuid")
	(require-all
		(sysctl-name "net.statistics")
		(require-any
			(entitlement-is-bool-true "b'com.apple.security.network.client'")
			(entitlement-is-bool-true "b'com.apple.security.network.server'")
			(require-all
				(process-attribute is-apple-signed-executable)
				(require-any
					(sysctl-name "kern.proc.pid.")
					(sysctl-name "kern.argmax")
					(require-any (sysctl-name "kern.willshutdown")
(sysctl-name "kern.willuserspacereboot"))
					(sysctl-name "kern.bootargs")))))
	(require-all
		(sysctl-name "net.routetable.")
		(require-any
			(entitlement-is-bool-true "b'com.apple.security.network.client'")
			(entitlement-is-bool-true "b'com.apple.security.network.server'")
			(require-all
				(process-attribute is-apple-signed-executable)
				(require-any
					(sysctl-name "kern.proc.pid.")
					(sysctl-name "kern.argmax")
					(require-any (sysctl-name "kern.willshutdown")
(sysctl-name "kern.willuserspacereboot"))
					(sysctl-name "kern.bootargs")))))
	(require-all
		(sysctl-name "kern.ipc.maxsockbuf")
		(require-any
			(entitlement-is-bool-true "b'com.apple.security.network.client'")
			(entitlement-is-bool-true "b'com.apple.security.network.server'")
			(require-all
				(process-attribute is-apple-signed-executable)
				(require-any
					(sysctl-name "kern.proc.pid.")
					(sysctl-name "kern.argmax")
					(require-any (sysctl-name "kern.willshutdown")
(sysctl-name "kern.willuserspacereboot"))
					(sysctl-name "kern.bootargs")))))
	(require-all
		(sysctl-name "kern.nisdomainname")
		(require-any
			(entitlement-is-bool-true "b'com.apple.security.network.client'")
			(entitlement-is-bool-true "b'com.apple.security.network.server'")
			(require-all
				(process-attribute is-apple-signed-executable)
				(require-any
					(sysctl-name "kern.proc.pid.")
					(sysctl-name "kern.argmax")
					(require-any (sysctl-name "kern.willshutdown")
(sysctl-name "kern.willuserspacereboot"))
					(sysctl-name "kern.bootargs")))))
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.exception.process-info'")
		(require-any (sysctl-name "kern.proc.")
(sysctl-name "kern.procargs2.")))
	(require-all
		(sysctl-name "sysctl.proc_cputype.")
		(require-any
			(signing-identifier "com.apple.osanalyticshelper")
			(require-all
				(debug-mode)
				(process-name "/System/Library/PrivateFrameworks/DVTInstrumentsFoundation.framework/DTServiceHub"))))
	(require-all
		(require-any (sysctl-name "kern.kdebug.")
(sysctl-name "net.link.generic.ifdata."))
		(debug-mode)
		(process-name "/System/Library/PrivateFrameworks/DVTInstrumentsFoundation.framework/DTServiceHub"))
	(require-all
		(sysctl-name "sysctl.proc_native")
		(require-any
			(require-any (sysctl-name "hw.model")
(sysctl-name "hw.logicalcpu_max")
(sysctl-name "hw.physicalcpu_max"))
			(require-any (sysctl-name "hw.optional.")
(sysctl-name "hw.byteorder")
(sysctl-name "hw.physmem")
(sysctl-name "hw.pagesize")
(sysctl-name "hw.l3cachesize")
(sysctl-name "hw.l1dcachesize")
(sysctl-name "hw.l1icachesize")
(sysctl-name "hw.cputype")
(sysctl-name "hw.cpusubfamily")
(sysctl-name "hw.cachesize")
(sysctl-name "hw.cacheconfig")
(sysctl-name "hw.cachelinesize_compat"))
			(require-any (sysctl-name "kern.hostid")
(sysctl-name "hw.tbfrequency"))
			(require-any (sysctl-name "security.mac.amfi.developer_mode_status")
(sysctl-name "kern.maxproc")
(sysctl-name "kern.boottime")
(sysctl-name "kern.clockrate")
(sysctl-name "kern.development")
(sysctl-name "kern.wq_limit_cooperative_threads")
(sysctl-name "hw.usermem")
(sysctl-name "hw.busfrequency")
(sysctl-name "hw.busfrequency_compat")
(sysctl-name "hw.cpusubtype")
(sysctl-name "hw.cpu64bit_capable")
(sysctl-name "hw.cpufrequency")
(sysctl-name "hw.cpufrequency_compat")
(sysctl-name "hw.l3settings")
(sysctl-name "hw.l3cachesize_compat")
(sysctl-name "hw.l2settings")
(sysctl-name "hw.l2cachesize_compat")
(sysctl-name "hw.l1icachesize_compat")
(sysctl-name "hw.l1dcachesize_compat"))
			(require-any (sysctl-name "hw.memsize")
(sysctl-name "hw.machine"))
			(sysctl-name "hw.targettype")
			(sysctl-name "kern.maxvnodes")
			(sysctl-name "hw.tbfrequency_compat")
			(sysctl-name "hw.l2cachesize")
			(require-any (sysctl-name "hw.activecpu")
(sysctl-name "hw.pagesize_compat"))
			(require-any (sysctl-name "hw.perflevel")
(sysctl-name "kern.hv_vmm_present"))
			(sysctl-name "kern.hostname")
			(sysctl-name "kern.maxfilesperproc")
			(sysctl-name "hw.product")
			(sysctl-name "hw.ncpu")
			(require-any (sysctl-name "hw.cpufamily")
(sysctl-name "hw.logicalcpu")
(sysctl-name "hw.nperflevels"))
			(sysctl-name "hw.target")
			(sysctl-name "hw.cachelinesize")
			(sysctl-name "hw.physicalcpu")
			(require-any (sysctl-name "kern.version")
(sysctl-name "kern.ostype")
(sysctl-name "kern.osrelease"))
			(require-any (sysctl-name "kern.ngroups")
(sysctl-name "kern.usrstack")
(sysctl-name "kern.saved_ids")
(sysctl-name "kern.monotonicclock")
(sysctl-name "kern.monotoniclock_offset_usecs"))
			(require-any (sysctl-name "kern.waketime")
(sysctl-name "machdep.ptrauth_enabled")
(sysctl-name "machdep.virtual_address_size")
(sysctl-name "security.mac.sandbox.sentinel"))
			(sysctl-name "sysctl.name2oid")
			(require-any (sysctl-name "kern.usrstack64")
(sysctl-name "hw.cpufrequency_max"))
			(require-any (sysctl-name "kern.osvariant_status")
(sysctl-name "kern.osproductversion"))
			(sysctl-name "kern.bootsessionuuid")
			(sysctl-name "hw.vectorunit")
			(sysctl-name "vm.malloc_ranges")
			(sysctl-name "kern.secure_kernel")
			(sysctl-name "security.mac.lockdown_mode_state")
			(sysctl-name "kern.memorystatus_level")
			(sysctl-name "kern.osversion")
			(sysctl-name "vm.loadavg")
			(require-all
				(process-attribute is-apple-signed-executable)
				(require-any
					(sysctl-name "kern.proc.pid.")
					(sysctl-name "kern.argmax")
					(require-any (sysctl-name "kern.willshutdown")
(sysctl-name "kern.willuserspacereboot"))
					(sysctl-name "kern.bootargs"))))))
(allow system-automount)
(allow system-debug
	(fsctl-command-regex [UNSUPPORTED](_IO "A" 20))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "J" 32))
		(require-any
			(entitlement-is-bool-true "b'com.apple.security.network.client'")
			(entitlement-is-bool-true "b'com.apple.security.network.server'")))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "J" 3))
		(require-any
			(entitlement-is-bool-true "b'com.apple.security.network.client'")
			(entitlement-is-bool-true "b'com.apple.security.network.server'")))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "h" 31))
		(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'"))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "J" 32))
		(signing-identifier "com.apple.managedassetsd"))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "J" 2))
		(signing-identifier "com.apple.managedassetsd"))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "J" 14))
		(signing-identifier "com.apple.desktopservices.desktopserviceshelper"))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "h" 32))
		(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'"))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "J" 93))
		(require-any
			(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'")
			(entitlement-is-bool-true "b'com.apple.security.ts.revisiond-client'")
			(signing-identifier "com.apple.FileProviderDaemon.FPCKService")))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "J" 71))
		(require-any
			(signing-identifier "com.apple.Carousel")
			(signing-identifier "com.apple.FileProviderDaemon.FPCKService")))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "J" 68))
		(require-any
			(signing-identifier "com.apple.videocodecd")
			(signing-identifier "com.apple.mediaplaybackd")))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "J" 71))
		(signing-identifier "com.apple.storagedatad"))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "J" 2))
		(signing-identifier "com.apple.mediaplaybackd"))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "J" 14))
		(signing-identifier "com.apple.storagedatad"))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "J" 68))
		(signing-identifier "com.apple.audiomxd"))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "J" 32))
		(signing-identifier "com.apple.mediaplaybackd"))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "J" 68))
		(signing-identifier "com.apple.mediaplaybackd"))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "J" 93))
		(signing-identifier "com.apple.FileProviderDaemon.FPCKService"))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "J" 71))
		(signing-identifier "com.apple.FileProviderDaemon.FPCKService"))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "J" 2))
		(signing-identifier "com.apple.FileProviderDaemon.FPCKService"))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "J" 32))
		(signing-identifier "com.apple.FileProviderDaemon.FPCKService"))
	(require-all
		(fsctl-command-regex [UNSUPPORTED](_IO "J" 109))
		(signing-identifier "com.apple.FileProviderDaemon.FPCKService")))
(allow system-fcntl
	(require-all
		(info-type "")
		(entitlement-is-present "b'com.apple.security.ts.system-info'"))
	(require-all
		(info-type "hw.uuid")
		(require-any
			(signing-identifier "com.apple.assistantd")
			(require-all
				(debug-mode)
				(process-name "/System/Library/PrivateFrameworks/DVTInstrumentsFoundation.framework/DTServiceHub"))))
	(require-all
		(info-type "net.link.addr")
		(signing-identifier "com.apple.srp-mdns-proxy")))
(allow system-mac*)
(allow system-mac-label)
(allow system-mac-syscall)
(allow system-necp-client-action
	(signing-identifier "com.apple.FileProviderDaemon.FPCKService"))
(allow system-nfssvc)
(allow system-sched
	(signing-identifier "com.apple.srp-mdns-proxy")
	(signing-identifier "com.apple.mDNSResponderHelper")
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.network.client'")
		(require-any
			(socket-domain 39)
			(socket-domain AF_ROUTE)
			(require-all
				(socket-domain AF_SYSTEM)
				(require-any
					(socket-protocol 2)
					(entitlement-is-bool-true "b'com.apple.security.ts.NWSystemPathMonitor'")))))
	(require-all
		(socket-domain 39)
		(entitlement-is-bool-true "b'com.apple.security.network.server'"))
	(require-all
		(socket-domain AF_ROUTE)
		(entitlement-is-bool-true "b'com.apple.security.network.server'"))
	(require-all
		(socket-domain AF_SYSTEM)
		(require-any
			(entitlement-is-bool-true "b'com.apple.security.ts.NWSystemPathMonitor'")
			(require-all
				(socket-protocol 2)
				(entitlement-is-bool-true "b'com.apple.security.network.server'")))))
(allow system-set-time
	(require-any (signing-identifier "com.apple.videocodecd")
(signing-identifier "com.apple.mediaplaybackd")))
(allow system-swap
	(preference-domain "com.apple.logging")
	(preference-domain "kCFPreferencesAnyApplication")
	(preference-domain "com.apple.demo-settings")
	(preference-domain "com.apple.NanoRegistry")
	(preference-domain "com.apple.pairedsync")
	(extension "b'com.apple.security.exception.shared-preference.read-write'")
	(extension "b'com.apple.security.exception.shared-preference.read-only'")
	(preference-domain "com.apple.Accessibility")
	(preference-domain "com.apple.da")
	(preference-domain "com.apple.hangtracer")
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.ts.addressbook'")
		(require-any
			(preference-domain "com.apple.CoreDuet")
			(preference-domain "com.apple.DataMigration")
			(preference-domain "com.apple.icloud.findmydeviced.postwipe")
			(preference-domain "com.apple.icloud.findmydeviced.public.notbackedup")
			(preference-domain "com.apple.AppSupport")
			(preference-domain "com.apple.AOSNotification.public.notbackedup")
			(preference-domain "com.apple.PeoplePicker")))
	(require-all
		(preference-domain "com.apple.itunesstored")
		(require-any
			(entitlement-is-bool-true "b'com.apple.itunesstored.private'")
			(require-all
				(process-attribute is-apple-signed-executable)
				(require-any
					(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'")
					(entitlement-is-bool-true "b'com.apple.security.ts.play-media'")
					(entitlement-is-bool-true "b'com.apple.security.ts.asset-access.with-media-playback'")))))
	(require-all
		(preference-domain "com.apple.mobileipod")
		(require-any
			(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'")
			(entitlement-is-bool-true "b'com.apple.security.ts.play-media'")
			(entitlement-is-bool-true "b'com.apple.security.ts.asset-access.with-media-playback'")))
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.ts.ubiquity'")
		(require-any
			(preference-domain "com.apple.coremedia")
			(preference-domain "com.apple.coreaudio")
			(preference-domain "com.apple.avfoundation")
			(preference-domain "com.apple.corevideo")))
	(require-all
		(preference-domain "com.apple.iokit.IOMobileGraphicsFamily")
		(require-any
			(entitlement-is-bool-true "b'com.apple.security.ts.render-images'")
			(entitlement-is-bool-true "b'com.apple.security.ts.framebuffer-access'")
			(entitlement-is-bool-true "b'com.apple.security.ts.addressbook'")))
	(require-all
		(process-attribute is-apple-signed-executable)
		(require-any
			(preference-domain "com.apple.demo-settings")
			(preference-domain "com.apple.security")))
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.ts.play-media'")
		(require-any
			(preference-domain "com.apple.coremedia")
			(preference-domain "com.apple.coreaudio")
			(preference-domain "com.apple.avfoundation")
			(preference-domain "com.apple.corevideo")))
	(require-all
		(preference-domain "com.apple.Metal")
		(entitlement-is-bool-true "b'com.apple.security.ts.opengl-or-metal'"))
	(require-all
		(preference-domain "com.apple.opengl")
		(entitlement-is-bool-true "b'com.apple.security.ts.opengl-or-metal'"))
	(require-all
		(preference-domain "com.apple.CFNetwork")
		(entitlement-is-bool-true "b'com.apple.security.network.client'"))
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.ts.location-services'")
		(require-any
			(preference-domain "com.apple.locationd")
			(preference-domain "com.apple.AppSupport")
			(preference-domain "com.apple.GEO")))
	(require-all
		(preference-domain "com.apple.carrier")
		(entitlement-is-bool-true "b'com.apple.security.ts.location-services'"))
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.ts.identity-services-client'")
		(require-any
			(preference-domain "com.apple.ids")
			(preference-domain "com.apple.conference")
			(preference-domain "com.apple.logging")
			(preference-domain "com.apple.marco")))
	(require-all
		(entitlement-is-bool-true "b'com.apple.security.ts.identity-services-receive-file'")
		(require-any
			(preference-domain "com.apple.logging")
			(preference-domain "com.apple.marco")
			(preference-domain "com.apple.ids")
			(preference-domain "com.apple.conference")))
	(require-all
		(preference-domain "com.apple.GEO")
		(entitlement-is-bool-true "b'com.apple.security.ts.geoservices'"))
	(require-all
		(preference-domain "com.apple.CloudKit")
		(entitlement-is-bool-true "b'com.apple.security.ts.cloudkit-client'"))
	(require-all
		(preference-domain "com.apple.MobileAsset")
		(require-any
			(entitlement-is-bool-true "b'com.apple.security.ts.asset-access.with-media-playback'")
			(entitlement-is-bool-true "b'com.apple.security.ts.asset-access'")))
	(require-all
		(preference-domain "com.apple.coremedia")
		(entitlement-is-bool-true "b'com.apple.security.ts.asset-access.with-media-playback'"))
	(require-all
		(preference-domain "com.apple.coreaudio")
		(entitlement-is-bool-true "b'com.apple.security.ts.asset-access.with-media-playback'"))
	(require-all
		(preference-domain "com.apple.avfoundation")
		(entitlement-is-bool-true "b'com.apple.security.ts.asset-access.with-media-playback'"))
	(require-all
		(preference-domain "com.apple.corevideo")
		(entitlement-is-bool-true "b'com.apple.security.ts.asset-access.with-media-playback'"))
	(require-all
		(preference-domain "com.apple.ids")
		(require-any
			(signing-identifier "com.apple.facetimemessagestored")
			(signing-identifier "com.apple.Carousel")
			(require-any (signing-identifier "com.apple.announced")
(signing-identifier "com.apple.FTLivePhotoService"))))
	(require-all
		(preference-domain "com.apple.conference")
		(require-any
			(signing-identifier "com.apple.facetimemessagestored")
			(signing-identifier "com.apple.Carousel")
			(require-any (signing-identifier "com.apple.announced")
(signing-identifier "com.apple.FTLivePhotoService"))))
	(require-all
		(preference-domain "com.apple.CrashReporter")
		(require-any
			(require-any (signing-identifier "com.apple.videocodecd")
(signing-identifier "com.apple.mediaplaybackd"))
			(signing-identifier "com.apple.audiomxd")))
	(require-all
		(preference-domain "com.apple.companionsync")
		(require-any
			(signing-identifier "com.apple.tursd")
			(signing-identifier "com.apple.nanophoned")))
	(require-all
		(preference-domain "com.apple.medialibrary")
		(signing-identifier "com.apple.siriknowledged"))
	(require-all
		(preference-domain "com.apple.homesharing")
		(signing-identifier "com.apple.siriknowledged"))
	(require-all
		(preference-domain "com.apple.logging")
		(require-any
			(signing-identifier "com.apple.facetimemessagestored")
			(signing-identifier "com.apple.Carousel")
			(require-any (signing-identifier "com.apple.announced")
(signing-identifier "com.apple.FTLivePhotoService"))))
	(require-all
		(preference-domain "com.apple.marco")
		(require-any
			(signing-identifier "com.apple.facetimemessagestored")
			(signing-identifier "com.apple.Carousel")
			(require-any (signing-identifier "com.apple.announced")
(signing-identifier "com.apple.FTLivePhotoService"))))
	(require-all
		(preference-domain "com.apple.iclouddrive.features")
		(require-any
			(require-any (signing-identifier "com.apple.storagedatad")
(signing-identifier "com.apple.bookdatastored")
(signing-identifier "com.apple.desktopservices.desktopserviceshelper")
(signing-identifier "com.apple.CloudDocsDaemon.container-metadata-extractor"))
			(signing-identifier "com.apple.siri.context.service")
			(signing-identifier "com.apple.GameController.gamecontrollerd")
			(signing-identifier "com.apple.installcoordinationd")
			(signing-identifier "com.apple.sociallayerd")
			(signing-identifier "com.apple.assistantd"))))
(allow user-preference*
	(preference-domain "kCFPreferencesAnyApplication")
	(extension "b'com.apple.security.exception.managed-preference.read-only'"))
(allow user-preference-write)
